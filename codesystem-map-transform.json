{
  "resourceType": "CodeSystem",
  "id": "map-transform",
  "meta": {
    "lastUpdated": "2016-06-06T20:14:04.181+00:00"
  },
  "text": {
    "status": "generated",
    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><h2>StructureMapTransform</h2><p>How data is copied / created</p><p>This code system http://hl7.org/fhir/map-transform defines the following codes:</p><table class=\"codes\"><tr><td><b>Code</b></td><td><b>Display</b></td><td><b>Definition</b></td></tr><tr><td>create<a name=\"create\"> </a></td><td>create</td><td>create(type : string) - type is passed through to the application on the standard API, and must be known by it</td></tr><tr><td>copy<a name=\"copy\"> </a></td><td>copy</td><td>copy(source)</td></tr><tr><td>truncate<a name=\"truncate\"> </a></td><td>truncate</td><td>truncate(source, length) - source must be stringy type</td></tr><tr><td>escape<a name=\"escape\"> </a></td><td>escape</td><td>escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped</td></tr><tr><td>cast<a name=\"cast\"> </a></td><td>cast</td><td>cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known</td></tr><tr><td>append<a name=\"append\"> </a></td><td>append</td><td>append(source...) - source is element or string</td></tr><tr><td>translate<a name=\"translate\"> </a></td><td>translate</td><td>translate(source, uri_of_map) - use the translate operation</td></tr><tr><td>reference<a name=\"reference\"> </a></td><td>reference</td><td>reference(source : object) - return a string that references the provided tree properly</td></tr><tr><td>dateOp<a name=\"dateOp\"> </a></td><td>dateOp</td><td>something</td></tr><tr><td>uuid<a name=\"uuid\"> </a></td><td>uuid</td><td>something</td></tr><tr><td>pointer<a name=\"pointer\"> </a></td><td>pointer</td><td>something</td></tr><tr><td>evaluate<a name=\"evaluate\"> </a></td><td>evaluate</td><td>something</td></tr></table></div>"
  },
  "extension": [
    {
      "url": "http://hl7.org/fhir/StructureDefinition/valueset-oid",
      "valueUri": "urn:oid:2.16.840.1.113883.4.642.1.537"
    }
  ],
  "url": "http://hl7.org/fhir/map-transform",
  "version": "1.4.0",
  "name": "StructureMapTransform",
  "status": "draft",
  "experimental": false,
  "publisher": "HL7 (FHIR Project)",
  "contact": [
    {
      "telecom": [
        {
          "system": "other",
          "value": "http://hl7.org/fhir"
        },
        {
          "system": "email",
          "value": "fhir@lists.hl7.org"
        }
      ]
    }
  ],
  "date": "2016-06-06T20:14:04+00:00",
  "description": "How data is copied / created",
  "caseSensitive": true,
  "valueSet": "http://hl7.org/fhir/ValueSet/map-transform",
  "content": "complete",
  "concept": [
    {
      "code": "create",
      "display": "create",
      "definition": "create(type : string) - type is passed through to the application on the standard API, and must be known by it"
    },
    {
      "code": "copy",
      "display": "copy",
      "definition": "copy(source)"
    },
    {
      "code": "truncate",
      "display": "truncate",
      "definition": "truncate(source, length) - source must be stringy type"
    },
    {
      "code": "escape",
      "display": "escape",
      "definition": "escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped"
    },
    {
      "code": "cast",
      "display": "cast",
      "definition": "cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known"
    },
    {
      "code": "append",
      "display": "append",
      "definition": "append(source...) - source is element or string"
    },
    {
      "code": "translate",
      "display": "translate",
      "definition": "translate(source, uri_of_map) - use the translate operation"
    },
    {
      "code": "reference",
      "display": "reference",
      "definition": "reference(source : object) - return a string that references the provided tree properly"
    },
    {
      "code": "dateOp",
      "display": "dateOp",
      "definition": "something"
    },
    {
      "code": "uuid",
      "display": "uuid",
      "definition": "something"
    },
    {
      "code": "pointer",
      "display": "pointer",
      "definition": "something"
    },
    {
      "code": "evaluate",
      "display": "evaluate",
      "definition": "something"
    }
  ]
}