{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "http://hl7.org/fhir/json-schema/StructureMap",
  "$ref": "#/definitions/StructureMap",
  "description": "see http://hl7.org/fhir/json.html#schema for information about the FHIR Json Schemas",
  "definitions": {
    "StructureMap": {
      "allOf": [
        {
          "$ref": "DomainResource.schema.json/definitions/DomainResource"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "resourceType": {
              "description": "This is a StructureMap resource",
              "type": "string",
              "enum": [
                "StructureMap"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this structure map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure map is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "identifier": {
              "description": "Formal identifier that is used to identify this StructureMap when it is represented in other formats, or referenced in a specification, model, design or an instance  (should be globally unique OID, UUID, or URI), (if it\u0027s not possible to use the literal URI).",
              "type": "array",
              "items": {
                "$ref": "Identifier.schema.json/definitions/Identifier"
              }
            },
            "version": {
              "description": "The identifier that is used to identify this version of the StructureMap when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the StructureMap author manually.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name identifying the StructureMap.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "status": {
              "description": "The status of the StructureMap.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "experimental": {
              "description": "This StructureMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the structure map.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Contact"
              }
            },
            "date": {
              "description": "The date this version of the structure map was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the StructureMap and its use.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of structure maps.",
              "type": "array",
              "items": {
                "$ref": "CodeableConcept.schema.json/definitions/CodeableConcept"
              }
            },
            "requirements": {
              "description": "Explains why this structure map is needed and why it\u0027s been designed as it has.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "copyright": {
              "description": "A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "structure": {
              "description": "A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Structure"
              }
            },
            "import": {
              "description": "Other maps used by this map (canonical URLs).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "import_": {
              "description": "Extensions for import",
              "items": {
                "$ref": "Element.schema.json/definitions/Element"
              }
            },
            "group": {
              "description": "Named sections for reader convenience.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Group"
              }
            }
          },
          "required": [
            "resourceType",
            "group"
          ]
        }
      ]
    },
    "StructureMap.Contact": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the structure map.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "ContactPoint.schema.json/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "StructureMap.Structure": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "url": {
              "description": "The canonical URL that identifies the structure.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "mode": {
              "description": "How the referenced structure is used in this mapping.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "documentation": {
              "description": "Documentation that describes how the structure is used in the mapping.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "Element.schema.json/definitions/Element"
            }
          }
        }
      ]
    },
    "StructureMap.Group": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "Descriptive name for a user.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "extends": {
              "description": "Another group that this group adds rules to.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "extends_": {
              "description": "Extensions for extends",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "documentation": {
              "description": "Documentation for this group.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "input": {
              "description": "A name assigned to an instance of data. The instance must be provided when the mapping is invoked.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Input"
              }
            },
            "rule": {
              "description": "Transform Rule from source to target.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Rule"
              }
            }
          },
          "required": [
            "input",
            "rule"
          ]
        }
      ]
    },
    "StructureMap.Input": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "Name for this instance of data.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "type": {
              "description": "Type for this instance of data.",
              "type": "string"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "mode": {
              "description": "Mode for this instance of data.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "documentation": {
              "description": "Documentation for this instance of data.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "Element.schema.json/definitions/Element"
            }
          }
        }
      ]
    },
    "StructureMap.Rule": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "Name of the rule for internal references.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "source": {
              "description": "Source inputs to the mapping.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Source"
              }
            },
            "target": {
              "description": "Content to create because of this mapping rule.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Target"
              }
            },
            "rule": {
              "description": "Rules contained in this rule.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Rule"
              }
            },
            "dependent": {
              "description": "Which other rules to apply in the context of this rule.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Dependent"
              }
            },
            "documentation": {
              "description": "Documentation for this instance of data.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "Element.schema.json/definitions/Element"
            }
          },
          "required": [
            "source"
          ]
        }
      ]
    },
    "StructureMap.Source": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "required": {
              "description": "Whether this rule applies if the source isn\u0027t found.",
              "type": "true | false"
            },
            "required_": {
              "description": "Extensions for required",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "context": {
              "description": "Type or variable this rule applies to.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "context_": {
              "description": "Extensions for context",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "contextType": {
              "description": "How to interpret the context.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contextType_": {
              "description": "Extensions for contextType",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "element": {
              "description": "Optional field for this source.",
              "type": "string"
            },
            "element_": {
              "description": "Extensions for element",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "listMode": {
              "description": "How to handle the list mode for this element.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "listMode_": {
              "description": "Extensions for listMode",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "variable": {
              "description": "Named context for field, if a field is specified.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "variable_": {
              "description": "Extensions for variable",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "condition": {
              "description": "FluentPath expression  - must be true or the rule does not apply.",
              "type": "string"
            },
            "condition_": {
              "description": "Extensions for condition",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "check": {
              "description": "FluentPath expression  - must be true or the mapping engine throws an error instead of completing.",
              "type": "string"
            },
            "check_": {
              "description": "Extensions for check",
              "$ref": "Element.schema.json/definitions/Element"
            }
          }
        }
      ]
    },
    "StructureMap.Target": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "context": {
              "description": "Type or variable this rule applies to.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "context_": {
              "description": "Extensions for context",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "contextType": {
              "description": "How to interpret the context.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contextType_": {
              "description": "Extensions for contextType",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "element": {
              "description": "Field to create in the context.",
              "type": "string"
            },
            "element_": {
              "description": "Extensions for element",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "variable": {
              "description": "Named context for field, if desired, and a field is specified.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "variable_": {
              "description": "Extensions for variable",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "listMode": {
              "description": "If field is a list, how to manage the list.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "listMode_": {
              "description": "Extensions for listMode",
              "items": {
                "$ref": "Element.schema.json/definitions/Element"
              }
            },
            "listRuleId": {
              "description": "Internal rule reference for shared list items.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "listRuleId_": {
              "description": "Extensions for listRuleId",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "transform": {
              "description": "How the data is copied / created.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "transform_": {
              "description": "Extensions for transform",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "parameter": {
              "description": "Parameters to the transform.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Parameter"
              }
            }
          }
        }
      ]
    },
    "StructureMap.Parameter": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "valueId": {
              "description": "Parameter value - variable or literal.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "valueId_": {
              "description": "Extensions for valueId",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "valueString": {
              "description": "Parameter value - variable or literal.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "valueBoolean": {
              "description": "Parameter value - variable or literal.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "valueInteger": {
              "description": "Parameter value - variable or literal.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "valueDecimal": {
              "description": "Parameter value - variable or literal.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "valueDecimal_": {
              "description": "Extensions for valueDecimal",
              "$ref": "Element.schema.json/definitions/Element"
            }
          }
        }
      ]
    },
    "StructureMap.Dependent": {
      "allOf": [
        {
          "$ref": "BackboneElement.schema.json/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "Name of a rule or group to apply.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "Element.schema.json/definitions/Element"
            },
            "variable": {
              "description": "Names of variables to pass to the rule or group.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "variable_": {
              "description": "Extensions for variable",
              "items": {
                "$ref": "Element.schema.json/definitions/Element"
              }
            }
          }
        }
      ]
    }
  }
}