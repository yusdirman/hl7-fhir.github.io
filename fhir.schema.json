{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "id": "http://hl7.org/fhir/json-schema/fhir",
  "$ref": "#/definitions/ResourceList",
  "description": "see http://hl7.org/fhir/json.html#schema for information about the FHIR Json Schemas",
  "definitions": {
    "Element": {
      "allOf": [
        {
          "$ref": "#/definitions/"
        },
        {
          "description": "Base definition for all elements in a resource.",
          "properties": {
            "id": {
              "description": "unique id for the element within a resource (for internal references).",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "id_": {
              "description": "Extensions for id",
              "$ref": "#/definitions/Element"
            },
            "extension": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element. In order to make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Extension"
              }
            }
          }
        }
      ]
    },
    "Extension": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "Optional Extensions Element - found in all resources.",
          "properties": {
            "url": {
              "description": "Source of the definition for the extension code - a logical name or a URL.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "valueBoolean": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueInteger": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "#/definitions/Element"
            },
            "valueDecimal": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "valueDecimal_": {
              "description": "Extensions for valueDecimal",
              "$ref": "#/definitions/Element"
            },
            "valueBase64Binary": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "type": "string"
            },
            "valueBase64Binary_": {
              "description": "Extensions for valueBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "valueInstant": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "type": "string"
            },
            "valueInstant_": {
              "description": "Extensions for valueInstant",
              "$ref": "#/definitions/Element"
            },
            "valueString": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueUri": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "type": "string"
            },
            "valueUri_": {
              "description": "Extensions for valueUri",
              "$ref": "#/definitions/Element"
            },
            "valueDate": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "valueDate_": {
              "description": "Extensions for valueDate",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            },
            "valueTime": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "valueTime_": {
              "description": "Extensions for valueTime",
              "$ref": "#/definitions/Element"
            },
            "valueCode": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "valueCode_": {
              "description": "Extensions for valueCode",
              "$ref": "#/definitions/Element"
            },
            "valueOid": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "valueOid_": {
              "description": "Extensions for valueOid",
              "$ref": "#/definitions/Element"
            },
            "valueUuid": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "valueUuid_": {
              "description": "Extensions for valueUuid",
              "$ref": "#/definitions/Element"
            },
            "valueId": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "valueId_": {
              "description": "Extensions for valueId",
              "$ref": "#/definitions/Element"
            },
            "valueUnsignedInt": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "valueUnsignedInt_": {
              "description": "Extensions for valueUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "valuePositiveInt": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "valuePositiveInt_": {
              "description": "Extensions for valuePositiveInt",
              "$ref": "#/definitions/Element"
            },
            "valueMarkdown": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "type": "string"
            },
            "valueMarkdown_": {
              "description": "Extensions for valueMarkdown",
              "$ref": "#/definitions/Element"
            },
            "valueElement": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Element"
            },
            "valueExtension": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Extension"
            },
            "valueBackboneElement": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/BackboneElement"
            },
            "valueNarrative": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Narrative"
            },
            "valueAnnotation": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Annotation"
            },
            "valueAttachment": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Attachment"
            },
            "valueIdentifier": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Identifier"
            },
            "valueCodeableConcept": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueCoding": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Coding"
            },
            "valueQuantity": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Quantity"
            },
            "valueDuration": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Duration"
            },
            "valueSimpleQuantity": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "valueDistance": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Distance"
            },
            "valueCount": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Count"
            },
            "valueMoney": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Money"
            },
            "valueAge": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Age"
            },
            "valueRange": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Range"
            },
            "valuePeriod": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Period"
            },
            "valueRatio": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Ratio"
            },
            "valueReference": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Reference"
            },
            "valueSampledData": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/SampledData"
            },
            "valueSignature": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Signature"
            },
            "valueHumanName": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/HumanName"
            },
            "valueAddress": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Address"
            },
            "valueContactPoint": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/ContactPoint"
            },
            "valueTiming": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Timing"
            },
            "valueMeta": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/Meta"
            },
            "valueElementDefinition": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/ElementDefinition"
            },
            "valueModuleMetadata": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "valueDataRequirement": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/DataRequirement"
            },
            "valueActionDefinition": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/ActionDefinition"
            },
            "valueParameterDefinition": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "valueTriggerDefinition": {
              "description": "Value of extension - may be a resource or one of a constrained set of the data types (see Extensibility in the spec for list).",
              "$ref": "#/definitions/TriggerDefinition"
            }
          }
        }
      ]
    },
    "BackboneElement": {
      "allOf": [
        {
          "$ref": "#/definitions/Element"
        },
        {
          "description": "Base definition for all elements that are defined inside a resource - but not those in a data type.",
          "properties": {
            "modifierExtension": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element, and that modifies the understanding of the element that contains it. Usually modifier elements provide negation or qualification. In order to make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Extension"
              }
            }
          }
        }
      ]
    },
    "Narrative": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A human-readable formatted text, including images.",
          "properties": {
            "status": {
              "description": "The status of the narrative - whether it\u0027s entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "div": {
              "description": "The actual narrative content, a stripped down version of XHTML.",
              "$ref": "#/definitions/xhtml"
            }
          },
          "required": [
            "div"
          ]
        }
      ]
    },
    "Annotation": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A  text note which also  contains information about who made the statement and when.",
          "properties": {
            "authorReference": {
              "description": "The individual responsible for making the annotation.",
              "$ref": "#/definitions/Reference"
            },
            "authorString": {
              "description": "The individual responsible for making the annotation.",
              "type": "string"
            },
            "authorString_": {
              "description": "Extensions for authorString",
              "$ref": "#/definitions/Element"
            },
            "time": {
              "description": "Indicates when this particular annotation was made.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "time_": {
              "description": "Extensions for time",
              "$ref": "#/definitions/Element"
            },
            "text": {
              "description": "The text of the annotation.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Attachment": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "For referring to data content defined in other formats.",
          "properties": {
            "contentType": {
              "description": "Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contentType_": {
              "description": "Extensions for contentType",
              "$ref": "#/definitions/Element"
            },
            "language": {
              "description": "The human language of the content. The value can be any valid value according to BCP 47.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "language_": {
              "description": "Extensions for language",
              "$ref": "#/definitions/Element"
            },
            "data": {
              "description": "The actual data of the attachment - a sequence of bytes. In XML, represented using base64.",
              "type": "string"
            },
            "data_": {
              "description": "Extensions for data",
              "$ref": "#/definitions/Element"
            },
            "url": {
              "description": "An alternative location where the data can be accessed.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "size": {
              "description": "The number of bytes of data that make up this attachment.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "size_": {
              "description": "Extensions for size",
              "$ref": "#/definitions/Element"
            },
            "hash": {
              "description": "The calculated hash of the data using SHA-1. Represented using base64.",
              "type": "string"
            },
            "hash_": {
              "description": "Extensions for hash",
              "$ref": "#/definitions/Element"
            },
            "title": {
              "description": "A label or set of text to display in place of the data.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "creation": {
              "description": "The date that the attachment was first created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "creation_": {
              "description": "Extensions for creation",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Identifier": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A technical identifier - identifies some entity uniquely and unambiguously.",
          "properties": {
            "use": {
              "description": "The purpose of this identifier.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "use_": {
              "description": "Extensions for use",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "system": {
              "description": "Establishes the namespace in which set of possible id values is unique.",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The portion of the identifier typically relevant to the user and which is unique within the context of the system.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "Time period during which identifier is/was valid for use.",
              "$ref": "#/definitions/Period"
            },
            "assigner": {
              "description": "Organization that issued/manages the identifier.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "CodeableConcept": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
          "properties": {
            "coding": {
              "description": "A reference to a code defined by a terminology system.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "text": {
              "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Coding": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A reference to a code defined by a terminology system.",
          "properties": {
            "system": {
              "description": "The identification of the code system that defines the meaning of the symbol in the code.",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version of the code system which was used when choosing this code. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured. and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "display": {
              "description": "A representation of the meaning of the code in the system, following the rules of the system.",
              "type": "string"
            },
            "display_": {
              "description": "Extensions for display",
              "$ref": "#/definitions/Element"
            },
            "userSelected": {
              "description": "Indicates that this coding was chosen by a user directly - i.e. off a pick list of available items (codes or displays).",
              "type": "true | false"
            },
            "userSelected_": {
              "description": "Extensions for userSelected",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Quantity": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
          "properties": {
            "value": {
              "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            },
            "comparator": {
              "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"\u003c\" , then the real value is \u003c stated value.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "comparator_": {
              "description": "Extensions for comparator",
              "$ref": "#/definitions/Element"
            },
            "unit": {
              "description": "A human-readable form of the unit.",
              "type": "string"
            },
            "unit_": {
              "description": "Extensions for unit",
              "$ref": "#/definitions/Element"
            },
            "system": {
              "description": "The identification of the system that provides the coded form of the unit.",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "A computer processable form of the unit in some unit representation system.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Duration": {
      "allOf": [
        {
          "$ref": "#/definitions/Quantity"
        },
        {
          "description": "A length of time.",
          "properties": {}
        }
      ]
    },
    "Distance": {
      "allOf": [
        {
          "$ref": "#/definitions/Quantity"
        },
        {
          "description": "A length - a value with a unit that is a physical distance.",
          "properties": {}
        }
      ]
    },
    "Count": {
      "allOf": [
        {
          "$ref": "#/definitions/Quantity"
        },
        {
          "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
          "properties": {}
        }
      ]
    },
    "Money": {
      "allOf": [
        {
          "$ref": "#/definitions/Quantity"
        },
        {
          "description": "An amount of economic utility in some recognised currency.",
          "properties": {}
        }
      ]
    },
    "Age": {
      "allOf": [
        {
          "$ref": "#/definitions/Quantity"
        },
        {
          "description": "A duration of time during which an organism (or a process) has existed.",
          "properties": {}
        }
      ]
    },
    "Range": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A set of ordered Quantities defined by a low and high limit.",
          "properties": {
            "low": {
              "description": "The low limit. The boundary is inclusive.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "high": {
              "description": "The high limit. The boundary is inclusive.",
              "$ref": "#/definitions/SimpleQuantity"
            }
          }
        }
      ]
    },
    "Period": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A time period defined by a start and end date and optionally time.",
          "properties": {
            "start": {
              "description": "The start of the period. The boundary is inclusive.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "start_": {
              "description": "Extensions for start",
              "$ref": "#/definitions/Element"
            },
            "end": {
              "description": "The end of the period. If the end of the period is missing, it means that the period is ongoing. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "end_": {
              "description": "Extensions for end",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Ratio": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A relationship of two Quantity values - expressed as a numerator and a denominator.",
          "properties": {
            "numerator": {
              "description": "The value of the numerator.",
              "$ref": "#/definitions/Quantity"
            },
            "denominator": {
              "description": "The value of the denominator.",
              "$ref": "#/definitions/Quantity"
            }
          }
        }
      ]
    },
    "Reference": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A reference from one resource to another.",
          "properties": {
            "reference": {
              "description": "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with \u0027#\u0027) refer to contained resources.",
              "type": "string"
            },
            "reference_": {
              "description": "Extensions for reference",
              "$ref": "#/definitions/Element"
            },
            "display": {
              "description": "Plain text narrative that identifies the resource in addition to the resource reference.",
              "type": "string"
            },
            "display_": {
              "description": "Extensions for display",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "SampledData": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.",
          "properties": {
            "origin": {
              "description": "The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "period": {
              "description": "The length of time between sampling times, measured in milliseconds.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "period_": {
              "description": "Extensions for period",
              "$ref": "#/definitions/Element"
            },
            "factor": {
              "description": "A correction factor that is applied to the sampled data points before they are added to the origin.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "factor_": {
              "description": "Extensions for factor",
              "$ref": "#/definitions/Element"
            },
            "lowerLimit": {
              "description": "The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "lowerLimit_": {
              "description": "Extensions for lowerLimit",
              "$ref": "#/definitions/Element"
            },
            "upperLimit": {
              "description": "The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "upperLimit_": {
              "description": "Extensions for upperLimit",
              "$ref": "#/definitions/Element"
            },
            "dimensions": {
              "description": "The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "dimensions_": {
              "description": "Extensions for dimensions",
              "$ref": "#/definitions/Element"
            },
            "data": {
              "description": "A series of data points which are decimal values separated by a single space (character u20). The special values \"E\" (error), \"L\" (below detection limit) and \"U\" (above detection limit) can also be used in place of a decimal value.",
              "type": "string"
            },
            "data_": {
              "description": "Extensions for data",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "origin"
          ]
        }
      ]
    },
    "Signature": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A digital signature along with supporting context. The signature may be electronic/cryptographic in nature, or a graphical image representing a hand-written signature, or a signature process. Different Signature approaches have different utilities.",
          "properties": {
            "type": {
              "description": "An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "when": {
              "description": "When the digital signature was signed.",
              "type": "string"
            },
            "when_": {
              "description": "Extensions for when",
              "$ref": "#/definitions/Element"
            },
            "whoUri": {
              "description": "A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).",
              "type": "string"
            },
            "whoUri_": {
              "description": "Extensions for whoUri",
              "$ref": "#/definitions/Element"
            },
            "whoReference": {
              "description": "A reference to an application-usable description of the person that signed the certificate (e.g. the signature used their private key).",
              "$ref": "#/definitions/Reference"
            },
            "contentType": {
              "description": "A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jwt for JWT, and image/* for a graphical image of a signature, etc.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contentType_": {
              "description": "Extensions for contentType",
              "$ref": "#/definitions/Element"
            },
            "blob": {
              "description": "The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.",
              "type": "string"
            },
            "blob_": {
              "description": "Extensions for blob",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "HumanName": {
      "allOf": [
        {
          "$ref": "#/definitions/Structure"
        },
        {
          "description": "A human\u0027s name with the ability to identify parts and usage.",
          "properties": {
            "use": {
              "description": "Identifies the purpose for this name.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "use_": {
              "description": "Extensions for use",
              "$ref": "#/definitions/Element"
            },
            "text": {
              "description": "A full text representation of the name.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            },
            "family": {
              "description": "The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "family_": {
              "description": "Extensions for family",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "given": {
              "description": "Given name.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "given_": {
              "description": "Extensions for given",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "prefix": {
              "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "prefix_": {
              "description": "Extensions for prefix",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "suffix": {
              "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "suffix_": {
              "description": "Extensions for suffix",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "period": {
              "description": "Indicates the period of time when this name was valid for the named person.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "Address": {
      "allOf": [
        {
          "$ref": "#/definitions/Structure"
        },
        {
          "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations and which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
          "properties": {
            "use": {
              "description": "The purpose of this address.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "use_": {
              "description": "Extensions for use",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "text": {
              "description": "A full text representation of the address.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            },
            "line": {
              "description": "This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "line_": {
              "description": "Extensions for line",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "city": {
              "description": "The name of the city, town, village or other community or delivery center.",
              "type": "string"
            },
            "city_": {
              "description": "Extensions for city",
              "$ref": "#/definitions/Element"
            },
            "district": {
              "description": "The name of the administrative area (county).",
              "type": "string"
            },
            "district_": {
              "description": "Extensions for district",
              "$ref": "#/definitions/Element"
            },
            "state": {
              "description": "Sub-unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (i.e. US 2 letter state codes).",
              "type": "string"
            },
            "state_": {
              "description": "Extensions for state",
              "$ref": "#/definitions/Element"
            },
            "postalCode": {
              "description": "A postal code designating a region defined by the postal service.",
              "type": "string"
            },
            "postalCode_": {
              "description": "Extensions for postalCode",
              "$ref": "#/definitions/Element"
            },
            "country": {
              "description": "Country - a nation as commonly understood or generally accepted.",
              "type": "string"
            },
            "country_": {
              "description": "Extensions for country",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "Time period when address was/is in use.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "ContactPoint": {
      "allOf": [
        {
          "$ref": "#/definitions/Structure"
        },
        {
          "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
          "properties": {
            "system": {
              "description": "Telecommunications form for contact point - what communications system is required to make use of the contact.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            },
            "use": {
              "description": "Identifies the purpose for the contact point.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "use_": {
              "description": "Extensions for use",
              "$ref": "#/definitions/Element"
            },
            "rank": {
              "description": "Specifies a preferred order in which to use a set of contacts. Contacts are ranked with lower values coming before higher values.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "rank_": {
              "description": "Extensions for rank",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "Time period when the contact point was/is in use.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "Timing": {
      "allOf": [
        {
          "$ref": "#/definitions/Structure"
        },
        {
          "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.",
          "properties": {
            "event": {
              "description": "Identifies specific times when the event occurs.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
              }
            },
            "event_": {
              "description": "Extensions for event",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "repeat": {
              "description": "A set of rules that describe when the event should occur.",
              "$ref": "#/definitions/Timing.Repeat"
            },
            "code": {
              "description": "A code for the timing pattern. Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing.",
              "$ref": "#/definitions/CodeableConcept"
            }
          }
        }
      ]
    },
    "Timing.Repeat": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds.",
          "properties": {
            "boundsDuration": {
              "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
              "$ref": "#/definitions/Duration"
            },
            "boundsRange": {
              "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
              "$ref": "#/definitions/Range"
            },
            "boundsPeriod": {
              "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
              "$ref": "#/definitions/Period"
            },
            "count": {
              "description": "A total count of the desired number of repetitions.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "count_": {
              "description": "Extensions for count",
              "$ref": "#/definitions/Element"
            },
            "countMax": {
              "description": "A maximum value for the count of the desired repetitions (e.g. do something 6-8 times).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "countMax_": {
              "description": "Extensions for countMax",
              "$ref": "#/definitions/Element"
            },
            "duration": {
              "description": "How long this thing happens for when it happens.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "duration_": {
              "description": "Extensions for duration",
              "$ref": "#/definitions/Element"
            },
            "durationMax": {
              "description": "The upper limit of how long this thing happens for when it happens.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "durationMax_": {
              "description": "Extensions for durationMax",
              "$ref": "#/definitions/Element"
            },
            "durationUnit": {
              "description": "The units of time for the duration, in UCUM units.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "durationUnit_": {
              "description": "Extensions for durationUnit",
              "$ref": "#/definitions/Element"
            },
            "frequency": {
              "description": "The number of times to repeat the action within the specified period / period range (i.e. both period and periodMax provided).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "frequency_": {
              "description": "Extensions for frequency",
              "$ref": "#/definitions/Element"
            },
            "frequencyMax": {
              "description": "If present, indicates that the frequency is a range - so repeat between [frequency] and [frequencyMax] times within the period or period range.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "frequencyMax_": {
              "description": "Extensions for frequencyMax",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "period_": {
              "description": "Extensions for period",
              "$ref": "#/definitions/Element"
            },
            "periodMax": {
              "description": "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3-5 days.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "periodMax_": {
              "description": "Extensions for periodMax",
              "$ref": "#/definitions/Element"
            },
            "periodUnit": {
              "description": "The units of time for the period in UCUM units.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "periodUnit_": {
              "description": "Extensions for periodUnit",
              "$ref": "#/definitions/Element"
            },
            "when": {
              "description": "A real world event that the occurrence of the event should be tied to.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "when_": {
              "description": "Extensions for when",
              "$ref": "#/definitions/Element"
            },
            "offset": {
              "description": "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "offset_": {
              "description": "Extensions for offset",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Meta": {
      "allOf": [
        {
          "$ref": "#/definitions/Element"
        },
        {
          "description": "The metadata about a resource. This is content in the resource that is maintained by the infrastructure. Changes to the content may not always be associated with version changes to the resource.",
          "properties": {
            "versionId": {
              "description": "The version specific identifier, as it appears in the version portion of the URL. This values changes when the resource is created, updated, or deleted.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "versionId_": {
              "description": "Extensions for versionId",
              "$ref": "#/definitions/Element"
            },
            "lastUpdated": {
              "description": "When the resource last changed - e.g. when the version changed.",
              "type": "string"
            },
            "lastUpdated_": {
              "description": "Extensions for lastUpdated",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "A list of profiles [[[StructureDefinition]]]s that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "profile_": {
              "description": "Extensions for profile",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "security": {
              "description": "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "tag": {
              "description": "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            }
          }
        }
      ]
    },
    "ElementDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "path": {
              "description": "The path identifies the element and is expressed as a \".\"-separated list of ancestor elements, beginning with the name of the resource or extension.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            },
            "representation": {
              "description": "Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "representation_": {
              "description": "Extensions for representation",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "name": {
              "description": "The name of this element definition. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "label": {
              "description": "The text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.",
              "type": "string"
            },
            "label_": {
              "description": "Extensions for label",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "A code that provides the meaning for the element according to a particular terminology.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "slicing": {
              "description": "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).",
              "$ref": "#/definitions/ElementDefinition.Slicing"
            },
            "short": {
              "description": "A concise description of what this element means (e.g. for use in autogenerated summaries).",
              "type": "string"
            },
            "short_": {
              "description": "Extensions for short",
              "$ref": "#/definitions/Element"
            },
            "definition": {
              "description": "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource.",
              "type": "string"
            },
            "definition_": {
              "description": "Extensions for definition",
              "$ref": "#/definitions/Element"
            },
            "comments": {
              "description": "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc.",
              "type": "string"
            },
            "comments_": {
              "description": "Extensions for comments",
              "$ref": "#/definitions/Element"
            },
            "requirements": {
              "description": "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "alias": {
              "description": "Identifies additional names by which this element might also be known.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "alias_": {
              "description": "Extensions for alias",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "min": {
              "description": "The minimum number of times this element SHALL appear in the instance.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "min_": {
              "description": "Extensions for min",
              "$ref": "#/definitions/Element"
            },
            "max": {
              "description": "The maximum number of times this element is permitted to appear in the instance.",
              "type": "string"
            },
            "max_": {
              "description": "Extensions for max",
              "$ref": "#/definitions/Element"
            },
            "base": {
              "description": "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. This information is only provided where the element definition represents a constraint on another element definition, and must be present if there is a base element definition.",
              "$ref": "#/definitions/ElementDefinition.Base"
            },
            "contentReference": {
              "description": "Identifies the identity of an element defined elsewhere in the profile whose content rules should be applied to the current element.",
              "type": "string"
            },
            "contentReference_": {
              "description": "Extensions for contentReference",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The data type or resource that the value of this element is permitted to be.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition.Type"
              }
            },
            "defaultValueBoolean": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "true | false"
            },
            "defaultValueBoolean_": {
              "description": "Extensions for defaultValueBoolean",
              "$ref": "#/definitions/Element"
            },
            "defaultValueInteger": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "defaultValueInteger_": {
              "description": "Extensions for defaultValueInteger",
              "$ref": "#/definitions/Element"
            },
            "defaultValueDecimal": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "defaultValueDecimal_": {
              "description": "Extensions for defaultValueDecimal",
              "$ref": "#/definitions/Element"
            },
            "defaultValueBase64Binary": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "defaultValueBase64Binary_": {
              "description": "Extensions for defaultValueBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "defaultValueInstant": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "defaultValueInstant_": {
              "description": "Extensions for defaultValueInstant",
              "$ref": "#/definitions/Element"
            },
            "defaultValueString": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "defaultValueString_": {
              "description": "Extensions for defaultValueString",
              "$ref": "#/definitions/Element"
            },
            "defaultValueUri": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "defaultValueUri_": {
              "description": "Extensions for defaultValueUri",
              "$ref": "#/definitions/Element"
            },
            "defaultValueDate": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "defaultValueDate_": {
              "description": "Extensions for defaultValueDate",
              "$ref": "#/definitions/Element"
            },
            "defaultValueDateTime": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "defaultValueDateTime_": {
              "description": "Extensions for defaultValueDateTime",
              "$ref": "#/definitions/Element"
            },
            "defaultValueTime": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "defaultValueTime_": {
              "description": "Extensions for defaultValueTime",
              "$ref": "#/definitions/Element"
            },
            "defaultValueCode": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "defaultValueCode_": {
              "description": "Extensions for defaultValueCode",
              "$ref": "#/definitions/Element"
            },
            "defaultValueOid": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "defaultValueOid_": {
              "description": "Extensions for defaultValueOid",
              "$ref": "#/definitions/Element"
            },
            "defaultValueUuid": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "defaultValueUuid_": {
              "description": "Extensions for defaultValueUuid",
              "$ref": "#/definitions/Element"
            },
            "defaultValueId": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "defaultValueId_": {
              "description": "Extensions for defaultValueId",
              "$ref": "#/definitions/Element"
            },
            "defaultValueUnsignedInt": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "defaultValueUnsignedInt_": {
              "description": "Extensions for defaultValueUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "defaultValuePositiveInt": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "defaultValuePositiveInt_": {
              "description": "Extensions for defaultValuePositiveInt",
              "$ref": "#/definitions/Element"
            },
            "defaultValueMarkdown": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "type": "string"
            },
            "defaultValueMarkdown_": {
              "description": "Extensions for defaultValueMarkdown",
              "$ref": "#/definitions/Element"
            },
            "defaultValueElement": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Element"
            },
            "defaultValueExtension": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Extension"
            },
            "defaultValueBackboneElement": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/BackboneElement"
            },
            "defaultValueNarrative": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Narrative"
            },
            "defaultValueAnnotation": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Annotation"
            },
            "defaultValueAttachment": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Attachment"
            },
            "defaultValueIdentifier": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Identifier"
            },
            "defaultValueCodeableConcept": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "defaultValueCoding": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Coding"
            },
            "defaultValueQuantity": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Quantity"
            },
            "defaultValueDuration": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Duration"
            },
            "defaultValueSimpleQuantity": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "defaultValueDistance": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Distance"
            },
            "defaultValueCount": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Count"
            },
            "defaultValueMoney": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Money"
            },
            "defaultValueAge": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Age"
            },
            "defaultValueRange": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Range"
            },
            "defaultValuePeriod": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Period"
            },
            "defaultValueRatio": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Ratio"
            },
            "defaultValueReference": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Reference"
            },
            "defaultValueSampledData": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/SampledData"
            },
            "defaultValueSignature": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Signature"
            },
            "defaultValueHumanName": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/HumanName"
            },
            "defaultValueAddress": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Address"
            },
            "defaultValueContactPoint": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/ContactPoint"
            },
            "defaultValueTiming": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Timing"
            },
            "defaultValueMeta": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/Meta"
            },
            "defaultValueElementDefinition": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/ElementDefinition"
            },
            "defaultValueModuleMetadata": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "defaultValueDataRequirement": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/DataRequirement"
            },
            "defaultValueActionDefinition": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/ActionDefinition"
            },
            "defaultValueParameterDefinition": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "defaultValueTriggerDefinition": {
              "description": "The value that should be used if there is no value stated in the instance (e.g. \u0027if not otherwise specified, the abstract is false\u0027).",
              "$ref": "#/definitions/TriggerDefinition"
            },
            "meaningWhenMissing": {
              "description": "The Implicit meaning that is to be understood when this element is missing (e.g. \u0027when this element is missing, the period is ongoing\u0027.",
              "type": "string"
            },
            "meaningWhenMissing_": {
              "description": "Extensions for meaningWhenMissing",
              "$ref": "#/definitions/Element"
            },
            "fixedBoolean": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "true | false"
            },
            "fixedBoolean_": {
              "description": "Extensions for fixedBoolean",
              "$ref": "#/definitions/Element"
            },
            "fixedInteger": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "fixedInteger_": {
              "description": "Extensions for fixedInteger",
              "$ref": "#/definitions/Element"
            },
            "fixedDecimal": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "fixedDecimal_": {
              "description": "Extensions for fixedDecimal",
              "$ref": "#/definitions/Element"
            },
            "fixedBase64Binary": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "fixedBase64Binary_": {
              "description": "Extensions for fixedBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "fixedInstant": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "fixedInstant_": {
              "description": "Extensions for fixedInstant",
              "$ref": "#/definitions/Element"
            },
            "fixedString": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "fixedString_": {
              "description": "Extensions for fixedString",
              "$ref": "#/definitions/Element"
            },
            "fixedUri": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "fixedUri_": {
              "description": "Extensions for fixedUri",
              "$ref": "#/definitions/Element"
            },
            "fixedDate": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "fixedDate_": {
              "description": "Extensions for fixedDate",
              "$ref": "#/definitions/Element"
            },
            "fixedDateTime": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "fixedDateTime_": {
              "description": "Extensions for fixedDateTime",
              "$ref": "#/definitions/Element"
            },
            "fixedTime": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "fixedTime_": {
              "description": "Extensions for fixedTime",
              "$ref": "#/definitions/Element"
            },
            "fixedCode": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "fixedCode_": {
              "description": "Extensions for fixedCode",
              "$ref": "#/definitions/Element"
            },
            "fixedOid": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "fixedOid_": {
              "description": "Extensions for fixedOid",
              "$ref": "#/definitions/Element"
            },
            "fixedUuid": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "fixedUuid_": {
              "description": "Extensions for fixedUuid",
              "$ref": "#/definitions/Element"
            },
            "fixedId": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "fixedId_": {
              "description": "Extensions for fixedId",
              "$ref": "#/definitions/Element"
            },
            "fixedUnsignedInt": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "fixedUnsignedInt_": {
              "description": "Extensions for fixedUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "fixedPositiveInt": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "fixedPositiveInt_": {
              "description": "Extensions for fixedPositiveInt",
              "$ref": "#/definitions/Element"
            },
            "fixedMarkdown": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "type": "string"
            },
            "fixedMarkdown_": {
              "description": "Extensions for fixedMarkdown",
              "$ref": "#/definitions/Element"
            },
            "fixedElement": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Element"
            },
            "fixedExtension": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Extension"
            },
            "fixedBackboneElement": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/BackboneElement"
            },
            "fixedNarrative": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Narrative"
            },
            "fixedAnnotation": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Annotation"
            },
            "fixedAttachment": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Attachment"
            },
            "fixedIdentifier": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Identifier"
            },
            "fixedCodeableConcept": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "fixedCoding": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Coding"
            },
            "fixedQuantity": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Quantity"
            },
            "fixedDuration": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Duration"
            },
            "fixedSimpleQuantity": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "fixedDistance": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Distance"
            },
            "fixedCount": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Count"
            },
            "fixedMoney": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Money"
            },
            "fixedAge": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Age"
            },
            "fixedRange": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Range"
            },
            "fixedPeriod": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Period"
            },
            "fixedRatio": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Ratio"
            },
            "fixedReference": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Reference"
            },
            "fixedSampledData": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/SampledData"
            },
            "fixedSignature": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Signature"
            },
            "fixedHumanName": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/HumanName"
            },
            "fixedAddress": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Address"
            },
            "fixedContactPoint": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/ContactPoint"
            },
            "fixedTiming": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Timing"
            },
            "fixedMeta": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/Meta"
            },
            "fixedElementDefinition": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/ElementDefinition"
            },
            "fixedModuleMetadata": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "fixedDataRequirement": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/DataRequirement"
            },
            "fixedActionDefinition": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/ActionDefinition"
            },
            "fixedParameterDefinition": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "fixedTriggerDefinition": {
              "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
              "$ref": "#/definitions/TriggerDefinition"
            },
            "patternBoolean": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "true | false"
            },
            "patternBoolean_": {
              "description": "Extensions for patternBoolean",
              "$ref": "#/definitions/Element"
            },
            "patternInteger": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "patternInteger_": {
              "description": "Extensions for patternInteger",
              "$ref": "#/definitions/Element"
            },
            "patternDecimal": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "patternDecimal_": {
              "description": "Extensions for patternDecimal",
              "$ref": "#/definitions/Element"
            },
            "patternBase64Binary": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "patternBase64Binary_": {
              "description": "Extensions for patternBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "patternInstant": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "patternInstant_": {
              "description": "Extensions for patternInstant",
              "$ref": "#/definitions/Element"
            },
            "patternString": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "patternString_": {
              "description": "Extensions for patternString",
              "$ref": "#/definitions/Element"
            },
            "patternUri": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "patternUri_": {
              "description": "Extensions for patternUri",
              "$ref": "#/definitions/Element"
            },
            "patternDate": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "patternDate_": {
              "description": "Extensions for patternDate",
              "$ref": "#/definitions/Element"
            },
            "patternDateTime": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "patternDateTime_": {
              "description": "Extensions for patternDateTime",
              "$ref": "#/definitions/Element"
            },
            "patternTime": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "patternTime_": {
              "description": "Extensions for patternTime",
              "$ref": "#/definitions/Element"
            },
            "patternCode": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "patternCode_": {
              "description": "Extensions for patternCode",
              "$ref": "#/definitions/Element"
            },
            "patternOid": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "patternOid_": {
              "description": "Extensions for patternOid",
              "$ref": "#/definitions/Element"
            },
            "patternUuid": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "patternUuid_": {
              "description": "Extensions for patternUuid",
              "$ref": "#/definitions/Element"
            },
            "patternId": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "patternId_": {
              "description": "Extensions for patternId",
              "$ref": "#/definitions/Element"
            },
            "patternUnsignedInt": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "patternUnsignedInt_": {
              "description": "Extensions for patternUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "patternPositiveInt": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "patternPositiveInt_": {
              "description": "Extensions for patternPositiveInt",
              "$ref": "#/definitions/Element"
            },
            "patternMarkdown": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "type": "string"
            },
            "patternMarkdown_": {
              "description": "Extensions for patternMarkdown",
              "$ref": "#/definitions/Element"
            },
            "patternElement": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Element"
            },
            "patternExtension": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Extension"
            },
            "patternBackboneElement": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/BackboneElement"
            },
            "patternNarrative": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Narrative"
            },
            "patternAnnotation": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Annotation"
            },
            "patternAttachment": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Attachment"
            },
            "patternIdentifier": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Identifier"
            },
            "patternCodeableConcept": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "patternCoding": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Coding"
            },
            "patternQuantity": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Quantity"
            },
            "patternDuration": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Duration"
            },
            "patternSimpleQuantity": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "patternDistance": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Distance"
            },
            "patternCount": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Count"
            },
            "patternMoney": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Money"
            },
            "patternAge": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Age"
            },
            "patternRange": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Range"
            },
            "patternPeriod": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Period"
            },
            "patternRatio": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Ratio"
            },
            "patternReference": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Reference"
            },
            "patternSampledData": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/SampledData"
            },
            "patternSignature": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Signature"
            },
            "patternHumanName": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/HumanName"
            },
            "patternAddress": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Address"
            },
            "patternContactPoint": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/ContactPoint"
            },
            "patternTiming": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Timing"
            },
            "patternMeta": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/Meta"
            },
            "patternElementDefinition": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/ElementDefinition"
            },
            "patternModuleMetadata": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "patternDataRequirement": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/DataRequirement"
            },
            "patternActionDefinition": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/ActionDefinition"
            },
            "patternParameterDefinition": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "patternTriggerDefinition": {
              "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  The values of elements present in the pattern must match exactly (case-sensitive, accent-sensitive, etc.).",
              "$ref": "#/definitions/TriggerDefinition"
            },
            "exampleBoolean": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "type": "true | false"
            },
            "exampleBoolean_": {
              "description": "Extensions for exampleBoolean",
              "$ref": "#/definitions/Element"
            },
            "exampleInteger": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "exampleInteger_": {
              "description": "Extensions for exampleInteger",
              "$ref": "#/definitions/Element"
            },
            "exampleDecimal": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "exampleDecimal_": {
              "description": "Extensions for exampleDecimal",
              "$ref": "#/definitions/Element"
            },
            "exampleBase64Binary": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "type": "string"
            },
            "exampleBase64Binary_": {
              "description": "Extensions for exampleBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "exampleInstant": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "type": "string"
            },
            "exampleInstant_": {
              "description": "Extensions for exampleInstant",
              "$ref": "#/definitions/Element"
            },
            "exampleString": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "type": "string"
            },
            "exampleString_": {
              "description": "Extensions for exampleString",
              "$ref": "#/definitions/Element"
            },
            "exampleUri": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "type": "string"
            },
            "exampleUri_": {
              "description": "Extensions for exampleUri",
              "$ref": "#/definitions/Element"
            },
            "exampleDate": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "exampleDate_": {
              "description": "Extensions for exampleDate",
              "$ref": "#/definitions/Element"
            },
            "exampleDateTime": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "exampleDateTime_": {
              "description": "Extensions for exampleDateTime",
              "$ref": "#/definitions/Element"
            },
            "exampleTime": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "exampleTime_": {
              "description": "Extensions for exampleTime",
              "$ref": "#/definitions/Element"
            },
            "exampleCode": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "exampleCode_": {
              "description": "Extensions for exampleCode",
              "$ref": "#/definitions/Element"
            },
            "exampleOid": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "exampleOid_": {
              "description": "Extensions for exampleOid",
              "$ref": "#/definitions/Element"
            },
            "exampleUuid": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "exampleUuid_": {
              "description": "Extensions for exampleUuid",
              "$ref": "#/definitions/Element"
            },
            "exampleId": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "exampleId_": {
              "description": "Extensions for exampleId",
              "$ref": "#/definitions/Element"
            },
            "exampleUnsignedInt": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "exampleUnsignedInt_": {
              "description": "Extensions for exampleUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "examplePositiveInt": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "examplePositiveInt_": {
              "description": "Extensions for examplePositiveInt",
              "$ref": "#/definitions/Element"
            },
            "exampleMarkdown": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "type": "string"
            },
            "exampleMarkdown_": {
              "description": "Extensions for exampleMarkdown",
              "$ref": "#/definitions/Element"
            },
            "exampleElement": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Element"
            },
            "exampleExtension": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Extension"
            },
            "exampleBackboneElement": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/BackboneElement"
            },
            "exampleNarrative": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Narrative"
            },
            "exampleAnnotation": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Annotation"
            },
            "exampleAttachment": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Attachment"
            },
            "exampleIdentifier": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Identifier"
            },
            "exampleCodeableConcept": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "exampleCoding": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Coding"
            },
            "exampleQuantity": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Quantity"
            },
            "exampleDuration": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Duration"
            },
            "exampleSimpleQuantity": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "exampleDistance": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Distance"
            },
            "exampleCount": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Count"
            },
            "exampleMoney": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Money"
            },
            "exampleAge": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Age"
            },
            "exampleRange": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Range"
            },
            "examplePeriod": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Period"
            },
            "exampleRatio": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Ratio"
            },
            "exampleReference": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Reference"
            },
            "exampleSampledData": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/SampledData"
            },
            "exampleSignature": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Signature"
            },
            "exampleHumanName": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/HumanName"
            },
            "exampleAddress": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Address"
            },
            "exampleContactPoint": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/ContactPoint"
            },
            "exampleTiming": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Timing"
            },
            "exampleMeta": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/Meta"
            },
            "exampleElementDefinition": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/ElementDefinition"
            },
            "exampleModuleMetadata": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "exampleDataRequirement": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/DataRequirement"
            },
            "exampleActionDefinition": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/ActionDefinition"
            },
            "exampleParameterDefinition": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "exampleTriggerDefinition": {
              "description": "A sample value for this element demonstrating the type of information that would typically be captured.",
              "$ref": "#/definitions/TriggerDefinition"
            },
            "minValueBoolean": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "true | false"
            },
            "minValueBoolean_": {
              "description": "Extensions for minValueBoolean",
              "$ref": "#/definitions/Element"
            },
            "minValueInteger": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "minValueInteger_": {
              "description": "Extensions for minValueInteger",
              "$ref": "#/definitions/Element"
            },
            "minValueDecimal": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "minValueDecimal_": {
              "description": "Extensions for minValueDecimal",
              "$ref": "#/definitions/Element"
            },
            "minValueBase64Binary": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "minValueBase64Binary_": {
              "description": "Extensions for minValueBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "minValueInstant": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "minValueInstant_": {
              "description": "Extensions for minValueInstant",
              "$ref": "#/definitions/Element"
            },
            "minValueString": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "minValueString_": {
              "description": "Extensions for minValueString",
              "$ref": "#/definitions/Element"
            },
            "minValueUri": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "minValueUri_": {
              "description": "Extensions for minValueUri",
              "$ref": "#/definitions/Element"
            },
            "minValueDate": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "minValueDate_": {
              "description": "Extensions for minValueDate",
              "$ref": "#/definitions/Element"
            },
            "minValueDateTime": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "minValueDateTime_": {
              "description": "Extensions for minValueDateTime",
              "$ref": "#/definitions/Element"
            },
            "minValueTime": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "minValueTime_": {
              "description": "Extensions for minValueTime",
              "$ref": "#/definitions/Element"
            },
            "minValueCode": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "minValueCode_": {
              "description": "Extensions for minValueCode",
              "$ref": "#/definitions/Element"
            },
            "minValueOid": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "minValueOid_": {
              "description": "Extensions for minValueOid",
              "$ref": "#/definitions/Element"
            },
            "minValueUuid": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "minValueUuid_": {
              "description": "Extensions for minValueUuid",
              "$ref": "#/definitions/Element"
            },
            "minValueId": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "minValueId_": {
              "description": "Extensions for minValueId",
              "$ref": "#/definitions/Element"
            },
            "minValueUnsignedInt": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "minValueUnsignedInt_": {
              "description": "Extensions for minValueUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "minValuePositiveInt": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "minValuePositiveInt_": {
              "description": "Extensions for minValuePositiveInt",
              "$ref": "#/definitions/Element"
            },
            "minValueMarkdown": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "minValueMarkdown_": {
              "description": "Extensions for minValueMarkdown",
              "$ref": "#/definitions/Element"
            },
            "minValueElement": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Element"
            },
            "minValueExtension": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Extension"
            },
            "minValueBackboneElement": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/BackboneElement"
            },
            "minValueNarrative": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Narrative"
            },
            "minValueAnnotation": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Annotation"
            },
            "minValueAttachment": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Attachment"
            },
            "minValueIdentifier": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Identifier"
            },
            "minValueCodeableConcept": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "minValueCoding": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Coding"
            },
            "minValueQuantity": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Quantity"
            },
            "minValueDuration": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Duration"
            },
            "minValueSimpleQuantity": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "minValueDistance": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Distance"
            },
            "minValueCount": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Count"
            },
            "minValueMoney": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Money"
            },
            "minValueAge": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Age"
            },
            "minValueRange": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Range"
            },
            "minValuePeriod": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Period"
            },
            "minValueRatio": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Ratio"
            },
            "minValueReference": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Reference"
            },
            "minValueSampledData": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/SampledData"
            },
            "minValueSignature": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Signature"
            },
            "minValueHumanName": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/HumanName"
            },
            "minValueAddress": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Address"
            },
            "minValueContactPoint": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ContactPoint"
            },
            "minValueTiming": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Timing"
            },
            "minValueMeta": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Meta"
            },
            "minValueElementDefinition": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ElementDefinition"
            },
            "minValueModuleMetadata": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "minValueDataRequirement": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/DataRequirement"
            },
            "minValueActionDefinition": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ActionDefinition"
            },
            "minValueParameterDefinition": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "minValueTriggerDefinition": {
              "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/TriggerDefinition"
            },
            "maxValueBoolean": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "true | false"
            },
            "maxValueBoolean_": {
              "description": "Extensions for maxValueBoolean",
              "$ref": "#/definitions/Element"
            },
            "maxValueInteger": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "maxValueInteger_": {
              "description": "Extensions for maxValueInteger",
              "$ref": "#/definitions/Element"
            },
            "maxValueDecimal": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "maxValueDecimal_": {
              "description": "Extensions for maxValueDecimal",
              "$ref": "#/definitions/Element"
            },
            "maxValueBase64Binary": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "maxValueBase64Binary_": {
              "description": "Extensions for maxValueBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "maxValueInstant": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "maxValueInstant_": {
              "description": "Extensions for maxValueInstant",
              "$ref": "#/definitions/Element"
            },
            "maxValueString": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "maxValueString_": {
              "description": "Extensions for maxValueString",
              "$ref": "#/definitions/Element"
            },
            "maxValueUri": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "maxValueUri_": {
              "description": "Extensions for maxValueUri",
              "$ref": "#/definitions/Element"
            },
            "maxValueDate": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "maxValueDate_": {
              "description": "Extensions for maxValueDate",
              "$ref": "#/definitions/Element"
            },
            "maxValueDateTime": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "maxValueDateTime_": {
              "description": "Extensions for maxValueDateTime",
              "$ref": "#/definitions/Element"
            },
            "maxValueTime": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "maxValueTime_": {
              "description": "Extensions for maxValueTime",
              "$ref": "#/definitions/Element"
            },
            "maxValueCode": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "maxValueCode_": {
              "description": "Extensions for maxValueCode",
              "$ref": "#/definitions/Element"
            },
            "maxValueOid": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "maxValueOid_": {
              "description": "Extensions for maxValueOid",
              "$ref": "#/definitions/Element"
            },
            "maxValueUuid": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "maxValueUuid_": {
              "description": "Extensions for maxValueUuid",
              "$ref": "#/definitions/Element"
            },
            "maxValueId": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "maxValueId_": {
              "description": "Extensions for maxValueId",
              "$ref": "#/definitions/Element"
            },
            "maxValueUnsignedInt": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "maxValueUnsignedInt_": {
              "description": "Extensions for maxValueUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "maxValuePositiveInt": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "maxValuePositiveInt_": {
              "description": "Extensions for maxValuePositiveInt",
              "$ref": "#/definitions/Element"
            },
            "maxValueMarkdown": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "type": "string"
            },
            "maxValueMarkdown_": {
              "description": "Extensions for maxValueMarkdown",
              "$ref": "#/definitions/Element"
            },
            "maxValueElement": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Element"
            },
            "maxValueExtension": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Extension"
            },
            "maxValueBackboneElement": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/BackboneElement"
            },
            "maxValueNarrative": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Narrative"
            },
            "maxValueAnnotation": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Annotation"
            },
            "maxValueAttachment": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Attachment"
            },
            "maxValueIdentifier": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Identifier"
            },
            "maxValueCodeableConcept": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "maxValueCoding": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Coding"
            },
            "maxValueQuantity": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Quantity"
            },
            "maxValueDuration": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Duration"
            },
            "maxValueSimpleQuantity": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "maxValueDistance": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Distance"
            },
            "maxValueCount": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Count"
            },
            "maxValueMoney": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Money"
            },
            "maxValueAge": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Age"
            },
            "maxValueRange": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Range"
            },
            "maxValuePeriod": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Period"
            },
            "maxValueRatio": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Ratio"
            },
            "maxValueReference": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Reference"
            },
            "maxValueSampledData": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/SampledData"
            },
            "maxValueSignature": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Signature"
            },
            "maxValueHumanName": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/HumanName"
            },
            "maxValueAddress": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Address"
            },
            "maxValueContactPoint": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ContactPoint"
            },
            "maxValueTiming": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Timing"
            },
            "maxValueMeta": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/Meta"
            },
            "maxValueElementDefinition": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ElementDefinition"
            },
            "maxValueModuleMetadata": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "maxValueDataRequirement": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/DataRequirement"
            },
            "maxValueActionDefinition": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ActionDefinition"
            },
            "maxValueParameterDefinition": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "maxValueTriggerDefinition": {
              "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
              "$ref": "#/definitions/TriggerDefinition"
            },
            "maxLength": {
              "description": "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "maxLength_": {
              "description": "Extensions for maxLength",
              "$ref": "#/definitions/Element"
            },
            "condition": {
              "description": "A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
              }
            },
            "condition_": {
              "description": "Extensions for condition",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "constraint": {
              "description": "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition.Constraint"
              }
            },
            "mustSupport": {
              "description": "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported.",
              "type": "true | false"
            },
            "mustSupport_": {
              "description": "Extensions for mustSupport",
              "$ref": "#/definitions/Element"
            },
            "isModifier": {
              "description": "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.",
              "type": "true | false"
            },
            "isModifier_": {
              "description": "Extensions for isModifier",
              "$ref": "#/definitions/Element"
            },
            "isSummary": {
              "description": "Whether the element should be included if a client requests a search with the parameter _summary\u003dtrue.",
              "type": "true | false"
            },
            "isSummary_": {
              "description": "Extensions for isSummary",
              "$ref": "#/definitions/Element"
            },
            "binding": {
              "description": "Binds to a value set if this element is coded (code, Coding, CodeableConcept).",
              "$ref": "#/definitions/ElementDefinition.Binding"
            },
            "mapping": {
              "description": "Identifies a concept from an external specification that roughly corresponds to this element.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition.Mapping"
              }
            }
          }
        }
      ]
    },
    "ElementDefinition.Slicing": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "discriminator": {
              "description": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "discriminator_": {
              "description": "Extensions for discriminator",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "description": {
              "description": "A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "ordered": {
              "description": "If the matching elements have to occur in the same order as defined in the profile.",
              "type": "true | false"
            },
            "ordered_": {
              "description": "Extensions for ordered",
              "$ref": "#/definitions/Element"
            },
            "rules": {
              "description": "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "rules_": {
              "description": "Extensions for rules",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ElementDefinition.Base": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "path": {
              "description": "The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [[[StructureDefinition]]] without a StructureDefinition.base.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            },
            "min": {
              "description": "Minimum cardinality of the base element identified by the path.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "min_": {
              "description": "Extensions for min",
              "$ref": "#/definitions/Element"
            },
            "max": {
              "description": "Maximum cardinality of the base element identified by the path.",
              "type": "string"
            },
            "max_": {
              "description": "Extensions for max",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ElementDefinition.Type": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "code": {
              "description": "Name of Data type or Resource that is a(or the) type used for this element.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "Identifies a profile structure or implementation Guide that SHALL hold for resources or datatypes referenced as the type of this element. Can be a local reference - to another structure in this profile, or a reference to a structure in another profile. When more than one profile is specified, the content must conform to all of them. When an implementation guide is specified, the resource SHALL conform to at least one profile defined in the implementation guide.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "profile_": {
              "description": "Extensions for profile",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "aggregation": {
              "description": "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "aggregation_": {
              "description": "Extensions for aggregation",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "versioning": {
              "description": "Whether this reference needs to be version specific or version independent, or whetehr either can be used.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "versioning_": {
              "description": "Extensions for versioning",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ElementDefinition.Constraint": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "key": {
              "description": "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "key_": {
              "description": "Extensions for key",
              "$ref": "#/definitions/Element"
            },
            "requirements": {
              "description": "Description of why this constraint is necessary or appropriate.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "severity": {
              "description": "Identifies the impact constraint violation has on the conformance of the instance.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "severity_": {
              "description": "Extensions for severity",
              "$ref": "#/definitions/Element"
            },
            "human": {
              "description": "Text that can be used to describe the constraint in messages identifying that the constraint has been violated.",
              "type": "string"
            },
            "human_": {
              "description": "Extensions for human",
              "$ref": "#/definitions/Element"
            },
            "expression": {
              "description": "A [FluentPath](fluentpath.html) expression of constraint that can be executed to see if this constraint is met.",
              "type": "string"
            },
            "expression_": {
              "description": "Extensions for expression",
              "$ref": "#/definitions/Element"
            },
            "xpath": {
              "description": "An XPath expression of constraint that can be executed to see if this constraint is met.",
              "type": "string"
            },
            "xpath_": {
              "description": "Extensions for xpath",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ElementDefinition.Binding": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "strength": {
              "description": "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "strength_": {
              "description": "Extensions for strength",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Describes the intended use of this particular set of codes.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "valueSetUri": {
              "description": "Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.",
              "type": "string"
            },
            "valueSetUri_": {
              "description": "Extensions for valueSetUri",
              "$ref": "#/definitions/Element"
            },
            "valueSetReference": {
              "description": "Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ElementDefinition.Mapping": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Captures constraints on each element within the resource, profile, or extension.",
          "properties": {
            "identity": {
              "description": "An internal reference to the definition of a mapping.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "identity_": {
              "description": "Extensions for identity",
              "$ref": "#/definitions/Element"
            },
            "language": {
              "description": "Identifies the computable language in which mapping.map is expressed.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "language_": {
              "description": "Extensions for language",
              "$ref": "#/definitions/Element"
            },
            "map": {
              "description": "Expresses what part of the target specification corresponds to this element.",
              "type": "string"
            },
            "map_": {
              "description": "Extensions for map",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ModuleMetadata": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "The ModuleMetadata structure defines the common metadata elements used by quality improvement artifacts. This information includes descriptive and topical metadata to enable repository searches, as well as governance and evidentiary support information.",
          "properties": {
            "url": {
              "description": "An absolute URL that is used to identify this module when it is referenced. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this module definition is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "A logical identifier for the module such as the CMS or NQF identifiers for a measure artifact.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "version": {
              "description": "The version of the module, if any. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge modules, refer to the Decision Support Service specification. Note that the version is required for non-experimental published artifact.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A machine-friendly name for the module. This name should be usable as an identifier for the module by machine processing applications such as code generation.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "title": {
              "description": "A short, descriptive, user-friendly title for the module.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Identifies the type of knowledge module, such as a rule, library, documentation template, or measure.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the module.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "Determines whether the module was developed for testing purposes (or education/evaluation/marketing), and is not intended to be used in production environments.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the module from the consumer\u0027s perspective.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "purpose": {
              "description": "A brief description of the purpose of the module.",
              "type": "string"
            },
            "purpose_": {
              "description": "Extensions for purpose",
              "$ref": "#/definitions/Element"
            },
            "usage": {
              "description": "A detailed description of how the module is used from a clinical perspective.",
              "type": "string"
            },
            "usage_": {
              "description": "Extensions for usage",
              "$ref": "#/definitions/Element"
            },
            "publicationDate": {
              "description": "The date on which the module was published.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "publicationDate_": {
              "description": "Extensions for publicationDate",
              "$ref": "#/definitions/Element"
            },
            "lastReviewDate": {
              "description": "The date on which the module content was last reviewed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "lastReviewDate_": {
              "description": "Extensions for lastReviewDate",
              "$ref": "#/definitions/Element"
            },
            "effectivePeriod": {
              "description": "The period during which the module content is effective.",
              "$ref": "#/definitions/Period"
            },
            "coverage": {
              "description": "Specifies various attributes of the patient population for whom and/or environment of care in which, the knowledge module is applicable.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleMetadata.Coverage"
              }
            },
            "topic": {
              "description": "Clinical topics related to the content of the module.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "contributor": {
              "description": "A contributor to the content of the module, including authors, editors, reviewers, and endorsers.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleMetadata.Contributor"
              }
            },
            "publisher": {
              "description": "The name of the individual or organization that published the module (also known as the steward for the module). This information is required for non-experimental published artifacts.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleMetadata.Contact1"
              }
            },
            "copyright": {
              "description": "A copyright statement relating to the module and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the module.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "relatedResource": {
              "description": "Related resources such as additional documentation, justification, or bibliographic references.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleMetadata.RelatedResource"
              }
            }
          }
        }
      ]
    },
    "ModuleMetadata.Coverage": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleMetadata structure defines the common metadata elements used by quality improvement artifacts. This information includes descriptive and topical metadata to enable repository searches, as well as governance and evidentiary support information.",
          "properties": {
            "focus": {
              "description": "Specifies the focus of the coverage attribute.",
              "$ref": "#/definitions/Coding"
            },
            "value": {
              "description": "Provides a value for the coverage attribute. Different values are appropriate in different focus areas, as specified in the description of values for focus.",
              "$ref": "#/definitions/CodeableConcept"
            }
          },
          "required": [
            "focus",
            "value"
          ]
        }
      ]
    },
    "ModuleMetadata.Contributor": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleMetadata structure defines the common metadata elements used by quality improvement artifacts. This information includes descriptive and topical metadata to enable repository searches, as well as governance and evidentiary support information.",
          "properties": {
            "type": {
              "description": "The type of contributor.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "The name of the individual or organization responsible for the contribution.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the contributor.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleMetadata.Contact"
              }
            }
          }
        }
      ]
    },
    "ModuleMetadata.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleMetadata structure defines the common metadata elements used by quality improvement artifacts. This information includes descriptive and topical metadata to enable repository searches, as well as governance and evidentiary support information.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the contribution.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for the individual (if a name was provided) or the contributor.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "ModuleMetadata.Contact1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleMetadata structure defines the common metadata elements used by quality improvement artifacts. This information includes descriptive and topical metadata to enable repository searches, as well as governance and evidentiary support information.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the module.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for the individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "ModuleMetadata.RelatedResource": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleMetadata structure defines the common metadata elements used by quality improvement artifacts. This information includes descriptive and topical metadata to enable repository searches, as well as governance and evidentiary support information.",
          "properties": {
            "type": {
              "description": "The type of related resource.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "document": {
              "description": "The document being referenced, represented as an attachment. This is exclusive with the resource element.",
              "$ref": "#/definitions/Attachment"
            },
            "resource": {
              "description": "The related resource, such as a library, value set, profile, or other module.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "DataRequirement": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "Describes a required data item for evaluation in terms of the type of data, and optional code- or date-based filters of the data.",
          "properties": {
            "type": {
              "description": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "The profile of the required data, specified as the uri of the profile definition.",
              "$ref": "#/definitions/Reference"
            },
            "mustSupport": {
              "description": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "mustSupport_": {
              "description": "Extensions for mustSupport",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "codeFilter": {
              "description": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataRequirement.CodeFilter"
              }
            },
            "dateFilter": {
              "description": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataRequirement.DateFilter"
              }
            }
          }
        }
      ]
    },
    "DataRequirement.CodeFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes a required data item for evaluation in terms of the type of data, and optional code- or date-based filters of the data.",
          "properties": {
            "path": {
              "description": "The code-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            },
            "valueSetString": {
              "description": "The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
              "type": "string"
            },
            "valueSetString_": {
              "description": "Extensions for valueSetString",
              "$ref": "#/definitions/Element"
            },
            "valueSetReference": {
              "description": "The valueset for the code filter. The valueSet and value elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
              "$ref": "#/definitions/Reference"
            },
            "valueCode": {
              "description": "The codes for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "valueCode_": {
              "description": "Extensions for valueCode",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "valueCoding": {
              "description": "The Codings for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified Codings.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "valueCodeableConcept": {
              "description": "The CodeableConcepts for the code filter. Only one of valueSet, valueCode, valueConding, or valueCodeableConcept may be specified. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified CodeableConcepts.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            }
          }
        }
      ]
    },
    "DataRequirement.DateFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes a required data item for evaluation in terms of the type of data, and optional code- or date-based filters of the data.",
          "properties": {
            "path": {
              "description": "The date-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type dateTime, Period, Schedule, or Timing.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            },
            "valuePeriod": {
              "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "ActionDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "The definition of an action to be performed. Some aspects of the definition are specified statically, and some aspects can be specified dynamically by referencing logic defined in a library.",
          "properties": {
            "actionIdentifier": {
              "description": "A unique identifier for the action. The identifier SHALL be unique within the container in which it appears, and MAY be universally unique.",
              "$ref": "#/definitions/Identifier"
            },
            "label": {
              "description": "A user-visible label for the action.",
              "type": "string"
            },
            "label_": {
              "description": "Extensions for label",
              "$ref": "#/definitions/Element"
            },
            "title": {
              "description": "The title of the action displayed to a user.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A short description of the action used to provide a summary to display to the user.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "textEquivalent": {
              "description": "A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically.",
              "type": "string"
            },
            "textEquivalent_": {
              "description": "Extensions for textEquivalent",
              "$ref": "#/definitions/Element"
            },
            "concept": {
              "description": "The concept represented by this action or its sub-actions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "supportingEvidence": {
              "description": "The evidence grade and the sources of evidence for this action.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            },
            "documentation": {
              "description": "Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            },
            "relatedAction": {
              "description": "A relationship to another action such as \"before\" or \"30-60 minutes after start of\".",
              "$ref": "#/definitions/ActionDefinition.RelatedAction"
            },
            "participantType": {
              "description": "The type of participant in the action.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "participantType_": {
              "description": "Extensions for participantType",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "type": {
              "description": "The type of action to perform (create, update, remove).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "behavior": {
              "description": "A behavior associated with the action. Behaviors define how the action is to be presented and/or executed within the receiving environment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionDefinition.Behavior"
              }
            },
            "resource": {
              "description": "The resource that is the target of the action (e.g. CommunicationRequest). The resource described here defines any aspects of the action that can be specified statically (i.e. are known at the time of definition).",
              "$ref": "#/definitions/Reference"
            },
            "customization": {
              "description": "Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient\u0027s weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionDefinition.Customization"
              }
            },
            "action": {
              "description": "Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionDefinition"
              }
            }
          }
        }
      ]
    },
    "ActionDefinition.RelatedAction": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The definition of an action to be performed. Some aspects of the definition are specified statically, and some aspects can be specified dynamically by referencing logic defined in a library.",
          "properties": {
            "actionIdentifier": {
              "description": "The unique identifier of the related action.",
              "$ref": "#/definitions/Identifier"
            },
            "relationship": {
              "description": "The relationship of this action to the related action.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "relationship_": {
              "description": "Extensions for relationship",
              "$ref": "#/definitions/Element"
            },
            "offsetDuration": {
              "description": "A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.",
              "$ref": "#/definitions/Duration"
            },
            "offsetRange": {
              "description": "A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.",
              "$ref": "#/definitions/Range"
            },
            "anchor": {
              "description": "An optional indicator for how the relationship is anchored to the related action. For example \"before the start\" or \"before the end\" of the related action.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "anchor_": {
              "description": "Extensions for anchor",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "actionIdentifier"
          ]
        }
      ]
    },
    "ActionDefinition.Behavior": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The definition of an action to be performed. Some aspects of the definition are specified statically, and some aspects can be specified dynamically by referencing logic defined in a library.",
          "properties": {
            "type": {
              "description": "The type of the behavior to be described, such as grouping, visual, or selection behaviors.",
              "$ref": "#/definitions/Coding"
            },
            "value": {
              "description": "The specific behavior. The code used here is determined by the type of behavior being described. For example, the grouping behavior uses the grouping-behavior-type valueset.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "type",
            "value"
          ]
        }
      ]
    },
    "ActionDefinition.Customization": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The definition of an action to be performed. Some aspects of the definition are specified statically, and some aspects can be specified dynamically by referencing logic defined in a library.",
          "properties": {
            "path": {
              "description": "The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            },
            "expression": {
              "description": "An expression specifying the value of the customized element.",
              "type": "string"
            },
            "expression_": {
              "description": "Extensions for expression",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ParameterDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
          "properties": {
            "name": {
              "description": "The name of the parameter.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "use": {
              "description": "Whether the parameter is input or output for the module.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "use_": {
              "description": "Extensions for use",
              "$ref": "#/definitions/Element"
            },
            "min": {
              "description": "The minimum number of times this parameter SHALL appear in the request or response.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "min_": {
              "description": "Extensions for min",
              "$ref": "#/definitions/Element"
            },
            "max": {
              "description": "The maximum number of times this element is permitted to appear in the request or response.",
              "type": "string"
            },
            "max_": {
              "description": "Extensions for max",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "A brief discussion of what the parameter is for and how it is used by the module.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of the parameter.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "TriggerDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/Type"
        },
        {
          "description": "A description of a triggering event.",
          "properties": {
            "type": {
              "description": "The type of triggering event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "eventName": {
              "description": "The name of the event (if this is a named-event trigger).",
              "type": "string"
            },
            "eventName_": {
              "description": "Extensions for eventName",
              "$ref": "#/definitions/Element"
            },
            "eventTimingTiming": {
              "description": "The timing of the event (if this is a period trigger).",
              "$ref": "#/definitions/Timing"
            },
            "eventTimingReference": {
              "description": "The timing of the event (if this is a period trigger).",
              "$ref": "#/definitions/Reference"
            },
            "eventTimingDate": {
              "description": "The timing of the event (if this is a period trigger).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "eventTimingDate_": {
              "description": "Extensions for eventTimingDate",
              "$ref": "#/definitions/Element"
            },
            "eventTimingDateTime": {
              "description": "The timing of the event (if this is a period trigger).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "eventTimingDateTime_": {
              "description": "Extensions for eventTimingDateTime",
              "$ref": "#/definitions/Element"
            },
            "eventData": {
              "description": "The triggering data of the event (if this is a data trigger).",
              "$ref": "#/definitions/DataRequirement"
            }
          }
        }
      ]
    },
    "Account": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centres, etc.",
          "properties": {
            "resourceType": {
              "description": "This is a Account resource",
              "type": "string",
              "enum": [
                "Account"
              ]
            },
            "identifier": {
              "description": "Unique identifier used to reference the account.  May or may not be intended for human use (e.g. credit card number).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "name": {
              "description": "Name used for the account when displaying it to humans in reports, etc.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Categorizes the account for reporting and searching purposes.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "status": {
              "description": "Indicates whether the account is presently used/useable or not.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "activePeriod": {
              "description": "Indicates the period of time over which the account is allowed.",
              "$ref": "#/definitions/Period"
            },
            "currency": {
              "description": "Identifies the currency to which transactions must be converted when crediting or debiting the account.",
              "$ref": "#/definitions/Coding"
            },
            "balance": {
              "description": "Represents the sum of all credits less all debits associated with the account.  Might be positive, zero or negative.",
              "$ref": "#/definitions/Money"
            },
            "coveragePeriod": {
              "description": "Identifies the period of time the account applies to; e.g. accounts created per fiscal year, quarter, etc.",
              "$ref": "#/definitions/Period"
            },
            "subject": {
              "description": "Identifies the patient, device, practitioner, location or other object the account is associated with.",
              "$ref": "#/definitions/Reference"
            },
            "owner": {
              "description": "Indicates the organization, department, etc. with responsibility for the account.",
              "$ref": "#/definitions/Reference"
            },
            "description": {
              "description": "Provides additional information about what the account tracks and how it is used.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "AllergyIntolerance": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.",
          "properties": {
            "resourceType": {
              "description": "This is a AllergyIntolerance resource",
              "type": "string",
              "enum": [
                "AllergyIntolerance"
              ]
            },
            "identifier": {
              "description": "This records identifiers associated with this allergy/intolerance concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "Assertion about certainty associated with the propensity, or potential risk, of a reaction to the identified Substance.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Identification of the underlying physiological mechanism for the reaction risk.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "category": {
              "description": "Category of the identified Substance.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "category_": {
              "description": "Extensions for category",
              "$ref": "#/definitions/Element"
            },
            "criticality": {
              "description": "Estimate of the potential clinical harm, or seriousness, of the reaction to the identified Substance.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "criticality_": {
              "description": "Extensions for criticality",
              "$ref": "#/definitions/Element"
            },
            "substance": {
              "description": "Identification of a substance, or a class of substances, that is considered to be responsible for the adverse reaction risk.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "patient": {
              "description": "The patient who has the allergy or intolerance.",
              "$ref": "#/definitions/Reference"
            },
            "recordedDate": {
              "description": "Date when the sensitivity was recorded.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "recordedDate_": {
              "description": "Extensions for recordedDate",
              "$ref": "#/definitions/Element"
            },
            "recorder": {
              "description": "Individual who recorded the record and takes responsibility for its content.",
              "$ref": "#/definitions/Reference"
            },
            "reporter": {
              "description": "The source of the information about the allergy that is recorded.",
              "$ref": "#/definitions/Reference"
            },
            "onset": {
              "description": "Record of the date and/or time of the onset of the Allergy or Intolerance.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "onset_": {
              "description": "Extensions for onset",
              "$ref": "#/definitions/Element"
            },
            "lastOccurence": {
              "description": "Represents the date and/or time of the last known occurrence of a reaction event.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "lastOccurence_": {
              "description": "Extensions for lastOccurence",
              "$ref": "#/definitions/Element"
            },
            "note": {
              "description": "Additional narrative about the propensity for the Adverse Reaction, not captured in other fields.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "reaction": {
              "description": "Details about each adverse reaction event linked to exposure to the identified Substance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AllergyIntolerance.Reaction"
              }
            }
          },
          "required": [
            "patient",
            "substance",
            "resourceType"
          ]
        }
      ]
    },
    "AllergyIntolerance.Reaction": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.",
          "properties": {
            "substance": {
              "description": "Identification of the specific substance considered to be responsible for the Adverse Reaction event. Note: the substance for a specific reaction may be different to the substance identified as the cause of the risk, but must be consistent with it. For instance, it may be a more specific substance (e.g. a brand medication) or a composite substance that includes the identified substance. It must be clinically safe to only process the AllergyIntolerance.substance and ignore the AllergyIntolerance.event.substance.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "certainty": {
              "description": "Statement about the degree of clinical certainty that the specific substance was the cause of the manifestation in this reaction event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "certainty_": {
              "description": "Extensions for certainty",
              "$ref": "#/definitions/Element"
            },
            "manifestation": {
              "description": "Clinical symptoms and/or signs that are observed or associated with the adverse reaction event.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "description": {
              "description": "Text description about the reaction as a whole, including details of the manifestation if required.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "onset": {
              "description": "Record of the date and/or time of the onset of the Reaction.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "onset_": {
              "description": "Extensions for onset",
              "$ref": "#/definitions/Element"
            },
            "severity": {
              "description": "Clinical assessment of the severity of the reaction event as a whole, potentially considering multiple different manifestations.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "severity_": {
              "description": "Extensions for severity",
              "$ref": "#/definitions/Element"
            },
            "exposureRoute": {
              "description": "Identification of the route by which the subject was exposed to the substance.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "note": {
              "description": "Additional text about the adverse reaction event not captured in other fields.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            }
          },
          "required": [
            "manifestation"
          ]
        }
      ]
    },
    "Appointment": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).",
          "properties": {
            "resourceType": {
              "description": "This is a Appointment resource",
              "type": "string",
              "enum": [
                "Appointment"
              ]
            },
            "identifier": {
              "description": "This records identifiers associated with this appointment concern that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "The overall status of the Appointment. Each of the participants has their own participation status which indicates their involvement in the process, however this status indicates the shared status.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "serviceCategory": {
              "description": "A broad categorisation of the service that is to be performed during this appointment.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "serviceType": {
              "description": "The specific service that is to be performed during this appointment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "specialty": {
              "description": "The specialty of a practitioner that would be required to perform the service requested in this appointment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "appointmentType": {
              "description": "The style of appointment or patient that has been booked in the slot (not service type).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "reason": {
              "description": "The reason that this appointment is being scheduled. This is more clinical than administrative.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "priority": {
              "description": "The priority of the appointment. Can be used to make informed decisions if needing to re-prioritize appointments. (The iCal Standard specifies 0 as undefined, 1 as highest, 9 as lowest priority).",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "priority_": {
              "description": "Extensions for priority",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "The brief description of the appointment as would be shown on a subject line in a meeting request, or appointment list. Detailed or expanded information should be put in the comment field.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "start": {
              "description": "Date/Time that the appointment is to take place.",
              "type": "string"
            },
            "start_": {
              "description": "Extensions for start",
              "$ref": "#/definitions/Element"
            },
            "end": {
              "description": "Date/Time that the appointment is to conclude.",
              "type": "string"
            },
            "end_": {
              "description": "Extensions for end",
              "$ref": "#/definitions/Element"
            },
            "minutesDuration": {
              "description": "Number of minutes that the appointment is to take. This can be less than the duration between the start and end times (where actual time of appointment is only an estimate or is a planned appointment request).",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "minutesDuration_": {
              "description": "Extensions for minutesDuration",
              "$ref": "#/definitions/Element"
            },
            "slot": {
              "description": "The slot that this appointment is filling. If provided then the schedule will not be provided as slots are not recursive, and the start/end values MUST be the same as from the slot.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "created": {
              "description": "The date that this appointment was initially created. This could be different to the meta.lastModified value on the initial entry, as this could have been before the resource was created on the FHIR server, and should remain unchanged over the lifespan of the appointment.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "comment": {
              "description": "Additional comments about the appointment.",
              "type": "string"
            },
            "comment_": {
              "description": "Extensions for comment",
              "$ref": "#/definitions/Element"
            },
            "participant": {
              "description": "List of participants involved in the appointment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Appointment.Participant"
              }
            }
          },
          "required": [
            "participant",
            "resourceType"
          ]
        }
      ]
    },
    "Appointment.Participant": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).",
          "properties": {
            "type": {
              "description": "Role of participant in the appointment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "actor": {
              "description": "A Person, Location/HealthcareService or Device that is participating in the appointment.",
              "$ref": "#/definitions/Reference"
            },
            "required": {
              "description": "Is this participant required to be present at the meeting. This covers a use-case where 2 doctors need to meet to discuss the results for a specific patient, and the patient is not required to be present.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "required_": {
              "description": "Extensions for required",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "Participation status of the Patient.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "AppointmentResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.",
          "properties": {
            "resourceType": {
              "description": "This is a AppointmentResponse resource",
              "type": "string",
              "enum": [
                "AppointmentResponse"
              ]
            },
            "identifier": {
              "description": "This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "appointment": {
              "description": "Appointment that this response is replying to.",
              "$ref": "#/definitions/Reference"
            },
            "start": {
              "description": "Date/Time that the appointment is to take place, or requested new start time.",
              "type": "string"
            },
            "start_": {
              "description": "Extensions for start",
              "$ref": "#/definitions/Element"
            },
            "end": {
              "description": "This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.",
              "type": "string"
            },
            "end_": {
              "description": "Extensions for end",
              "$ref": "#/definitions/Element"
            },
            "participantType": {
              "description": "Role of participant in the appointment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "actor": {
              "description": "A Person, Location/HealthcareService or Device that is participating in the appointment.",
              "$ref": "#/definitions/Reference"
            },
            "participantStatus": {
              "description": "Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "participantStatus_": {
              "description": "Extensions for participantStatus",
              "$ref": "#/definitions/Element"
            },
            "comment": {
              "description": "Additional comments about the appointment.",
              "type": "string"
            },
            "comment_": {
              "description": "Extensions for comment",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "appointment",
            "resourceType"
          ]
        }
      ]
    },
    "AuditEvent": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
          "properties": {
            "resourceType": {
              "description": "This is a AuditEvent resource",
              "type": "string",
              "enum": [
                "AuditEvent"
              ]
            },
            "type": {
              "description": "Identifier for a family of the event.  For example, a menu item, program, rule, policy, function code, application name or URL. It identifies the performed function.",
              "$ref": "#/definitions/Coding"
            },
            "subtype": {
              "description": "Identifier for the category of event.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "action": {
              "description": "Indicator for type of action performed during the event that generated the audit.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "action_": {
              "description": "Extensions for action",
              "$ref": "#/definitions/Element"
            },
            "recorded": {
              "description": "The time when the event occurred on the source.",
              "type": "string"
            },
            "recorded_": {
              "description": "Extensions for recorded",
              "$ref": "#/definitions/Element"
            },
            "outcome": {
              "description": "Indicates whether the event succeeded or failed.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "outcome_": {
              "description": "Extensions for outcome",
              "$ref": "#/definitions/Element"
            },
            "outcomeDesc": {
              "description": "A free text description of the outcome of the event.",
              "type": "string"
            },
            "outcomeDesc_": {
              "description": "Extensions for outcomeDesc",
              "$ref": "#/definitions/Element"
            },
            "purposeOfEvent": {
              "description": "The purposeOfUse (reason) that was used during the event being recorded.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "agent": {
              "description": "An actor taking an active role in the event or activity that is logged.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditEvent.Agent"
              }
            },
            "source": {
              "description": "Application systems and processes.",
              "$ref": "#/definitions/AuditEvent.Source"
            },
            "entity": {
              "description": "Specific instances of data or objects that have been accessed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditEvent.Entity"
              }
            }
          },
          "required": [
            "agent",
            "source",
            "type",
            "resourceType"
          ]
        }
      ]
    },
    "AuditEvent.Agent": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
          "properties": {
            "role": {
              "description": "Specification of the role(s) the user plays when performing the event. Usually the codes used in this element are local codes defined by the access control security system (e.g. RBAC, ABAC) used in the local context.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reference": {
              "description": "Direct reference to a resource that identifies the agent.",
              "$ref": "#/definitions/Reference"
            },
            "userId": {
              "description": "Unique identifier for the user actively participating in the event.",
              "$ref": "#/definitions/Identifier"
            },
            "altId": {
              "description": "Alternative agent Identifier. For a human, this should be a user identifier text string from authentication system. This identifier would be one known to a common authentication system (e.g. single sign-on), if available.",
              "type": "string"
            },
            "altId_": {
              "description": "Extensions for altId",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "Human-meaningful name for the agent.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "requestor": {
              "description": "Indicator that the user is or is not the requestor, or initiator, for the event being audited.",
              "type": "true | false"
            },
            "requestor_": {
              "description": "Extensions for requestor",
              "$ref": "#/definitions/Element"
            },
            "location": {
              "description": "Where the event occurred.",
              "$ref": "#/definitions/Reference"
            },
            "policy": {
              "description": "The policy or plan that authorized the activity being recorded. Typically, a single activity may have multiple applicable policies, such as patient consent, guarantor funding, etc. The policy would also indicate the security token used.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "policy_": {
              "description": "Extensions for policy",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "media": {
              "description": "Type of media involved. Used when the event is about exporting/importing onto media.",
              "$ref": "#/definitions/Coding"
            },
            "network": {
              "description": "Logical network location for application activity, if the activity has a network location.",
              "$ref": "#/definitions/AuditEvent.Network"
            },
            "purposeOfUse": {
              "description": "The reason (purpose of use), specific to this agent, that was used during the event being recorded.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            }
          }
        }
      ]
    },
    "AuditEvent.Network": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
          "properties": {
            "address": {
              "description": "An identifier for the network access point of the user device for the audit event.",
              "type": "string"
            },
            "address_": {
              "description": "Extensions for address",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "An identifier for the type of network access point that originated the audit event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "AuditEvent.Source": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
          "properties": {
            "site": {
              "description": "Logical source location within the healthcare enterprise network.  For example, a hospital or other provider location within a multi-entity provider group.",
              "type": "string"
            },
            "site_": {
              "description": "Extensions for site",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Identifier of the source where the event was detected.",
              "$ref": "#/definitions/Identifier"
            },
            "type": {
              "description": "Code specifying the type of source where event originated.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            }
          },
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "AuditEvent.Entity": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
          "properties": {
            "identifier": {
              "description": "Identifies a specific instance of the entity. The reference should always be version specific.",
              "$ref": "#/definitions/Identifier"
            },
            "reference": {
              "description": "Identifies a specific instance of the entity. The reference should always be version specific.",
              "$ref": "#/definitions/Reference"
            },
            "type": {
              "description": "The type of the object that was involved in this audit event.",
              "$ref": "#/definitions/Coding"
            },
            "role": {
              "description": "Code representing the role the entity played in the event being audited.",
              "$ref": "#/definitions/Coding"
            },
            "lifecycle": {
              "description": "Identifier for the data life-cycle stage for the entity.",
              "$ref": "#/definitions/Coding"
            },
            "securityLabel": {
              "description": "Denotes security labels for the identified entity.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "name": {
              "description": "A name of the entity in the audit event.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Text that describes the entity in more detail.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "query": {
              "description": "The query parameters for a query-type entities.",
              "type": "string"
            },
            "query_": {
              "description": "Extensions for query",
              "$ref": "#/definitions/Element"
            },
            "detail": {
              "description": "Additional Information about the entity.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditEvent.Detail"
              }
            }
          }
        }
      ]
    },
    "AuditEvent.Detail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.",
          "properties": {
            "type": {
              "description": "Name of the property.",
              "type": "string"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "Property value.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Basic": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Basic is used for handling concepts not yet defined in FHIR, narrative-only resources that don\u0027t map to an existing resource, and custom resources not appropriate for inclusion in the FHIR specification.",
          "properties": {
            "resourceType": {
              "description": "This is a Basic resource",
              "type": "string",
              "enum": [
                "Basic"
              ]
            },
            "identifier": {
              "description": "Identifier assigned to the resource for business purposes, outside the context of FHIR.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "code": {
              "description": "Identifies the \u0027type\u0027 of resource - equivalent to the resource name for other resources.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "subject": {
              "description": "Identifies the patient, practitioner, device or any other resource that is the \"focus\" of this resource.",
              "$ref": "#/definitions/Reference"
            },
            "created": {
              "description": "Identifies when the resource was first created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "author": {
              "description": "Indicates who was responsible for creating the resource instance.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "code",
            "resourceType"
          ]
        }
      ]
    },
    "Binary": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "description": "A binary resource can contain any content, whether text, image, pdf, zip archive, etc.",
          "properties": {
            "resourceType": {
              "description": "This is a Binary resource",
              "type": "string",
              "enum": [
                "Binary"
              ]
            },
            "contentType": {
              "description": "MimeType of the binary content represented as a standard MimeType (BCP 13).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contentType_": {
              "description": "Extensions for contentType",
              "$ref": "#/definitions/Element"
            },
            "content": {
              "description": "The actual content, base64 encoded.",
              "type": "string"
            },
            "content_": {
              "description": "Extensions for content",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "BodySite": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Record details about the anatomical location of a specimen or body part.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.",
          "properties": {
            "resourceType": {
              "description": "This is a BodySite resource",
              "type": "string",
              "enum": [
                "BodySite"
              ]
            },
            "patient": {
              "description": "The person to which the body site belongs.",
              "$ref": "#/definitions/Reference"
            },
            "identifier": {
              "description": "Identifier for this instance of the anatomical location.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "code": {
              "description": "Named anatomical location - ideally coded where possible.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "modifier": {
              "description": "Modifier to refine the anatomical location.  These include modifiers for laterality, relative location, directionality, number, and plane.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "description": {
              "description": "Description of anatomical location.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "image": {
              "description": "Image or images used to identify a location.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            }
          },
          "required": [
            "patient",
            "resourceType"
          ]
        }
      ]
    },
    "Bundle": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "description": "A container for a collection of resources.",
          "properties": {
            "resourceType": {
              "description": "This is a Bundle resource",
              "type": "string",
              "enum": [
                "Bundle"
              ]
            },
            "type": {
              "description": "Indicates the purpose of this bundle- how it was intended to be used.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "total": {
              "description": "If a set of search matches, this is the total number of matches for the search (as opposed to the number of results in this bundle).",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "total_": {
              "description": "Extensions for total",
              "$ref": "#/definitions/Element"
            },
            "link": {
              "description": "A series of links that provide context to this bundle.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bundle.Link"
              }
            },
            "entry": {
              "description": "An entry in a bundle resource - will either contain a resource, or information about a resource (transactions and history only).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bundle.Entry"
              }
            },
            "signature": {
              "description": "Digital Signature - base64 encoded. XML DigSIg or a JWT.",
              "$ref": "#/definitions/Signature"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Bundle.Link": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A container for a collection of resources.",
          "properties": {
            "relation": {
              "description": "A name which details the functional use for this link - see [[http://www.iana.org/assignments/link-relations/link-relations.xhtml]].",
              "type": "string"
            },
            "relation_": {
              "description": "Extensions for relation",
              "$ref": "#/definitions/Element"
            },
            "url": {
              "description": "The reference details for the link.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Bundle.Entry": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A container for a collection of resources.",
          "properties": {
            "link": {
              "description": "A series of links that provide context to this entry.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bundle.Link"
              }
            },
            "fullUrl": {
              "description": "The Absolute URL for the resource.  The fullUrl SHALL not disagree with the id in the resource. The fullUrl is a version independent reference to the resource. The fullUrl element SHALL have a value except that: \n* fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)\n* Results from operations might involve resources that are not identified.",
              "type": "string"
            },
            "fullUrl_": {
              "description": "Extensions for fullUrl",
              "$ref": "#/definitions/Element"
            },
            "resource": {
              "description": "The Resources for the entry.",
              "$ref": "#/definitions/ResourceContainer"
            },
            "search": {
              "description": "Information about the search process that lead to the creation of this entry.",
              "$ref": "#/definitions/Bundle.Search"
            },
            "request": {
              "description": "Additional information about how this entry should be processed as part of a transaction.",
              "$ref": "#/definitions/Bundle.Request"
            },
            "response": {
              "description": "Additional information about how this entry should be processed as part of a transaction.",
              "$ref": "#/definitions/Bundle.Response"
            }
          }
        }
      ]
    },
    "Bundle.Search": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A container for a collection of resources.",
          "properties": {
            "mode": {
              "description": "Why this entry is in the result set - whether it\u0027s included as a match or because of an _include requirement.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "#/definitions/Element"
            },
            "score": {
              "description": "When searching, the server\u0027s search ranking score for the entry.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "score_": {
              "description": "Extensions for score",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Bundle.Request": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A container for a collection of resources.",
          "properties": {
            "method": {
              "description": "The HTTP verb for this entry in either a change history, or a transaction/ transaction response.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "method_": {
              "description": "Extensions for method",
              "$ref": "#/definitions/Element"
            },
            "url": {
              "description": "The URL for this entry, relative to the root (the address to which the request is posted).",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "ifNoneMatch": {
              "description": "If the ETag values match, return a 304 Not modified status. See the API documentation for [\"Conditional Read\"](http.html#cread).",
              "type": "string"
            },
            "ifNoneMatch_": {
              "description": "Extensions for ifNoneMatch",
              "$ref": "#/definitions/Element"
            },
            "ifModifiedSince": {
              "description": "Only perform the operation if the last updated date matches. See the API documentation for [\"Conditional Read\"](http.html#cread).",
              "type": "string"
            },
            "ifModifiedSince_": {
              "description": "Extensions for ifModifiedSince",
              "$ref": "#/definitions/Element"
            },
            "ifMatch": {
              "description": "Only perform the operation if the Etag value matches. For more information, see the API section [\"Managing Resource Contention\"](http.html#concurrency).",
              "type": "string"
            },
            "ifMatch_": {
              "description": "Extensions for ifMatch",
              "$ref": "#/definitions/Element"
            },
            "ifNoneExist": {
              "description": "Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for [\"Conditional Create\"](http.html#ccreate). This is just the query portion of the URL - what follows the \"?\" (not including the \"?\").",
              "type": "string"
            },
            "ifNoneExist_": {
              "description": "Extensions for ifNoneExist",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Bundle.Response": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A container for a collection of resources.",
          "properties": {
            "status": {
              "description": "The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code.",
              "type": "string"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "location": {
              "description": "The location header created by processing this operation.",
              "type": "string"
            },
            "location_": {
              "description": "Extensions for location",
              "$ref": "#/definitions/Element"
            },
            "etag": {
              "description": "The etag for the resource, it the operation for the entry produced a versioned resource.",
              "type": "string"
            },
            "etag_": {
              "description": "Extensions for etag",
              "$ref": "#/definitions/Element"
            },
            "lastModified": {
              "description": "The date/time that the resource was modified on the server.",
              "type": "string"
            },
            "lastModified_": {
              "description": "Extensions for lastModified",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "CarePlan": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.",
          "properties": {
            "resourceType": {
              "description": "This is a CarePlan resource",
              "type": "string",
              "enum": [
                "CarePlan"
              ]
            },
            "identifier": {
              "description": "This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "subject": {
              "description": "Identifies the patient or group whose intended care is described by the plan.",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "context": {
              "description": "Identifies the context in which this particular CarePlan is defined.",
              "$ref": "#/definitions/Reference"
            },
            "period": {
              "description": "Indicates when the plan did (or is intended to) come into effect and end.",
              "$ref": "#/definitions/Period"
            },
            "author": {
              "description": "Identifies the individual(s) or ogranization who is responsible for the content of the care plan.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "modified": {
              "description": "Identifies the most recent date on which the plan has been revised.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "modified_": {
              "description": "Extensions for modified",
              "$ref": "#/definitions/Element"
            },
            "category": {
              "description": "Identifies what \"kind\" of plan this is to support differentiation between multiple co-existing plans; e.g. \"Home health\", \"psychiatric\", \"asthma\", \"disease management\", \"wellness plan\", etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "description": {
              "description": "A description of the scope and nature of the plan.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "addresses": {
              "description": "Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "support": {
              "description": "Identifies portions of the patient\u0027s record that specifically influenced the formation of the plan.  These might include co-morbidities, recent procedures, limitations, recent assessments, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "relatedPlan": {
              "description": "Identifies CarePlans with some sort of formal relationship to the current plan.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarePlan.RelatedPlan"
              }
            },
            "careTeam": {
              "description": "Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.",
              "$ref": "#/definitions/Reference"
            },
            "goal": {
              "description": "Describes the intended objective(s) of carrying out the care plan.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "activity": {
              "description": "Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CarePlan.Activity"
              }
            },
            "note": {
              "description": "General notes about the care plan not covered elsewhere.",
              "$ref": "#/definitions/Annotation"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "CarePlan.RelatedPlan": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.",
          "properties": {
            "code": {
              "description": "Identifies the type of relationship this plan has to the target plan.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "plan": {
              "description": "A reference to the plan to which a relationship is asserted.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "plan"
          ]
        }
      ]
    },
    "CarePlan.Activity": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.",
          "properties": {
            "actionResulting": {
              "description": "Resources that describe follow-on actions resulting from the plan, such as drug prescriptions, encounter records, appointments, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "progress": {
              "description": "Notes about the adherence/status/progress of the activity.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "reference": {
              "description": "The details of the proposed activity represented in a specific resource.",
              "$ref": "#/definitions/Reference"
            },
            "detail": {
              "description": "A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn\u0027t know about specific resources such as procedure etc.",
              "$ref": "#/definitions/CarePlan.Detail"
            }
          }
        }
      ]
    },
    "CarePlan.Detail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.",
          "properties": {
            "category": {
              "description": "High-level categorization of the type of activity in a care plan.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "code": {
              "description": "Detailed description of the type of planned activity; e.g. What lab test, what procedure, what kind of encounter.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "reasonCode": {
              "description": "Provides the rationale that drove the inclusion of this particular activity as part of the plan.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reasonReference": {
              "description": "Provides the health condition(s) that drove the inclusion of this particular activity as part of the plan.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "goal": {
              "description": "Internal reference that identifies the goals that this activity is intended to contribute towards meeting.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "status": {
              "description": "Identifies what progress is being made for the specific activity.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "statusReason": {
              "description": "Provides reason why the activity isn\u0027t yet started, is on hold, was cancelled, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "prohibited": {
              "description": "If true, indicates that the described activity is one that must NOT be engaged in when following the plan.",
              "type": "true | false"
            },
            "prohibited_": {
              "description": "Extensions for prohibited",
              "$ref": "#/definitions/Element"
            },
            "scheduledTiming": {
              "description": "The period, timing or frequency upon which the described activity is to occur.",
              "$ref": "#/definitions/Timing"
            },
            "scheduledPeriod": {
              "description": "The period, timing or frequency upon which the described activity is to occur.",
              "$ref": "#/definitions/Period"
            },
            "scheduledString": {
              "description": "The period, timing or frequency upon which the described activity is to occur.",
              "type": "string"
            },
            "scheduledString_": {
              "description": "Extensions for scheduledString",
              "$ref": "#/definitions/Element"
            },
            "location": {
              "description": "Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.",
              "$ref": "#/definitions/Reference"
            },
            "performer": {
              "description": "Identifies who\u0027s expected to be involved in the activity.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "productCodeableConcept": {
              "description": "Identifies the food, drug or other product to be consumed or supplied in the activity.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "productReference": {
              "description": "Identifies the food, drug or other product to be consumed or supplied in the activity.",
              "$ref": "#/definitions/Reference"
            },
            "dailyAmount": {
              "description": "Identifies the quantity expected to be consumed in a given day.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "quantity": {
              "description": "Identifies the quantity expected to be supplied, administered or consumed by the subject.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "description": {
              "description": "This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "CareTeam": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.",
          "properties": {
            "resourceType": {
              "description": "This is a CareTeam resource",
              "type": "string",
              "enum": [
                "CareTeam"
              ]
            },
            "identifier": {
              "description": "This records identifiers associated with this care team that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "Indicates whether the care team is currently active, suspended, inactive, or entered in error.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "type": {
              "description": "Identifies what kind of team.  This is to support differentiation between multiple co-existing teams, such as care plan team, episode of care team, longitudinal care team.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "name": {
              "description": "Name of the care team.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "Identifies the patient or group whose intended care is handled by the team.",
              "$ref": "#/definitions/Reference"
            },
            "period": {
              "description": "Indicates when the team did (or is intended to) come into effect and end.",
              "$ref": "#/definitions/Period"
            },
            "participant": {
              "description": "Identifies all people and organizations who are expected to be involved in the care team.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CareTeam.Participant"
              }
            },
            "managingOrganization": {
              "description": "The organization responsible for the care team.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "CareTeam.Participant": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.",
          "properties": {
            "role": {
              "description": "Indicates specific responsibility of an individual within the care team, such as \"Primary physician\", \"Team coordinator\", \"Caregiver\", etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "member": {
              "description": "The specific person or organization who is participating/expected to participate in the care team.",
              "$ref": "#/definitions/Reference"
            },
            "period": {
              "description": "Indicates when the specific member or organization did (or is intended to) come into effect and end.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "Claim": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "resourceType": {
              "description": "This is a Claim resource",
              "type": "string",
              "enum": [
                "Claim"
              ]
            },
            "type": {
              "description": "The category of claim.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "subType": {
              "description": "A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "identifier": {
              "description": "The business identifier for the instance: claim number, pre-determination or pre-authorization number.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "ruleset": {
              "description": "The version of the specification on which this instance relies.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The version of the specification from which the original instance was created.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when the enclosed suite of services were performed or completed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "billablePeriod": {
              "description": "The billable period for which charges are being submitted.",
              "$ref": "#/definitions/Period"
            },
            "targetIdentifier": {
              "description": "Insurer Identifier, typical BIN number (6 digit).",
              "$ref": "#/definitions/Identifier"
            },
            "targetReference": {
              "description": "Insurer Identifier, typical BIN number (6 digit).",
              "$ref": "#/definitions/Reference"
            },
            "providerIdentifier": {
              "description": "The provider which is responsible for the bill, claim pre-determination, pre-authorization.",
              "$ref": "#/definitions/Identifier"
            },
            "providerReference": {
              "description": "The provider which is responsible for the bill, claim pre-determination, pre-authorization.",
              "$ref": "#/definitions/Reference"
            },
            "organizationIdentifier": {
              "description": "The organization which is responsible for the bill, claim pre-determination, pre-authorization.",
              "$ref": "#/definitions/Identifier"
            },
            "organizationReference": {
              "description": "The organization which is responsible for the bill, claim pre-determination, pre-authorization.",
              "$ref": "#/definitions/Reference"
            },
            "use": {
              "description": "Complete (Bill or Claim), Proposed (Pre-Authorization), Exploratory (Pre-determination).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "use_": {
              "description": "Extensions for use",
              "$ref": "#/definitions/Element"
            },
            "priority": {
              "description": "Immediate (STAT), best effort (NORMAL), deferred (DEFER).",
              "$ref": "#/definitions/Coding"
            },
            "fundsReserve": {
              "description": "In the case of a Pre-Determination/Pre-Authorization the provider may request that funds in the amount of the expected Benefit be reserved (\u0027Patient\u0027 or \u0027Provider\u0027) to pay for the Benefits determined on the subsequent claim(s). \u0027None\u0027 explicitly indicates no funds reserving is requested.",
              "$ref": "#/definitions/Coding"
            },
            "entererIdentifier": {
              "description": "Person who created the invoice/claim/pre-determination or pre-authorization.",
              "$ref": "#/definitions/Identifier"
            },
            "entererReference": {
              "description": "Person who created the invoice/claim/pre-determination or pre-authorization.",
              "$ref": "#/definitions/Reference"
            },
            "facilityIdentifier": {
              "description": "Facility where the services were provided.",
              "$ref": "#/definitions/Identifier"
            },
            "facilityReference": {
              "description": "Facility where the services were provided.",
              "$ref": "#/definitions/Reference"
            },
            "related": {
              "description": "Other claims which are related to this claim such as prior claim versions or for related services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.Related"
              }
            },
            "prescriptionIdentifier": {
              "description": "Prescription to support the dispensing of Pharmacy or Vision products.",
              "$ref": "#/definitions/Identifier"
            },
            "prescriptionReference": {
              "description": "Prescription to support the dispensing of Pharmacy or Vision products.",
              "$ref": "#/definitions/Reference"
            },
            "originalPrescriptionIdentifier": {
              "description": "Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products.",
              "$ref": "#/definitions/Identifier"
            },
            "originalPrescriptionReference": {
              "description": "Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products.",
              "$ref": "#/definitions/Reference"
            },
            "payee": {
              "description": "The party to be reimbursed for the services.",
              "$ref": "#/definitions/Claim.Payee"
            },
            "referralIdentifier": {
              "description": "The referral resource which lists the date, practitioner, reason and other supporting information.",
              "$ref": "#/definitions/Identifier"
            },
            "referralReference": {
              "description": "The referral resource which lists the date, practitioner, reason and other supporting information.",
              "$ref": "#/definitions/Reference"
            },
            "information": {
              "description": "Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.Information"
              }
            },
            "diagnosis": {
              "description": "Ordered list of patient diagnosis for which care is sought.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.Diagnosis"
              }
            },
            "procedure": {
              "description": "Ordered list of patient procedures performed to support the adjudication.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.Procedure"
              }
            },
            "patientIdentifier": {
              "description": "Patient Resource.",
              "$ref": "#/definitions/Identifier"
            },
            "patientReference": {
              "description": "Patient Resource.",
              "$ref": "#/definitions/Reference"
            },
            "coverage": {
              "description": "Financial instrument by which payment information for health care.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.Coverage"
              }
            },
            "accident": {
              "description": "An accident which resulted in the need for healthcare services.",
              "$ref": "#/definitions/Claim.Accident"
            },
            "item": {
              "description": "First tier of goods and services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.Item"
              }
            },
            "total": {
              "description": "The total value of the claim.",
              "$ref": "#/definitions/Money"
            },
            "missingTeeth": {
              "description": "A list of teeth which would be expected but are not found due to having been previously  extracted or for other reasons.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.MissingTeeth"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Claim.Related": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "claimIdentifier": {
              "description": "Other claims which are related to this claim such as prior claim versions or for related services.",
              "$ref": "#/definitions/Identifier"
            },
            "claimReference": {
              "description": "Other claims which are related to this claim such as prior claim versions or for related services.",
              "$ref": "#/definitions/Reference"
            },
            "relationship": {
              "description": "For example prior or umbrella.",
              "$ref": "#/definitions/Coding"
            },
            "reference": {
              "description": "An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # .",
              "$ref": "#/definitions/Identifier"
            }
          }
        }
      ]
    },
    "Claim.Payee": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "type": {
              "description": "Type of Party to be reimbursed: Subscriber, provider, other.",
              "$ref": "#/definitions/Coding"
            },
            "resourceType": {
              "description": "organization | patient | practitioner | relatedperson.",
              "$ref": "#/definitions/Coding"
            },
            "partyIdentifier": {
              "description": "Party to be reimbursed: Subscriber, provider, other.",
              "$ref": "#/definitions/Identifier"
            },
            "partyReference": {
              "description": "Party to be reimbursed: Subscriber, provider, other.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "Claim.Information": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "category": {
              "description": "The general class of the information supplied: information; exception; accident, employment; onset, etc.",
              "$ref": "#/definitions/Coding"
            },
            "code": {
              "description": "System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication.",
              "$ref": "#/definitions/Coding"
            },
            "reason": {
              "description": "A reason code which supports the reporting of the information code or provides further details for the information code.",
              "$ref": "#/definitions/Coding"
            },
            "timingDate": {
              "description": "The date when or period to which this information refers.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "timingDate_": {
              "description": "Extensions for timingDate",
              "$ref": "#/definitions/Element"
            },
            "timingPeriod": {
              "description": "The date when or period to which this information refers.",
              "$ref": "#/definitions/Period"
            },
            "valueString": {
              "description": "Additional data.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueQuantity": {
              "description": "Additional data.",
              "$ref": "#/definitions/Quantity"
            }
          },
          "required": [
            "category"
          ]
        }
      ]
    },
    "Claim.Diagnosis": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "sequence": {
              "description": "Sequence of diagnosis which serves to order and provide a link.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "diagnosis": {
              "description": "The diagnosis.",
              "$ref": "#/definitions/Coding"
            },
            "type": {
              "description": "The type of the Diagnosis, for example: admitting,.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "drg": {
              "description": "The Diagnosis Related Group (DRG) code based on the assigned grouping code system.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "diagnosis"
          ]
        }
      ]
    },
    "Claim.Procedure": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "sequence": {
              "description": "Sequence of procedures which serves to order and provide a link.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "Date and optionally time the procedure was performed .",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "procedureCoding": {
              "description": "The procedure code.",
              "$ref": "#/definitions/Coding"
            },
            "procedureReference": {
              "description": "The procedure code.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Claim.Coverage": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "sequence": {
              "description": "A service line item.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "focal": {
              "description": "The instance number of the Coverage which is the focus for adjudication. The Coverage against which the claim is to be adjudicated.",
              "type": "true | false"
            },
            "focal_": {
              "description": "Extensions for focal",
              "$ref": "#/definitions/Element"
            },
            "coverageIdentifier": {
              "description": "Reference to the program or plan identification, underwriter or payor.",
              "$ref": "#/definitions/Identifier"
            },
            "coverageReference": {
              "description": "Reference to the program or plan identification, underwriter or payor.",
              "$ref": "#/definitions/Reference"
            },
            "preAuthRef": {
              "description": "A list of references from the Insurer to which these services pertain.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "preAuthRef_": {
              "description": "Extensions for preAuthRef",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "claimResponse": {
              "description": "The Coverages adjudication details.",
              "$ref": "#/definitions/Reference"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            }
          }
        }
      ]
    },
    "Claim.Accident": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "date": {
              "description": "Date of an accident which these services are addressing.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Type of accident: work, auto, etc.",
              "$ref": "#/definitions/Coding"
            },
            "locationAddress": {
              "description": "Accident Place.",
              "$ref": "#/definitions/Address"
            },
            "locationReference": {
              "description": "Accident Place.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Claim.Item": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "sequence": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of product or service.",
              "$ref": "#/definitions/Coding"
            },
            "careTeam": {
              "description": "The members of the team who provided the overall service as well as their role and whether responsible and qualifications.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.CareTeam"
              }
            },
            "diagnosisLinkId": {
              "description": "Diagnosis applicable for this service or product line.",
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "[1-9][0-9]*"
              }
            },
            "diagnosisLinkId_": {
              "description": "Extensions for diagnosisLinkId",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "service": {
              "description": "If a grouping item then \u0027GROUP\u0027 otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.",
              "$ref": "#/definitions/Coding"
            },
            "serviceModifier": {
              "description": "Unusual circumstances which may influence adjudication.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "modifier": {
              "description": "Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or an appliance was lost or stolen.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "programCode": {
              "description": "For programs which require reason codes for the inclusion or covering of this billed item under the program or sub-program.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "servicedDate": {
              "description": "The date or dates when the enclosed suite of services were performed or completed.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "servicedDate_": {
              "description": "Extensions for servicedDate",
              "$ref": "#/definitions/Element"
            },
            "servicedPeriod": {
              "description": "The date or dates when the enclosed suite of services were performed or completed.",
              "$ref": "#/definitions/Period"
            },
            "serviceLocationCoding": {
              "description": "Where the service was provided.",
              "$ref": "#/definitions/Coding"
            },
            "serviceLocationAddress": {
              "description": "Where the service was provided.",
              "$ref": "#/definitions/Address"
            },
            "serviceLocationReference": {
              "description": "Where the service was provided.",
              "$ref": "#/definitions/Reference"
            },
            "quantity": {
              "description": "The number of repetitions of a service or product.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "unitPrice": {
              "description": "If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.",
              "$ref": "#/definitions/Money"
            },
            "factor": {
              "description": "A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "factor_": {
              "description": "Extensions for factor",
              "$ref": "#/definitions/Element"
            },
            "points": {
              "description": "An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the good or service delivered. The concept of Points allows for assignment of point values for services and/or goods, such that a monetary amount can be assigned to each point.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "points_": {
              "description": "Extensions for points",
              "$ref": "#/definitions/Element"
            },
            "net": {
              "description": "The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points \u003d net Amount. Quantity, factor and points are assumed to be 1 if not supplied.",
              "$ref": "#/definitions/Money"
            },
            "udi": {
              "description": "List of Unique Device Identifiers associated with this line item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "bodySite": {
              "description": "Physical service site on the patient (limb, tooth, etc).",
              "$ref": "#/definitions/Coding"
            },
            "subSite": {
              "description": "A region or surface of the site, eg. limb region or tooth surface(s).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "detail": {
              "description": "Second tier of goods and services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.Detail"
              }
            },
            "prosthesis": {
              "description": "The materials and placement date of prior fixed prosthesis.",
              "$ref": "#/definitions/Claim.Prosthesis"
            }
          },
          "required": [
            "service",
            "type"
          ]
        }
      ]
    },
    "Claim.CareTeam": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "providerIdentifier": {
              "description": "The members of the team who provided the overall service.",
              "$ref": "#/definitions/Identifier"
            },
            "providerReference": {
              "description": "The members of the team who provided the overall service.",
              "$ref": "#/definitions/Reference"
            },
            "responsible": {
              "description": "The practitioner who is billing and responsible for the claimed services rendered to the patient.",
              "type": "true | false"
            },
            "responsible_": {
              "description": "Extensions for responsible",
              "$ref": "#/definitions/Element"
            },
            "role": {
              "description": "The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team.",
              "$ref": "#/definitions/Coding"
            },
            "qualification": {
              "description": "The qualification which is applicable for this service.",
              "$ref": "#/definitions/Coding"
            }
          }
        }
      ]
    },
    "Claim.Detail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "sequence": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of product or service.",
              "$ref": "#/definitions/Coding"
            },
            "service": {
              "description": "If a grouping item then \u0027GROUP\u0027 otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.",
              "$ref": "#/definitions/Coding"
            },
            "programCode": {
              "description": "For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "quantity": {
              "description": "The number of repetitions of a service or product.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "unitPrice": {
              "description": "If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.",
              "$ref": "#/definitions/Money"
            },
            "factor": {
              "description": "A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "factor_": {
              "description": "Extensions for factor",
              "$ref": "#/definitions/Element"
            },
            "points": {
              "description": "An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the good or service delivered. The concept of Points allows for assignment of point values for services and/or goods, such that a monetary amount can be assigned to each point.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "points_": {
              "description": "Extensions for points",
              "$ref": "#/definitions/Element"
            },
            "net": {
              "description": "The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points \u003d net Amount. Quantity, factor and points are assumed to be 1 if not supplied.",
              "$ref": "#/definitions/Money"
            },
            "udi": {
              "description": "List of Unique Device Identifiers associated with this line item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "subDetail": {
              "description": "Third tier of goods and services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Claim.SubDetail"
              }
            }
          },
          "required": [
            "service",
            "type"
          ]
        }
      ]
    },
    "Claim.SubDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "sequence": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of product or service.",
              "$ref": "#/definitions/Coding"
            },
            "service": {
              "description": "The fee for an addittional service or product or charge.",
              "$ref": "#/definitions/Coding"
            },
            "programCode": {
              "description": "For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "quantity": {
              "description": "The number of repetitions of a service or product.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "unitPrice": {
              "description": "The fee for an addittional service or product or charge.",
              "$ref": "#/definitions/Money"
            },
            "factor": {
              "description": "A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "factor_": {
              "description": "Extensions for factor",
              "$ref": "#/definitions/Element"
            },
            "points": {
              "description": "An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the good or service delivered. The concept of Points allows for assignment of point values for services and/or goods, such that a monetary amount can be assigned to each point.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "points_": {
              "description": "Extensions for points",
              "$ref": "#/definitions/Element"
            },
            "net": {
              "description": "The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points \u003d net Amount. Quantity, factor and points are assumed to be 1 if not supplied.",
              "$ref": "#/definitions/Money"
            },
            "udi": {
              "description": "List of Unique Device Identifiers associated with this line item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "service",
            "type"
          ]
        }
      ]
    },
    "Claim.Prosthesis": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "initial": {
              "description": "Indicates whether this is the initial placement of a fixed prosthesis.",
              "type": "true | false"
            },
            "initial_": {
              "description": "Extensions for initial",
              "$ref": "#/definitions/Element"
            },
            "priorDate": {
              "description": "Date of the initial placement.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "priorDate_": {
              "description": "Extensions for priorDate",
              "$ref": "#/definitions/Element"
            },
            "priorMaterial": {
              "description": "Material of the prior denture or bridge prosthesis. (Oral).",
              "$ref": "#/definitions/Coding"
            }
          }
        }
      ]
    },
    "Claim.MissingTeeth": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A provider issued list of services and products provided, or to be provided, to a patient which is provided to an insurer for payment recovery.",
          "properties": {
            "tooth": {
              "description": "The code identifying which tooth is missing.",
              "$ref": "#/definitions/Coding"
            },
            "reason": {
              "description": "Missing reason may be: E-extraction, O-other.",
              "$ref": "#/definitions/Coding"
            },
            "extractionDate": {
              "description": "The date of the extraction either known from records or patient reported estimate.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "extractionDate_": {
              "description": "Extensions for extractionDate",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "tooth"
          ]
        }
      ]
    },
    "ClaimResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "resourceType": {
              "description": "This is a ClaimResponse resource",
              "type": "string",
              "enum": [
                "ClaimResponse"
              ]
            },
            "identifier": {
              "description": "The Response business identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "requestIdentifier": {
              "description": "Original request resource referrence.",
              "$ref": "#/definitions/Identifier"
            },
            "requestReference": {
              "description": "Original request resource referrence.",
              "$ref": "#/definitions/Reference"
            },
            "ruleset": {
              "description": "The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when the enclosed suite of services were performed or completed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "organizationIdentifier": {
              "description": "The Insurer who produced this adjudicated response.",
              "$ref": "#/definitions/Identifier"
            },
            "organizationReference": {
              "description": "The Insurer who produced this adjudicated response.",
              "$ref": "#/definitions/Reference"
            },
            "requestProviderIdentifier": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "requestProviderReference": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "requestOrganizationIdentifier": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "requestOrganizationReference": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "outcome": {
              "description": "Processing outcome errror, partial or complete processing.",
              "$ref": "#/definitions/Coding"
            },
            "disposition": {
              "description": "A description of the status of the adjudication.",
              "type": "string"
            },
            "disposition_": {
              "description": "Extensions for disposition",
              "$ref": "#/definitions/Element"
            },
            "payeeType": {
              "description": "Party to be reimbursed: Subscriber, provider, other.",
              "$ref": "#/definitions/Coding"
            },
            "item": {
              "description": "The first tier service adjudications for submitted services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Item"
              }
            },
            "addItem": {
              "description": "The first tier service adjudications for payor added services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.AddItem"
              }
            },
            "error": {
              "description": "Mutually exclusive with Services Provided (Item).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Error"
              }
            },
            "totalCost": {
              "description": "The total cost of the services reported.",
              "$ref": "#/definitions/Money"
            },
            "unallocDeductable": {
              "description": "The amount of deductible applied which was not allocated to any particular service line.",
              "$ref": "#/definitions/Money"
            },
            "totalBenefit": {
              "description": "Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductible).",
              "$ref": "#/definitions/Money"
            },
            "paymentAdjustment": {
              "description": "Adjustment to the payment of this transaction which is not related to adjudication of this transaction.",
              "$ref": "#/definitions/Money"
            },
            "paymentAdjustmentReason": {
              "description": "Reason for the payment adjustment.",
              "$ref": "#/definitions/Coding"
            },
            "paymentDate": {
              "description": "Estimated payment data.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "paymentDate_": {
              "description": "Extensions for paymentDate",
              "$ref": "#/definitions/Element"
            },
            "paymentAmount": {
              "description": "Payable less any payment adjustment.",
              "$ref": "#/definitions/Money"
            },
            "paymentRef": {
              "description": "Payment identifier.",
              "$ref": "#/definitions/Identifier"
            },
            "reserved": {
              "description": "Status of funds reservation (For provider, for Patient, None).",
              "$ref": "#/definitions/Coding"
            },
            "form": {
              "description": "The form to be used for printing the content.",
              "$ref": "#/definitions/Coding"
            },
            "note": {
              "description": "Note text.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Note"
              }
            },
            "coverage": {
              "description": "Financial instrument by which payment information for health care.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Coverage"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "ClaimResponse.Item": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "sequenceLinkId": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequenceLinkId_": {
              "description": "Extensions for sequenceLinkId",
              "$ref": "#/definitions/Element"
            },
            "noteNumber": {
              "description": "A list of note references to the notes provided below.",
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "[1-9][0-9]*"
              }
            },
            "noteNumber_": {
              "description": "Extensions for noteNumber",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Adjudication"
              }
            },
            "detail": {
              "description": "The second tier service adjudications for submitted services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Detail"
              }
            }
          }
        }
      ]
    },
    "ClaimResponse.Adjudication": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "category": {
              "description": "Code indicating: Co-Pay, deductible, eligible, benefit, tax, etc.",
              "$ref": "#/definitions/Coding"
            },
            "reason": {
              "description": "Adjudication reason such as limit reached.",
              "$ref": "#/definitions/Coding"
            },
            "amount": {
              "description": "Monetary amount associated with the code.",
              "$ref": "#/definitions/Money"
            },
            "value": {
              "description": "A non-monetary value for example a percentage. Mutually exclusive to the amount element above.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "category"
          ]
        }
      ]
    },
    "ClaimResponse.Detail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "sequenceLinkId": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequenceLinkId_": {
              "description": "Extensions for sequenceLinkId",
              "$ref": "#/definitions/Element"
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Adjudication"
              }
            },
            "subDetail": {
              "description": "The third tier service adjudications for submitted services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.SubDetail"
              }
            }
          }
        }
      ]
    },
    "ClaimResponse.SubDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "sequenceLinkId": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequenceLinkId_": {
              "description": "Extensions for sequenceLinkId",
              "$ref": "#/definitions/Element"
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Adjudication"
              }
            }
          }
        }
      ]
    },
    "ClaimResponse.AddItem": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "sequenceLinkId": {
              "description": "List of input service items which this service line is intended to replace.",
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "[1-9][0-9]*"
              }
            },
            "sequenceLinkId_": {
              "description": "Extensions for sequenceLinkId",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "service": {
              "description": "A code to indicate the Professional Service or Product supplied.",
              "$ref": "#/definitions/Coding"
            },
            "fee": {
              "description": "The fee charged for the professional service or product..",
              "$ref": "#/definitions/Money"
            },
            "noteNumberLinkId": {
              "description": "A list of note references to the notes provided below.",
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "[1-9][0-9]*"
              }
            },
            "noteNumberLinkId_": {
              "description": "Extensions for noteNumberLinkId",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Adjudication"
              }
            },
            "detail": {
              "description": "The second tier service adjudications for payor added services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Detail1"
              }
            }
          },
          "required": [
            "service"
          ]
        }
      ]
    },
    "ClaimResponse.Detail1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "service": {
              "description": "A code to indicate the Professional Service or Product supplied.",
              "$ref": "#/definitions/Coding"
            },
            "fee": {
              "description": "The fee charged for the professional service or product..",
              "$ref": "#/definitions/Money"
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClaimResponse.Adjudication"
              }
            }
          },
          "required": [
            "service"
          ]
        }
      ]
    },
    "ClaimResponse.Error": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "sequenceLinkId": {
              "description": "The sequence number of the line item submitted which contains the error. This value is omitted when the error is elsewhere.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequenceLinkId_": {
              "description": "Extensions for sequenceLinkId",
              "$ref": "#/definitions/Element"
            },
            "detailSequenceLinkId": {
              "description": "The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "detailSequenceLinkId_": {
              "description": "Extensions for detailSequenceLinkId",
              "$ref": "#/definitions/Element"
            },
            "subdetailSequenceLinkId": {
              "description": "The sequence number of the addition within the line item submitted which contains the error. This value is omitted when the error is not related to an Addition.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "subdetailSequenceLinkId_": {
              "description": "Extensions for subdetailSequenceLinkId",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "An error code,from a specified code system, which details why the claim could not be adjudicated.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "ClaimResponse.Note": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "number": {
              "description": "An integer associated with each note which may be referred to from each service line item.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "number_": {
              "description": "Extensions for number",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The note purpose: Print/Display.",
              "$ref": "#/definitions/Coding"
            },
            "text": {
              "description": "The note text.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ClaimResponse.Coverage": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the adjudication details from the processing of a Claim resource.",
          "properties": {
            "sequence": {
              "description": "A service line item.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "focal": {
              "description": "The instance number of the Coverage which is the focus for adjudication. The Coverage against which the claim is to be adjudicated.",
              "type": "true | false"
            },
            "focal_": {
              "description": "Extensions for focal",
              "$ref": "#/definitions/Element"
            },
            "coverageIdentifier": {
              "description": "Reference to the program or plan identification, underwriter or payor.",
              "$ref": "#/definitions/Identifier"
            },
            "coverageReference": {
              "description": "Reference to the program or plan identification, underwriter or payor.",
              "$ref": "#/definitions/Reference"
            },
            "businessArrangement": {
              "description": "The contract number of a business agreement which describes the terms and conditions.",
              "type": "string"
            },
            "businessArrangement_": {
              "description": "Extensions for businessArrangement",
              "$ref": "#/definitions/Element"
            },
            "preAuthRef": {
              "description": "A list of references from the Insurer to which these services pertain.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "preAuthRef_": {
              "description": "Extensions for preAuthRef",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "claimResponse": {
              "description": "The Coverages adjudication details.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ClinicalImpression": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient\u0027s condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as Apgar score.",
          "properties": {
            "resourceType": {
              "description": "This is a ClinicalImpression resource",
              "type": "string",
              "enum": [
                "ClinicalImpression"
              ]
            },
            "patient": {
              "description": "The patient being assessed.",
              "$ref": "#/definitions/Reference"
            },
            "assessor": {
              "description": "The clinician performing the assessment.",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "Identifies the workflow status of the assessment.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "The point in time at which the assessment was concluded (not when it was recorded).",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A summary of the context and/or cause of the assessment - why / where was it peformed, and what patient events/sstatus prompted it.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "previous": {
              "description": "A reference to the last assesment that was conducted bon this patient. Assessments are often/usually ongoing in nature; a care provider (practitioner or team) will make new assessments on an ongoing basis as new data arises or the patient\u0027s conditions changes.",
              "$ref": "#/definitions/Reference"
            },
            "problem": {
              "description": "This a list of the general problems/conditions for a patient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "triggerCodeableConcept": {
              "description": "The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "triggerReference": {
              "description": "The request or event that necessitated this assessment. This may be a diagnosis, a Care Plan, a Request Referral, or some other resource.",
              "$ref": "#/definitions/Reference"
            },
            "investigations": {
              "description": "One or more sets of investigations (signs, symptions, etc.). The actual grouping of investigations vary greatly depending on the type and context of the assessment. These investigations may include data generated during the assessment process, or data previously generated and recorded that is pertinent to the outcomes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClinicalImpression.Investigations"
              }
            },
            "protocol": {
              "description": "Reference to a specific published clinical protocol that was followed during this assessment, and/or that provides evidence in support of the diagnosis.",
              "type": "string"
            },
            "protocol_": {
              "description": "Extensions for protocol",
              "$ref": "#/definitions/Element"
            },
            "summary": {
              "description": "A text summary of the investigations and the diagnosis.",
              "type": "string"
            },
            "summary_": {
              "description": "Extensions for summary",
              "$ref": "#/definitions/Element"
            },
            "finding": {
              "description": "Specific findings or diagnoses that was considered likely or relevant to ongoing treatment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClinicalImpression.Finding"
              }
            },
            "resolved": {
              "description": "Diagnoses/conditions resolved since the last assessment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "ruledOut": {
              "description": "Diagnosis considered not possible.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ClinicalImpression.RuledOut"
              }
            },
            "prognosis": {
              "description": "Estimate of likely outcome.",
              "type": "string"
            },
            "prognosis_": {
              "description": "Extensions for prognosis",
              "$ref": "#/definitions/Element"
            },
            "plan": {
              "description": "Plan of action after assessment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "action": {
              "description": "Actions taken during assessment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "patient",
            "resourceType"
          ]
        }
      ]
    },
    "ClinicalImpression.Investigations": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient\u0027s condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as Apgar score.",
          "properties": {
            "code": {
              "description": "A name/code for the group (\"set\") of investigations. Typically, this will be something like \"signs\", \"symptoms\", \"clinical\", \"diagnostic\", but the list is not constrained, and others such groups such as (exposure|family|travel|nutitirional) history may be used.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "item": {
              "description": "A record of a specific investigation that was undertaken.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "ClinicalImpression.Finding": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient\u0027s condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as Apgar score.",
          "properties": {
            "item": {
              "description": "Specific text of code for finding or diagnosis.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "cause": {
              "description": "Which investigations support finding or diagnosis.",
              "type": "string"
            },
            "cause_": {
              "description": "Extensions for cause",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "item"
          ]
        }
      ]
    },
    "ClinicalImpression.RuledOut": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of a clinical assessment performed to determine what problem(s) may affect the patient and before planning the treatments or management strategies that are best to manage a patient\u0027s condition. Assessments are often 1:1 with a clinical consultation / encounter,  but this varies greatly depending on the clinical workflow. This resource is called \"ClinicalImpression\" rather than \"ClinicalAssessment\" to avoid confusion with the recording of assessment tools such as Apgar score.",
          "properties": {
            "item": {
              "description": "Specific text of code for diagnosis.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "reason": {
              "description": "Grounds for elimination.",
              "type": "string"
            },
            "reason_": {
              "description": "Extensions for reason",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "item"
          ]
        }
      ]
    },
    "CodeSystem": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A code system resource specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "resourceType": {
              "description": "This is a CodeSystem resource",
              "type": "string",
              "enum": [
                "CodeSystem"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this code system when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this code system is (or will be) published. This is used in [Coding]{datatypes.html#Coding}.system.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Formal identifier that is used to identify this code system when it is represented in other formats, or referenced in a specification, model, design or an instance.",
              "$ref": "#/definitions/Identifier"
            },
            "version": {
              "description": "Used to identify this version of the code system when it is referenced in a specification, model, design or instance (e.g. Coding.version). This is an arbitrary value managed by the profile author manually and the value should be a timestamp. This is used in [Coding]{datatypes.html#Coding}.version.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name describing the code system.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the code system.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "This CodeSystem was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the code system.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeSystem.Contact"
              }
            },
            "date": {
              "description": "The date that the code system status was last changed. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes (e.g. the \u0027content logical definition\u0027).",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the use of the code system - reason for definition, \"the semantic space\" to be included in the code system, conditions of use, etc. The description may include a list of expected usages for the code system and can also describe the approach taken to build the code system.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of code system definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requirements": {
              "description": "Explains why this code system is needed and why it has been constrained as it has.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "copyright": {
              "description": "A copyright statement relating to the code system and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the code system.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "caseSensitive": {
              "description": "If code comparison is case sensitive when codes within this system are compared to each other.",
              "type": "true | false"
            },
            "caseSensitive_": {
              "description": "Extensions for caseSensitive",
              "$ref": "#/definitions/Element"
            },
            "valueSet": {
              "description": "Canonical URL of value set that contains the entire code system.",
              "type": "string"
            },
            "valueSet_": {
              "description": "Extensions for valueSet",
              "$ref": "#/definitions/Element"
            },
            "compositional": {
              "description": "True If code system defines a post-composition grammar.",
              "type": "true | false"
            },
            "compositional_": {
              "description": "Extensions for compositional",
              "$ref": "#/definitions/Element"
            },
            "versionNeeded": {
              "description": "This flag is used to signify that the code system has not (or does not) maintain the definitions, and a version must be specified when referencing this code system.",
              "type": "true | false"
            },
            "versionNeeded_": {
              "description": "Extensions for versionNeeded",
              "$ref": "#/definitions/Element"
            },
            "content": {
              "description": "How much of the content of the code system - the concepts and codes it defines - are represented in this resource.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "content_": {
              "description": "Extensions for content",
              "$ref": "#/definitions/Element"
            },
            "count": {
              "description": "The total number of concepts defined by the code system. Where the code system has a compositional grammar, the count refers to the number of base (primitive) concepts.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "count_": {
              "description": "Extensions for count",
              "$ref": "#/definitions/Element"
            },
            "filter": {
              "description": "A filter that can be used in a value set compose statement when selecting concepts using a filter.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeSystem.Filter"
              }
            },
            "property": {
              "description": "A property defines an additional slot through which additional information can be provided about a concept.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeSystem.Property"
              }
            },
            "concept": {
              "description": "Concepts that are in the code system. The concept definitions are inherently hierarchical, but the definitions must be consulted to determine what the meaning of the hierarchical relationships are.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeSystem.Concept"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "CodeSystem.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A code system resource specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the code system.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "CodeSystem.Filter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A code system resource specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "code": {
              "description": "The code that identifies thise filter when it is used in the instance.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A description of how or why the filter is used.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "operator": {
              "description": "A list of operators that can be used with the filter.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "operator_": {
              "description": "Extensions for operator",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "value": {
              "description": "A description of what the value for the filter should be.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "CodeSystem.Property": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A code system resource specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "code": {
              "description": "A code that is used to identify the property. The code is used internally (in CodeSystem.concept.property.code) and also externally, such as in property filters.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "uri": {
              "description": "Reference to the formal meaning of the property. One possible source of meaning is the [Concept Properties](codesystem-concept-properties.html) code system.",
              "type": "string"
            },
            "uri_": {
              "description": "Extensions for uri",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A description of the property- why it is defined, and how it\u0027s value might be used.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of the property value. Properties of type \"code\" contain a code defined by the code system (e.g. a reference to anotherr defined concept).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "CodeSystem.Concept": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A code system resource specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "code": {
              "description": "A code - a text symbol - that uniquely identifies the concept within the code system.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "display": {
              "description": "A human readable string that is the recommended default way to present this concept to a user.",
              "type": "string"
            },
            "display_": {
              "description": "Extensions for display",
              "$ref": "#/definitions/Element"
            },
            "definition": {
              "description": "The formal definition of the concept. The code system resource does not make formal definitions required, because of the prevalence of legacy systems. However, they are highly recommended, as without them there is no formal meaning associated with the concept.",
              "type": "string"
            },
            "definition_": {
              "description": "Extensions for definition",
              "$ref": "#/definitions/Element"
            },
            "designation": {
              "description": "Additional representations for the concept - other languages, aliases, specialized purposes, used for particular purposes, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeSystem.Designation"
              }
            },
            "property": {
              "description": "A property value for this concept.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeSystem.Property1"
              }
            },
            "concept": {
              "description": "Defines children of a concept to produce a hierarchy of concepts. The nature of the relationships is variable (is-a/contains/categorizes) and can only be determined by examining the definitions of the concepts.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeSystem.Concept"
              }
            }
          }
        }
      ]
    },
    "CodeSystem.Designation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A code system resource specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "language": {
              "description": "The language this designation is defined for.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "language_": {
              "description": "Extensions for language",
              "$ref": "#/definitions/Element"
            },
            "use": {
              "description": "A code that details how this designation would be used.",
              "$ref": "#/definitions/Coding"
            },
            "value": {
              "description": "The text value for this designation.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "CodeSystem.Property1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A code system resource specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "code": {
              "description": "A code that is a reference to CodeSystem.property.code.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "valueCode": {
              "description": "The value of this property.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "valueCode_": {
              "description": "Extensions for valueCode",
              "$ref": "#/definitions/Element"
            },
            "valueCoding": {
              "description": "The value of this property.",
              "$ref": "#/definitions/Coding"
            },
            "valueString": {
              "description": "The value of this property.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueInteger": {
              "description": "The value of this property.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "#/definitions/Element"
            },
            "valueBoolean": {
              "description": "The value of this property.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The value of this property.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Communication": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.",
          "properties": {
            "resourceType": {
              "description": "This is a Communication resource",
              "type": "string",
              "enum": [
                "Communication"
              ]
            },
            "identifier": {
              "description": "Identifiers associated with this Communication that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "category": {
              "description": "The type of message conveyed such as alert, notification, reminder, instruction, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "sender": {
              "description": "The entity (e.g. person, organization, clinical information system, or device) which was the source of the communication.",
              "$ref": "#/definitions/Reference"
            },
            "recipient": {
              "description": "The entity (e.g. person, organization, clinical information system, or device) which was the target of the communication. If receipts need to be tracked by individual, a separate resource instance will need to be created for each recipient.  Multiple recipient communications are intended where either a receipt(s) is not tracked (e.g. a mass mail-out) or is captured in aggregate (all emails confirmed received by a particular time).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "payload": {
              "description": "Text, attachment(s), or resource(s) that was communicated to the recipient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Communication.Payload"
              }
            },
            "medium": {
              "description": "A channel that was used for this communication (e.g. email, fax).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "status": {
              "description": "The status of the transmission.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "encounter": {
              "description": "The encounter within which the communication was sent.",
              "$ref": "#/definitions/Reference"
            },
            "sent": {
              "description": "The time when this communication was sent.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "sent_": {
              "description": "Extensions for sent",
              "$ref": "#/definitions/Element"
            },
            "received": {
              "description": "The time when this communication arrived at the destination.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "received_": {
              "description": "Extensions for received",
              "$ref": "#/definitions/Element"
            },
            "reason": {
              "description": "The reason or justification for the communication.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "subject": {
              "description": "The patient who was the focus of this communication.",
              "$ref": "#/definitions/Reference"
            },
            "requestDetail": {
              "description": "The communication request that was responsible for producing this communication.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Communication.Payload": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An occurrence of information being transmitted; e.g. an alert that was sent to a responsible provider, a public health agency was notified about a reportable condition.",
          "properties": {
            "contentString": {
              "description": "A communicated content (or for multi-part communications, one portion of the communication).",
              "type": "string"
            },
            "contentString_": {
              "description": "Extensions for contentString",
              "$ref": "#/definitions/Element"
            },
            "contentAttachment": {
              "description": "A communicated content (or for multi-part communications, one portion of the communication).",
              "$ref": "#/definitions/Attachment"
            },
            "contentReference": {
              "description": "A communicated content (or for multi-part communications, one portion of the communication).",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "CommunicationRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.",
          "properties": {
            "resourceType": {
              "description": "This is a CommunicationRequest resource",
              "type": "string",
              "enum": [
                "CommunicationRequest"
              ]
            },
            "identifier": {
              "description": "A unique ID of this request for reference purposes. It must be provided if user wants it returned as part of any output, otherwise it will be autogenerated, if needed, by CDS system. Does not need to be the actual ID of the source system.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "category": {
              "description": "The type of message to be sent such as alert, notification, reminder, instruction, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "sender": {
              "description": "The entity (e.g. person, organization, clinical information system, or device) which is to be the source of the communication.",
              "$ref": "#/definitions/Reference"
            },
            "recipient": {
              "description": "The entity (e.g. person, organization, clinical information system, device, group, or care team) which is the intended target of the communication.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "payload": {
              "description": "Text, attachment(s), or resource(s) to be communicated to the recipient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CommunicationRequest.Payload"
              }
            },
            "medium": {
              "description": "A channel that was used for this communication (e.g. email, fax).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requester": {
              "description": "The responsible person who authorizes this order, e.g. physician. This may be different than the author of the order statement, e.g. clerk, who may have entered the statement into the order entry application.",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "The status of the proposal or order.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "encounter": {
              "description": "The encounter within which the communication request was created.",
              "$ref": "#/definitions/Reference"
            },
            "scheduledDateTime": {
              "description": "The time when this communication is to occur.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "scheduledDateTime_": {
              "description": "Extensions for scheduledDateTime",
              "$ref": "#/definitions/Element"
            },
            "scheduledPeriod": {
              "description": "The time when this communication is to occur.",
              "$ref": "#/definitions/Period"
            },
            "reason": {
              "description": "The reason or justification for the communication request.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requestedOn": {
              "description": "The time when the request was made.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "requestedOn_": {
              "description": "Extensions for requestedOn",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "The patient who is the focus of this communication request.",
              "$ref": "#/definitions/Reference"
            },
            "priority": {
              "description": "Characterizes how quickly the proposed act must be initiated. Includes concepts such as stat, urgent, routine.",
              "$ref": "#/definitions/CodeableConcept"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "CommunicationRequest.Payload": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.",
          "properties": {
            "contentString": {
              "description": "The communicated content (or for multi-part communications, one portion of the communication).",
              "type": "string"
            },
            "contentString_": {
              "description": "Extensions for contentString",
              "$ref": "#/definitions/Element"
            },
            "contentAttachment": {
              "description": "The communicated content (or for multi-part communications, one portion of the communication).",
              "$ref": "#/definitions/Attachment"
            },
            "contentReference": {
              "description": "The communicated content (or for multi-part communications, one portion of the communication).",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "CompartmentDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A compartment definition that defines how resources are accessed on a server.",
          "properties": {
            "resourceType": {
              "description": "This is a CompartmentDefinition resource",
              "type": "string",
              "enum": [
                "CompartmentDefinition"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this compartment definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this compartment definition is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name identifying the compartment definition.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of this compartment definition definition.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "A flag to indicate that this compartment definition definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the compartment definition.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompartmentDefinition.Contact"
              }
            },
            "date": {
              "description": "The date  (and optionally time) when the compartment definition definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the compartment definition changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the CompartmentDefinition and its use.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "requirements": {
              "description": "The Scope and Usage that this compartment definition was created to meet.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "Which compartment this definition describes.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "search": {
              "description": "Whether the search syntax is supported.",
              "type": "true | false"
            },
            "search_": {
              "description": "Extensions for search",
              "$ref": "#/definitions/Element"
            },
            "resource": {
              "description": "Information about how a resource it related to the compartment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompartmentDefinition.Resource"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "CompartmentDefinition.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A compartment definition that defines how resources are accessed on a server.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the compartment definition.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "CompartmentDefinition.Resource": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A compartment definition that defines how resources are accessed on a server.",
          "properties": {
            "code": {
              "description": "The name of a resource supported by the server.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "param": {
              "description": "The name of a search parameter that represents the link to the compartment. More than one may be listed because a resource may be linked to a compartment more than one way.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "param_": {
              "description": "Extensions for param",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "documentation": {
              "description": "Additional doco about the resource and compartment.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Composition": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.",
          "properties": {
            "resourceType": {
              "description": "This is a Composition resource",
              "type": "string",
              "enum": [
                "Composition"
              ]
            },
            "identifier": {
              "description": "Logical identifier for the composition, assigned when created. This identifier stays constant as the composition is changed over time.",
              "$ref": "#/definitions/Identifier"
            },
            "date": {
              "description": "The composition editing time, when the composition was last logically changed by the author.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Specifies the particular kind of composition (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the composition.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "class": {
              "description": "A categorization for the type of the composition - helps for indexing and searching. This may be implied by or derived from the code specified in the Composition Type.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "title": {
              "description": "Official human-readable label for the composition.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The workflow/clinical status of this composition. The status is a marker for the clinical standing of the document.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "confidentiality": {
              "description": "The code specifying the level of confidentiality of the Composition.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "confidentiality_": {
              "description": "Extensions for confidentiality",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "Who or what the composition is about. The composition can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of livestock, or a set of patients that share a common exposure).",
              "$ref": "#/definitions/Reference"
            },
            "author": {
              "description": "Identifies who is responsible for the information in the composition, not necessarily who typed it in.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "attester": {
              "description": "A participant who has attested to the accuracy of the composition/document.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Composition.Attester"
              }
            },
            "custodian": {
              "description": "Identifies the organization or group who is responsible for ongoing maintenance of and access to the composition/document information.",
              "$ref": "#/definitions/Reference"
            },
            "event": {
              "description": "The clinical service, such as a colonoscopy or an appendectomy, being documented.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Composition.Event"
              }
            },
            "encounter": {
              "description": "Describes the clinical encounter or type of care this documentation is associated with.",
              "$ref": "#/definitions/Reference"
            },
            "section": {
              "description": "The root of the sections that make up the composition.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Composition.Section"
              }
            }
          },
          "required": [
            "subject",
            "author",
            "type",
            "resourceType"
          ]
        }
      ]
    },
    "Composition.Attester": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.",
          "properties": {
            "mode": {
              "description": "The type of attestation the authenticator offers.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "mode_": {
              "description": "Extensions for mode",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "time": {
              "description": "When composition was attested by the party.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "time_": {
              "description": "Extensions for time",
              "$ref": "#/definitions/Element"
            },
            "party": {
              "description": "Who attested the composition in the specified way.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Composition.Event": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.",
          "properties": {
            "code": {
              "description": "This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a \"History and Physical Report\" in which the procedure being documented is necessarily a \"History and Physical\" act.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "period": {
              "description": "The period of time covered by the documentation. There is no assertion that the documentation is a complete representation for this period, only that it documents events during this time.",
              "$ref": "#/definitions/Period"
            },
            "detail": {
              "description": "The description and/or reference of the event(s) being documented. For example, this could be used to document such a colonoscopy or an appendectomy.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "Composition.Section": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of healthcare-related information that is assembled together into a single logical document that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. While a Composition defines the structure, it does not actually contain the content: rather the full content of a document is contained in a Bundle, of which the Composition is the first resource contained.",
          "properties": {
            "title": {
              "description": "The label for this particular section.  This will be part of the rendered content for the document, and is often used to build a table of contents.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "A code identifying the kind of content contained within the section. This must be consistent with the section title.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "text": {
              "description": "A human-readable narrative that contains the attested content of the section, used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative.",
              "$ref": "#/definitions/Narrative"
            },
            "mode": {
              "description": "How the entry list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "#/definitions/Element"
            },
            "orderedBy": {
              "description": "Specifies the order applied to the items in the section entries.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "entry": {
              "description": "A reference to the actual resource from which the narrative in the section is derived.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "emptyReason": {
              "description": "If the section is empty, why the list is empty. An empty section typically has some text explaining the empty reason.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "section": {
              "description": "A nested sub-section within this section.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Composition.Section"
              }
            }
          }
        }
      ]
    },
    "ConceptMap": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.",
          "properties": {
            "resourceType": {
              "description": "This is a ConceptMap resource",
              "type": "string",
              "enum": [
                "ConceptMap"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this concept map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this concept map is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Formal identifier that is used to identify this concept map when it is represented in other formats, or referenced in a specification, model, design or an instance.",
              "$ref": "#/definitions/Identifier"
            },
            "version": {
              "description": "The identifier that is used to identify this version of the concept map when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name describing the concept map.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the concept map.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "This ConceptMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the concept map.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConceptMap.Contact"
              }
            },
            "date": {
              "description": "The date this version of the concept map was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the concept map changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the use of the concept map - reason for definition, conditions of use, etc.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of concept map instances.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requirements": {
              "description": "Explains why this concept map is needed and why it has been constrained as it has.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "copyright": {
              "description": "A copyright statement relating to the concept map and/or its contents.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "sourceUri": {
              "description": "The source value set that specifies the concepts that are being mapped.",
              "type": "string"
            },
            "sourceUri_": {
              "description": "Extensions for sourceUri",
              "$ref": "#/definitions/Element"
            },
            "sourceReference": {
              "description": "The source value set that specifies the concepts that are being mapped.",
              "$ref": "#/definitions/Reference"
            },
            "targetUri": {
              "description": "The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.",
              "type": "string"
            },
            "targetUri_": {
              "description": "Extensions for targetUri",
              "$ref": "#/definitions/Element"
            },
            "targetReference": {
              "description": "The target value set provides context to the mappings. Note that the mapping is made between concepts, not between value sets, but the value set provides important context about how the concept mapping choices are made.",
              "$ref": "#/definitions/Reference"
            },
            "element": {
              "description": "Mappings for an individual concept in the source to one or more concepts in the target.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConceptMap.Element"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "ConceptMap.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the concept map.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "ConceptMap.Element": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.",
          "properties": {
            "system": {
              "description": "An absolute URI that identifies the Code System (if the source is a value set that crosses more than one code system).",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The specific version of the code system, as determined by the code system authority.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "Identity (code or path) or the element/item being mapped.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "target": {
              "description": "A concept from the target value set that this concept maps to.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConceptMap.Target"
              }
            }
          }
        }
      ]
    },
    "ConceptMap.Target": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.",
          "properties": {
            "system": {
              "description": "An absolute URI that identifies the code system of the target code (if the target is a value set that cross code systems).",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The specific version of the code system, as determined by the code system authority.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "Identity (code or path) or the element/item that the map refers to.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "equivalence": {
              "description": "The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is \u0027wider\u0027 than the source).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "equivalence_": {
              "description": "Extensions for equivalence",
              "$ref": "#/definitions/Element"
            },
            "comments": {
              "description": "A description of status/issues in mapping that conveys additional information not represented in  the structured data.",
              "type": "string"
            },
            "comments_": {
              "description": "Extensions for comments",
              "$ref": "#/definitions/Element"
            },
            "dependsOn": {
              "description": "A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConceptMap.DependsOn"
              }
            },
            "product": {
              "description": "A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConceptMap.DependsOn"
              }
            }
          }
        }
      ]
    },
    "ConceptMap.DependsOn": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A statement of relationships from one set of concepts to one or more other concepts - either code systems or data elements, or classes in class models.",
          "properties": {
            "element": {
              "description": "A reference to a specific concept that holds a coded value. This can be an element in a FHIR resource, or a specific reference to a data element in a different specification (e.g. HL7 v2) or a general reference to a kind of data field, or a reference to a value set with an appropriately narrow definition.",
              "type": "string"
            },
            "element_": {
              "description": "Extensions for element",
              "$ref": "#/definitions/Element"
            },
            "system": {
              "description": "An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems).",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "Identity (code or path) or the element/item/ValueSet that the map depends on / refers to.",
              "type": "string"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Condition": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.",
          "properties": {
            "resourceType": {
              "description": "This is a Condition resource",
              "type": "string",
              "enum": [
                "Condition"
              ]
            },
            "identifier": {
              "description": "This records identifiers associated with this condition that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "patient": {
              "description": "Indicates the patient who the condition record is associated with.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "Encounter during which the condition was first asserted.",
              "$ref": "#/definitions/Reference"
            },
            "asserter": {
              "description": "Individual who is making the condition statement.",
              "$ref": "#/definitions/Reference"
            },
            "dateRecorded": {
              "description": "A date, when  the Condition statement was documented.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "dateRecorded_": {
              "description": "Extensions for dateRecorded",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "Identification of the condition, problem or diagnosis.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "category": {
              "description": "A category assigned to the condition.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "clinicalStatus": {
              "description": "The clinical status of the condition.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "clinicalStatus_": {
              "description": "Extensions for clinicalStatus",
              "$ref": "#/definitions/Element"
            },
            "verificationStatus": {
              "description": "The verification status to support the clinical status of the condition.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "verificationStatus_": {
              "description": "Extensions for verificationStatus",
              "$ref": "#/definitions/Element"
            },
            "severity": {
              "description": "A subjective assessment of the severity of the condition as evaluated by the clinician.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "onsetDateTime": {
              "description": "Estimated or actual date or date-time  the condition began, in the opinion of the clinician.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "onsetDateTime_": {
              "description": "Extensions for onsetDateTime",
              "$ref": "#/definitions/Element"
            },
            "onsetAge": {
              "description": "Estimated or actual date or date-time  the condition began, in the opinion of the clinician.",
              "$ref": "#/definitions/Age"
            },
            "onsetPeriod": {
              "description": "Estimated or actual date or date-time  the condition began, in the opinion of the clinician.",
              "$ref": "#/definitions/Period"
            },
            "onsetRange": {
              "description": "Estimated or actual date or date-time  the condition began, in the opinion of the clinician.",
              "$ref": "#/definitions/Range"
            },
            "onsetString": {
              "description": "Estimated or actual date or date-time  the condition began, in the opinion of the clinician.",
              "type": "string"
            },
            "onsetString_": {
              "description": "Extensions for onsetString",
              "$ref": "#/definitions/Element"
            },
            "abatementDateTime": {
              "description": "The date or estimated date that the condition resolved or went into remission. This is called \"abatement\" because of the many overloaded connotations associated with \"remission\" or \"resolution\" - Conditions are never really resolved, but they can abate.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "abatementDateTime_": {
              "description": "Extensions for abatementDateTime",
              "$ref": "#/definitions/Element"
            },
            "abatementAge": {
              "description": "The date or estimated date that the condition resolved or went into remission. This is called \"abatement\" because of the many overloaded connotations associated with \"remission\" or \"resolution\" - Conditions are never really resolved, but they can abate.",
              "$ref": "#/definitions/Age"
            },
            "abatementBoolean": {
              "description": "The date or estimated date that the condition resolved or went into remission. This is called \"abatement\" because of the many overloaded connotations associated with \"remission\" or \"resolution\" - Conditions are never really resolved, but they can abate.",
              "type": "true | false"
            },
            "abatementBoolean_": {
              "description": "Extensions for abatementBoolean",
              "$ref": "#/definitions/Element"
            },
            "abatementPeriod": {
              "description": "The date or estimated date that the condition resolved or went into remission. This is called \"abatement\" because of the many overloaded connotations associated with \"remission\" or \"resolution\" - Conditions are never really resolved, but they can abate.",
              "$ref": "#/definitions/Period"
            },
            "abatementRange": {
              "description": "The date or estimated date that the condition resolved or went into remission. This is called \"abatement\" because of the many overloaded connotations associated with \"remission\" or \"resolution\" - Conditions are never really resolved, but they can abate.",
              "$ref": "#/definitions/Range"
            },
            "abatementString": {
              "description": "The date or estimated date that the condition resolved or went into remission. This is called \"abatement\" because of the many overloaded connotations associated with \"remission\" or \"resolution\" - Conditions are never really resolved, but they can abate.",
              "type": "string"
            },
            "abatementString_": {
              "description": "Extensions for abatementString",
              "$ref": "#/definitions/Element"
            },
            "stage": {
              "description": "Clinical stage or grade of a condition. May include formal severity assessments.",
              "$ref": "#/definitions/Condition.Stage"
            },
            "evidence": {
              "description": "Supporting Evidence / manifestations that are the basis on which this condition is suspected or confirmed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Condition.Evidence"
              }
            },
            "bodySite": {
              "description": "The anatomical location where this condition manifests itself.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "note": {
              "description": "Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            }
          },
          "required": [
            "code",
            "patient",
            "resourceType"
          ]
        }
      ]
    },
    "Condition.Stage": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.",
          "properties": {
            "summary": {
              "description": "A simple summary of the stage such as \"Stage 3\". The determination of the stage is disease-specific.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "assessment": {
              "description": "Reference to a formal record of the evidence on which the staging assessment is based.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "Condition.Evidence": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Use to record detailed information about conditions, problems or diagnoses recognized by a clinician. There are many uses including: recording a diagnosis during an encounter; populating a problem list or a summary statement, such as a discharge summary.",
          "properties": {
            "code": {
              "description": "A manifestation or symptom that led to the recording of this condition.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "detail": {
              "description": "Links to other relevant information, including pathology reports.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "Conformance": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "resourceType": {
              "description": "This is a Conformance resource",
              "type": "string",
              "enum": [
                "Conformance"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this conformance statement when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this conformance statement is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The identifier that is used to identify this version of the conformance statement when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name identifying the conformance statement.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of this conformance statement.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "A flag to indicate that this conformance statement is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "The date  (and optionally time) when the conformance statement was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the conformance statement changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the conformance.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Contact"
              }
            },
            "description": {
              "description": "A free text natural language description of the conformance statement and its use. Typically, this is used when the conformance statement describes a desired rather than an actual solution, for example as a formal expression of requirements as part of an RFP.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of conformance statements.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requirements": {
              "description": "Explains why this conformance statement is needed and why it\u0027s been constrained as it has.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "copyright": {
              "description": "A copyright statement relating to the conformance statement and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the system described by the conformance statement.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "kind": {
              "description": "The way that this statement is intended to be used, to describe an actual running instance of software, a particular product (kind not instance of software) or a class of implementation (e.g. a desired purchase).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "kind_": {
              "description": "Extensions for kind",
              "$ref": "#/definitions/Element"
            },
            "software": {
              "description": "Software that is covered by this conformance statement.  It is used when the conformance statement describes the capabilities of a particular software version, independent of an installation.",
              "$ref": "#/definitions/Conformance.Software"
            },
            "implementation": {
              "description": "Identifies a specific implementation instance that is described by the conformance statement - i.e. a particular installation, rather than the capabilities of a software program.",
              "$ref": "#/definitions/Conformance.Implementation"
            },
            "fhirVersion": {
              "description": "The version of the FHIR specification on which this conformance statement is based.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "fhirVersion_": {
              "description": "Extensions for fhirVersion",
              "$ref": "#/definitions/Element"
            },
            "acceptUnknown": {
              "description": "A code that indicates whether the application accepts unknown elements or extensions when reading resources.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "acceptUnknown_": {
              "description": "Extensions for acceptUnknown",
              "$ref": "#/definitions/Element"
            },
            "format": {
              "description": "A list of the formats supported by this implementation using their content types.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "format_": {
              "description": "Extensions for format",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "profile": {
              "description": "A list of profiles that represent different use cases supported by the system. For a server, \"supported by the system\" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles]{profiling.html#profile-uses}.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "rest": {
              "description": "A definition of the restful capabilities of the solution, if any.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Rest"
              }
            },
            "messaging": {
              "description": "A description of the messaging capabilities of the solution.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Messaging"
              }
            },
            "document": {
              "description": "A document definition.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Document"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Conformance.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the conformance.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "Conformance.Software": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "name": {
              "description": "Name software is known by.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version identifier for the software covered by this statement.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "releaseDate": {
              "description": "Date this version of the software released.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "releaseDate_": {
              "description": "Extensions for releaseDate",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Conformance.Implementation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "description": {
              "description": "Information about the specific installation that this conformance statement relates to.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "url": {
              "description": "An absolute base URL for the implementation.  This forms the base for REST interfaces as well as the mailbox and document interfaces.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Conformance.Rest": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "mode": {
              "description": "Identifies whether this portion of the statement is describing ability to initiate or receive restful operations.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "Information about the system\u0027s restful capabilities that apply across all applications, such as security.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            },
            "security": {
              "description": "Information about security implementation from an interface perspective - what a client needs to know.",
              "$ref": "#/definitions/Conformance.Security"
            },
            "resource": {
              "description": "A specification of the restful capabilities of the solution for a specific resource type.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Resource"
              }
            },
            "interaction": {
              "description": "A specification of restful operations supported by the system.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Interaction1"
              }
            },
            "transactionMode": {
              "description": "A code that indicates how transactions are supported.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "transactionMode_": {
              "description": "Extensions for transactionMode",
              "$ref": "#/definitions/Element"
            },
            "searchParam": {
              "description": "Search parameters that are supported for searching all resources for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.SearchParam"
              }
            },
            "operation": {
              "description": "Definition of an operation or a named query and with its parameters and their meaning and type.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Operation"
              }
            },
            "compartment": {
              "description": "An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by it\u0027s canonical URL.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "compartment_": {
              "description": "Extensions for compartment",
              "items": {
                "$ref": "#/definitions/Element"
              }
            }
          }
        }
      ]
    },
    "Conformance.Security": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "cors": {
              "description": "Server adds CORS headers when responding to requests - this enables javascript applications to use the server.",
              "type": "true | false"
            },
            "cors_": {
              "description": "Extensions for cors",
              "$ref": "#/definitions/Element"
            },
            "service": {
              "description": "Types of security services are supported/required by the system.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "description": {
              "description": "General description of how security works.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "certificate": {
              "description": "Certificates associated with security profiles.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Certificate"
              }
            }
          }
        }
      ]
    },
    "Conformance.Certificate": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "type": {
              "description": "Mime type for certificate.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "blob": {
              "description": "Actual certificate.",
              "type": "string"
            },
            "blob_": {
              "description": "Extensions for blob",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Conformance.Resource": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "type": {
              "description": "A type of resource exposed via the restful interface.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "A specification of the profile that describes the solution\u0027s overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles]{profiling.html#profile-uses}.",
              "$ref": "#/definitions/Reference"
            },
            "interaction": {
              "description": "Identifies a restful operation supported by the solution.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Interaction"
              }
            },
            "versioning": {
              "description": "This field is set to no-version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta-property on resources. If the value is \u0027versioned-update\u0027, then the server supports all the versioning features, including using e-tags for version integrity in the API.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "versioning_": {
              "description": "Extensions for versioning",
              "$ref": "#/definitions/Element"
            },
            "readHistory": {
              "description": "A flag for whether the server is able to return past versions as part of the vRead operation.",
              "type": "true | false"
            },
            "readHistory_": {
              "description": "Extensions for readHistory",
              "$ref": "#/definitions/Element"
            },
            "updateCreate": {
              "description": "A flag to indicate that the server allows or needs to allow the client to create new identities on the server (e.g. that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server.",
              "type": "true | false"
            },
            "updateCreate_": {
              "description": "Extensions for updateCreate",
              "$ref": "#/definitions/Element"
            },
            "conditionalCreate": {
              "description": "A flag that indicates that the server supports conditional create.",
              "type": "true | false"
            },
            "conditionalCreate_": {
              "description": "Extensions for conditionalCreate",
              "$ref": "#/definitions/Element"
            },
            "conditionalUpdate": {
              "description": "A flag that indicates that the server supports conditional update.",
              "type": "true | false"
            },
            "conditionalUpdate_": {
              "description": "Extensions for conditionalUpdate",
              "$ref": "#/definitions/Element"
            },
            "conditionalDelete": {
              "description": "A code that indicates how the server supports conditional delete.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "conditionalDelete_": {
              "description": "Extensions for conditionalDelete",
              "$ref": "#/definitions/Element"
            },
            "searchInclude": {
              "description": "A list of _include values supported by the server.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "searchInclude_": {
              "description": "Extensions for searchInclude",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "searchRevInclude": {
              "description": "A list of _revinclude (reverse include) values supported by the server.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "searchRevInclude_": {
              "description": "Extensions for searchRevInclude",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "searchParam": {
              "description": "Search parameters for implementations to support and/or make use of - either references to ones defined in the specification, or additional ones defined for/by the implementation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.SearchParam"
              }
            }
          },
          "required": [
            "interaction"
          ]
        }
      ]
    },
    "Conformance.Interaction": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "code": {
              "description": "Coded identifier of the operation, supported by the system resource.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "Guidance specific to the implementation of this operation, such as \u0027delete is a logical delete\u0027 or \u0027updates are only allowed with version id\u0027 or \u0027creates permitted from pre-authorized certificates only\u0027.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Conformance.SearchParam": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "name": {
              "description": "The name of the search parameter used in the interface.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "definition": {
              "description": "An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [[[SearchParameter.url]]]).",
              "type": "string"
            },
            "definition_": {
              "description": "Extensions for definition",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of value a search parameter refers to, and how the content is interpreted.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            },
            "target": {
              "description": "Types of resource (if a resource is referenced).",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "target_": {
              "description": "Extensions for target",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "modifier": {
              "description": "A modifier supported for the search parameter.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "modifier_": {
              "description": "Extensions for modifier",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "chain": {
              "description": "Contains the names of any search parameters which may be chained to the containing search parameter. Chained parameters may be added to search parameters of type reference, and specify that resources will only be returned if they contain a reference to a resource which matches the chained parameter value. Values for this field should be drawn from Conformance.rest.resource.searchParam.name on the target resource type.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "chain_": {
              "description": "Extensions for chain",
              "items": {
                "$ref": "#/definitions/Element"
              }
            }
          }
        }
      ]
    },
    "Conformance.Interaction1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "code": {
              "description": "A coded identifier of the operation, supported by the system.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "Guidance specific to the implementation of this operation, such as limitations on the kind of transactions allowed, or information about system wide search is implemented.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Conformance.Operation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "name": {
              "description": "The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the url. For a query, this is the name used in the _query parameter when the query is called.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "definition": {
              "description": "Where the formal definition can be found.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "definition"
          ]
        }
      ]
    },
    "Conformance.Messaging": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "endpoint": {
              "description": "An endpoint (network accessible address) to which messages and/or replies are to be sent.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Endpoint"
              }
            },
            "reliableCache": {
              "description": "Length if the receiver\u0027s reliable messaging cache in minutes (if a receiver) or how long the cache length on the receiver should be (if a sender).",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "reliableCache_": {
              "description": "Extensions for reliableCache",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "Documentation about the system\u0027s messaging capabilities for this endpoint not otherwise documented by the conformance statement.  For example, process for becoming an authorized messaging exchange partner.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            },
            "event": {
              "description": "A description of the solution\u0027s support for an event at this end-point.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Conformance.Event"
              }
            }
          },
          "required": [
            "event"
          ]
        }
      ]
    },
    "Conformance.Endpoint": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "protocol": {
              "description": "A list of the messaging transport protocol(s) identifiers, supported by this endpoint.",
              "$ref": "#/definitions/Coding"
            },
            "address": {
              "description": "The network address of the end-point. For solutions that do not use network addresses for routing, it can be just an identifier.",
              "type": "string"
            },
            "address_": {
              "description": "Extensions for address",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "protocol"
          ]
        }
      ]
    },
    "Conformance.Event": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "code": {
              "description": "A coded identifier of a supported messaging event.",
              "$ref": "#/definitions/Coding"
            },
            "category": {
              "description": "The impact of the content of the message.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "category_": {
              "description": "Extensions for category",
              "$ref": "#/definitions/Element"
            },
            "mode": {
              "description": "The mode of this event declaration - whether application is sender or receiver.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "#/definitions/Element"
            },
            "focus": {
              "description": "A resource associated with the event.  This is the resource that defines the event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "focus_": {
              "description": "Extensions for focus",
              "$ref": "#/definitions/Element"
            },
            "request": {
              "description": "Information about the request for this event.",
              "$ref": "#/definitions/Reference"
            },
            "response": {
              "description": "Information about the response for this event.",
              "$ref": "#/definitions/Reference"
            },
            "documentation": {
              "description": "Guidance on how this event is handled, such as internal system trigger points, business rules, etc.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "request",
            "code",
            "response"
          ]
        }
      ]
    },
    "Conformance.Document": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A conformance statement is a set of capabilities of a FHIR Server that may be used as a statement of actual server functionality or a statement of required or desired server implementation.",
          "properties": {
            "mode": {
              "description": "Mode of this document declaration - whether application is producer or consumer.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "A description of how the application supports or uses the specified document profile.  For example, when are documents created, what action is taken with consumed documents, etc.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "A constraint on a resource used in the document.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "profile"
          ]
        }
      ]
    },
    "Consent": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A record of a healthcare consumer’s privacy policy, which is in accordance with governing jurisdictional and organization privacy policies that grant or withhold consent:.",
          "properties": {
            "resourceType": {
              "description": "This is a Consent resource",
              "type": "string",
              "enum": [
                "Consent"
              ]
            },
            "identifier": {
              "description": "Unique identifier for this Consent.",
              "$ref": "#/definitions/Identifier"
            },
            "status": {
              "description": "Indicates the current state of this consent.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Type of Consent such as an insurance policy, real estate consent, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc. opt-in, opt-out, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "issued": {
              "description": "When this  Consent was issued.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "issued_": {
              "description": "Extensions for issued",
              "$ref": "#/definitions/Element"
            },
            "applies": {
              "description": "Relevant time or time-period when this Consent is applicable.",
              "$ref": "#/definitions/Period"
            },
            "patient": {
              "description": "The patent under which this consent applies.",
              "$ref": "#/definitions/Reference"
            },
            "authority": {
              "description": "A recognized organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of consents and policies.  When empty, there Consent is under the authority of he Patient alone.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "domain": {
              "description": "Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "recipient": {
              "description": "Who or what is granted authority under this Consent.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "grantor": {
              "description": "Who grants the authority under this Consent. If empty, the grantor is assumed to be the Patient themselves.",
              "$ref": "#/definitions/Reference"
            },
            "data": {
              "description": "The data covered by this consent.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "action": {
              "description": "Actions controlled by this Consent.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "except": {
              "description": "One or more exceptions to the base policy of this Consent.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Consent.Except"
              }
            },
            "contentAttachment": {
              "description": "Consent legal text in human renderable form.",
              "$ref": "#/definitions/Attachment"
            },
            "contentReference": {
              "description": "Consent legal text in human renderable form.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "patient",
            "type",
            "resourceType"
          ]
        }
      ]
    },
    "Consent.Except": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of a healthcare consumer’s privacy policy, which is in accordance with governing jurisdictional and organization privacy policies that grant or withhold consent:.",
          "properties": {
            "type": {
              "description": "Type exception to the base Consent policy such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "period": {
              "description": "Relevant time or time-period when this Consent Exception is applicable.",
              "$ref": "#/definitions/Period"
            },
            "actor": {
              "description": "An Actor subject to this exception.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "data": {
              "description": "The Reference of concern in the context of this exception of the agrement.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "action": {
              "description": "Action stipulated by this Consent Exception.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "Contract": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "resourceType": {
              "description": "This is a Contract resource",
              "type": "string",
              "enum": [
                "Contract"
              ]
            },
            "identifier": {
              "description": "Unique identifier for this Contract.",
              "$ref": "#/definitions/Identifier"
            },
            "issued": {
              "description": "When this  Contract was issued.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "issued_": {
              "description": "Extensions for issued",
              "$ref": "#/definitions/Element"
            },
            "applies": {
              "description": "Relevant time or time-period when this Contract is applicable.",
              "$ref": "#/definitions/Period"
            },
            "subject": {
              "description": "The target entity impacted by or of interest to parties to the agreement.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "topic": {
              "description": "The matter of concern in the context of this agreement.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "authority": {
              "description": "A formally or informally recognized grouping of people, principals, organizations, or jurisdictions formed for the purpose of achieving some form of collective action such as the promulgation, administration and enforcement of contracts and policies.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "domain": {
              "description": "Recognized governance framework or system operating with a circumscribed scope in accordance with specified principles, policies, processes or procedures for managing rights, actions, or behaviors of parties or principals relative to resources.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "type": {
              "description": "Type of Contract such as an insurance policy, real estate contract, a will, power of attorny, Privacy or Security policy , trust framework agreement, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "subType": {
              "description": "More specific type or specialization of an overarching or more general contract such as auto insurance, home owner  insurance, prenupial agreement, Advanced-Directive, or privacy consent.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "action": {
              "description": "Action stipulated by this Contract.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "actionReason": {
              "description": "Reason for action stipulated by this Contract.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "agent": {
              "description": "An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.Agent"
              }
            },
            "signer": {
              "description": "Parties with legal standing in the Contract, including the principal parties, the grantor(s) and grantee(s), which are any person or organization bound by the contract, and any ancillary parties, which facilitate the execution of the contract such as a notary or witness.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.Signer"
              }
            },
            "valuedItem": {
              "description": "Contract Valued Item List.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.ValuedItem"
              }
            },
            "term": {
              "description": "One or more Contract Provisions, which may be related and conveyed as a group, and may contain nested groups.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.Term"
              }
            },
            "bindingAttachment": {
              "description": "Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the \"source of truth\" and which would be the basis for legal action related to enforcement of this Contract.",
              "$ref": "#/definitions/Attachment"
            },
            "bindingReference": {
              "description": "Legally binding Contract: This is the signed and legally recognized representation of the Contract, which is considered the \"source of truth\" and which would be the basis for legal action related to enforcement of this Contract.",
              "$ref": "#/definitions/Reference"
            },
            "friendly": {
              "description": "The \"patient friendly language\" versionof the Contract in whole or in parts. \"Patient friendly language\" means the representation of the Contract and Contract Provisions in a manner that is readily accessible and understandable by a layperson in accordance with best practices for communication styles that ensure that those agreeing to or signing the Contract understand the roles, actions, obligations, responsibilities, and implication of the agreement.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.Friendly"
              }
            },
            "legal": {
              "description": "List of Legal expressions or representations of this Contract.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.Legal"
              }
            },
            "rule": {
              "description": "List of Computable Policy Rule Language Representations of this Contract.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.Rule"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Contract.Agent": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "actor": {
              "description": "Who or what parties are assigned roles in this Contract.",
              "$ref": "#/definitions/Reference"
            },
            "role": {
              "description": "Role type of agent assigned roles in this Contract.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            }
          },
          "required": [
            "actor"
          ]
        }
      ]
    },
    "Contract.Signer": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "type": {
              "description": "Role of this Contract signer, e.g. notary, grantee.",
              "$ref": "#/definitions/Coding"
            },
            "party": {
              "description": "Party which is a signator to this Contract.",
              "$ref": "#/definitions/Reference"
            },
            "signature": {
              "description": "Legally binding Contract DSIG signature contents in Base64.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Signature"
              }
            }
          },
          "required": [
            "signature",
            "type",
            "party"
          ]
        }
      ]
    },
    "Contract.ValuedItem": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "entityCodeableConcept": {
              "description": "Specific type of Contract Valued Item that may be priced.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "entityReference": {
              "description": "Specific type of Contract Valued Item that may be priced.",
              "$ref": "#/definitions/Reference"
            },
            "identifier": {
              "description": "Identifies a Contract Valued Item instance.",
              "$ref": "#/definitions/Identifier"
            },
            "effectiveTime": {
              "description": "Indicates the time during which this Contract ValuedItem information is effective.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "effectiveTime_": {
              "description": "Extensions for effectiveTime",
              "$ref": "#/definitions/Element"
            },
            "quantity": {
              "description": "Specifies the units by which the Contract Valued Item is measured or counted, and quantifies the countable or measurable Contract Valued Item instances.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "unitPrice": {
              "description": "A Contract Valued Item unit valuation measure.",
              "$ref": "#/definitions/Money"
            },
            "factor": {
              "description": "A real number that represents a multiplier used in determining the overall value of the Contract Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "factor_": {
              "description": "Extensions for factor",
              "$ref": "#/definitions/Element"
            },
            "points": {
              "description": "An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Valued Item delivered. The concept of Points allows for assignment of point values for a Contract Valued Item, such that a monetary amount can be assigned to each point.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "points_": {
              "description": "Extensions for points",
              "$ref": "#/definitions/Element"
            },
            "net": {
              "description": "Expresses the product of the Contract Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points \u003d net Amount. Quantity, factor and points are assumed to be 1 if not supplied.",
              "$ref": "#/definitions/Money"
            }
          }
        }
      ]
    },
    "Contract.Term": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "identifier": {
              "description": "Unique identifier for this particular Contract Provision.",
              "$ref": "#/definitions/Identifier"
            },
            "issued": {
              "description": "When this Contract Provision was issued.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "issued_": {
              "description": "Extensions for issued",
              "$ref": "#/definitions/Element"
            },
            "applies": {
              "description": "Relevant time or time-period when this Contract Provision is applicable.",
              "$ref": "#/definitions/Period"
            },
            "type": {
              "description": "Type of Contract Provision such as specific requirements, purposes for actions, obligations, prohibitions, e.g. life time maximum benefit.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "subType": {
              "description": "Subtype of this Contract Provision, e.g. life time maximum payment for a contract term for specific valued item, e.g. disability payment.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "topic": {
              "description": "The matter of concern in the context of this provision of the agrement.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "action": {
              "description": "Action stipulated by this Contract Provision.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "actionReason": {
              "description": "Reason or purpose for the action stipulated by this Contract Provision.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "agent": {
              "description": "An actor taking a role in an activity for which it can be assigned some degree of responsibility for the activity taking place.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.Agent1"
              }
            },
            "text": {
              "description": "Human readable form of this Contract Provision.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            },
            "valuedItem": {
              "description": "Contract Provision Valued Item List.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.ValuedItem1"
              }
            },
            "group": {
              "description": "Nested group of Contract Provisions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Contract.Term"
              }
            }
          }
        }
      ]
    },
    "Contract.Agent1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "actor": {
              "description": "The agent assigned a role in this Contract Provision.",
              "$ref": "#/definitions/Reference"
            },
            "role": {
              "description": "Role played by the agent assigned this role in the execution of this Contract Provision.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            }
          },
          "required": [
            "actor"
          ]
        }
      ]
    },
    "Contract.ValuedItem1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "entityCodeableConcept": {
              "description": "Specific type of Contract Provision Valued Item that may be priced.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "entityReference": {
              "description": "Specific type of Contract Provision Valued Item that may be priced.",
              "$ref": "#/definitions/Reference"
            },
            "identifier": {
              "description": "Identifies a Contract Provision Valued Item instance.",
              "$ref": "#/definitions/Identifier"
            },
            "effectiveTime": {
              "description": "Indicates the time during which this Contract Term ValuedItem information is effective.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "effectiveTime_": {
              "description": "Extensions for effectiveTime",
              "$ref": "#/definitions/Element"
            },
            "quantity": {
              "description": "Specifies the units by which the Contract Provision Valued Item is measured or counted, and quantifies the countable or measurable Contract Term Valued Item instances.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "unitPrice": {
              "description": "A Contract Provision Valued Item unit valuation measure.",
              "$ref": "#/definitions/Money"
            },
            "factor": {
              "description": "A real number that represents a multiplier used in determining the overall value of the Contract Provision Valued Item delivered. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "factor_": {
              "description": "Extensions for factor",
              "$ref": "#/definitions/Element"
            },
            "points": {
              "description": "An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the Contract Provision Valued Item delivered. The concept of Points allows for assignment of point values for a Contract ProvisionValued Item, such that a monetary amount can be assigned to each point.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "points_": {
              "description": "Extensions for points",
              "$ref": "#/definitions/Element"
            },
            "net": {
              "description": "Expresses the product of the Contract Provision Valued Item unitQuantity and the unitPriceAmt. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points \u003d net Amount. Quantity, factor and points are assumed to be 1 if not supplied.",
              "$ref": "#/definitions/Money"
            }
          }
        }
      ]
    },
    "Contract.Friendly": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "contentAttachment": {
              "description": "Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.",
              "$ref": "#/definitions/Attachment"
            },
            "contentReference": {
              "description": "Human readable rendering of this Contract in a format and representation intended to enhance comprehension and ensure understandability.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Contract.Legal": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "contentAttachment": {
              "description": "Contract legal text in human renderable form.",
              "$ref": "#/definitions/Attachment"
            },
            "contentReference": {
              "description": "Contract legal text in human renderable form.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Contract.Rule": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal agreement between parties regarding the conduct of business, exchange of information or other matters.",
          "properties": {
            "contentAttachment": {
              "description": "Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).",
              "$ref": "#/definitions/Attachment"
            },
            "contentReference": {
              "description": "Computable Contract conveyed using a policy rule language (e.g. XACML, DKAL, SecPal).",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Coverage": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Financial instrument which may be used to pay for or reimburse health care products and services.",
          "properties": {
            "resourceType": {
              "description": "This is a Coverage resource",
              "type": "string",
              "enum": [
                "Coverage"
              ]
            },
            "issuerIdentifier": {
              "description": "The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements.",
              "$ref": "#/definitions/Identifier"
            },
            "issuerReference": {
              "description": "The program or plan underwriter or payor including both insurance and non-insurance agreements, such as patient-pay agreements.",
              "$ref": "#/definitions/Reference"
            },
            "isAgreement": {
              "description": "A self, or other, payment agreement not an insurance policy.",
              "type": "true | false"
            },
            "isAgreement_": {
              "description": "Extensions for isAgreement",
              "$ref": "#/definitions/Element"
            },
            "bin": {
              "description": "Business Identification Number (BIN number) used to identify the routing  of eClaims.",
              "type": "string"
            },
            "bin_": {
              "description": "Extensions for bin",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "Time period during which the coverage is in force. A missing start date indicates the start date isn\u0027t known, a missing end date means the coverage is continuing to be in force.",
              "$ref": "#/definitions/Period"
            },
            "type": {
              "description": "The type of coverage: social program, medical plan, accident coverage (workers compensation, auto), group health.",
              "$ref": "#/definitions/Coding"
            },
            "planholderIdentifier": {
              "description": "The party who \u0027owns\u0027 the insurance contractual relationship to the policy or to whom the benefit of the policy is due.",
              "$ref": "#/definitions/Identifier"
            },
            "planholderReference": {
              "description": "The party who \u0027owns\u0027 the insurance contractual relationship to the policy or to whom the benefit of the policy is due.",
              "$ref": "#/definitions/Reference"
            },
            "beneficiaryIdentifier": {
              "description": "The party who benefits from the insurance coverage.",
              "$ref": "#/definitions/Identifier"
            },
            "beneficiaryReference": {
              "description": "The party who benefits from the insurance coverage.",
              "$ref": "#/definitions/Reference"
            },
            "relationship": {
              "description": "The relationship of the patient to the planholdersubscriber).",
              "$ref": "#/definitions/Coding"
            },
            "identifier": {
              "description": "The main (and possibly only) identifier for the coverage - often referred to as a Member Id, Subscriber Id, Certificate number or Personal Health Number or Case ID.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "group": {
              "description": "Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.",
              "type": "string"
            },
            "group_": {
              "description": "Extensions for group",
              "$ref": "#/definitions/Element"
            },
            "plan": {
              "description": "Identifies a style or collective of coverage issues by the underwriter, for example may be used to identify a class of coverage or employer group. May also be referred to as a Policy or Group ID.",
              "type": "string"
            },
            "plan_": {
              "description": "Extensions for plan",
              "$ref": "#/definitions/Element"
            },
            "subPlan": {
              "description": "Identifies a sub-style or sub-collective of coverage issues by the underwriter, for example may be used to identify a specific employer group within a class of employers. May be referred to as a Section or Division ID.",
              "type": "string"
            },
            "subPlan_": {
              "description": "Extensions for subPlan",
              "$ref": "#/definitions/Element"
            },
            "dependent": {
              "description": "A unique identifier for a dependent under the coverage.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "dependent_": {
              "description": "Extensions for dependent",
              "$ref": "#/definitions/Element"
            },
            "sequence": {
              "description": "An optional counter for a particular instance of the identified coverage which increments upon each renewal.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "exception": {
              "description": "Factors which may influence the applicability of coverage.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "school": {
              "description": "Name of school for over-aged dependants.",
              "type": "string"
            },
            "school_": {
              "description": "Extensions for school",
              "$ref": "#/definitions/Element"
            },
            "network": {
              "description": "The identifier for a community of providers.",
              "type": "string"
            },
            "network_": {
              "description": "Extensions for network",
              "$ref": "#/definitions/Element"
            },
            "contract": {
              "description": "The policy(s) which constitute this insurance coverage.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "relationship",
            "resourceType"
          ]
        }
      ]
    },
    "DataElement": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The formal description of a single piece of information that can be gathered and reported.",
          "properties": {
            "resourceType": {
              "description": "This is a DataElement resource",
              "type": "string",
              "enum": [
                "DataElement"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this data element when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this data element is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Formal identifier that is used to identify this data element when it is represented in other formats, or referenced in a specification, model, design or an instance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "version": {
              "description": "The identifier that is used to identify this version of the data element when it is referenced in a StructureDefinition, Questionnaire or instance. This is an arbitrary value managed by the definition author manually.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the data element.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "A flag to indicate that this search data element definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the data element.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "The date this version of the data element was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the data element  changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "The term used by humans to refer to the data element.  Should ideally be unique within the context in which the data element is expected to be used.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataElement.Contact"
              }
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of data element definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "copyright": {
              "description": "A copyright statement relating to the definition of the data element. Copyright statements are generally legal restrictions on the use and publishing of the details of the definition of the data element.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "stringency": {
              "description": "Identifies how precise the data element is in its definition.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "stringency_": {
              "description": "Extensions for stringency",
              "$ref": "#/definitions/Element"
            },
            "mapping": {
              "description": "Identifies a specification (other than a terminology) that the elements which make up the DataElement have some correspondence with.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataElement.Mapping"
              }
            },
            "element": {
              "description": "Defines the structure, type, allowed values and other constraining characteristics of the data element.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition"
              }
            }
          },
          "required": [
            "resourceType",
            "element"
          ]
        }
      ]
    },
    "DataElement.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The formal description of a single piece of information that can be gathered and reported.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the data element.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "DataElement.Mapping": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The formal description of a single piece of information that can be gathered and reported.",
          "properties": {
            "identity": {
              "description": "An internal id that is used to identify this mapping set when specific mappings are made on a per-element basis.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "identity_": {
              "description": "Extensions for identity",
              "$ref": "#/definitions/Element"
            },
            "uri": {
              "description": "An absolute URI that identifies the specification that this mapping is expressed to.",
              "type": "string"
            },
            "uri_": {
              "description": "Extensions for uri",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A name for the specification that is being mapped to.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "comment": {
              "description": "Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.",
              "type": "string"
            },
            "comment_": {
              "description": "Extensions for comment",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "DecisionSupportRule": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource defines a decision support rule of the form [on Event] if Condition then Action. It is intended to be a shareable, computable definition of a actions that should be taken whenever some condition is met in response to a particular event or events.",
          "properties": {
            "resourceType": {
              "description": "This is a DecisionSupportRule resource",
              "type": "string",
              "enum": [
                "DecisionSupportRule"
              ]
            },
            "moduleMetadata": {
              "description": "The metadata for the decision support rule, including publishing, life-cycle, version, documentation, and supporting evidence.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "library": {
              "description": "A reference to a Library containing the formal logic used by the rule.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "trigger": {
              "description": "The trigger element defines when the rule should be invoked. This information is used by consumers of the rule to determine how to integrate the rule into a specific workflow.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerDefinition"
              }
            },
            "condition": {
              "description": "The condition element describes he \"if\" portion of the rule that determines whether or not the rule \"fires\". The condition must be the name of an expression in a referenced library.",
              "type": "string"
            },
            "condition_": {
              "description": "Extensions for condition",
              "$ref": "#/definitions/Element"
            },
            "action": {
              "description": "The action element defines the \"when\" portion of the rule that determines what actions should be performed if the condition evaluates to true.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionDefinition"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "DecisionSupportServiceModule": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The DecisionSupportServiceModule describes a unit of decision support functionality that is made available as a service, such as immunization modules or drug-drug interaction checking.",
          "properties": {
            "resourceType": {
              "description": "This is a DecisionSupportServiceModule resource",
              "type": "string",
              "enum": [
                "DecisionSupportServiceModule"
              ]
            },
            "moduleMetadata": {
              "description": "The metadata for the decision support service module, including publishing, life-cycle, version, documentation, and supporting evidence.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "trigger": {
              "description": "The trigger element defines when the rule should be invoked. This information is used by consumers of the rule to determine how to integrate the rule into a specific workflow.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TriggerDefinition"
              }
            },
            "parameter": {
              "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParameterDefinition"
              }
            },
            "dataRequirement": {
              "description": "Data requirements are a machine processable description of the data required by the module in order to perform a successful evaluation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataRequirement"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "DetectedIssue": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.",
          "properties": {
            "resourceType": {
              "description": "This is a DetectedIssue resource",
              "type": "string",
              "enum": [
                "DetectedIssue"
              ]
            },
            "patient": {
              "description": "Indicates the patient whose record the detected issue is associated with.",
              "$ref": "#/definitions/Reference"
            },
            "category": {
              "description": "Identifies the general type of issue identified.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "severity": {
              "description": "Indicates the degree of importance associated with the identified issue based on the potential impact on the patient.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "severity_": {
              "description": "Extensions for severity",
              "$ref": "#/definitions/Element"
            },
            "implicated": {
              "description": "Indicates the resource representing the current activity or proposed activity that is potentially problematic.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "detail": {
              "description": "A textual explanation of the detected issue.",
              "type": "string"
            },
            "detail_": {
              "description": "Extensions for detail",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "The date or date-time when the detected issue was initially identified.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "author": {
              "description": "Individual or device responsible for the issue being raised.  For example, a decision support application or a pharmacist conducting a medication review.",
              "$ref": "#/definitions/Reference"
            },
            "identifier": {
              "description": "Business identifier associated with the detected issue record.",
              "$ref": "#/definitions/Identifier"
            },
            "reference": {
              "description": "The literature, knowledge-base or similar reference that describes the propensity for the detected issue identified.",
              "type": "string"
            },
            "reference_": {
              "description": "Extensions for reference",
              "$ref": "#/definitions/Element"
            },
            "mitigation": {
              "description": "Indicates an action that has been taken or is committed to to reduce or eliminate the likelihood of the risk identified by the detected issue from manifesting.  Can also reflect an observation of known mitigating factors that may reduce/eliminate the need for any action.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DetectedIssue.Mitigation"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "DetectedIssue.Mitigation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Indicates an actual or potential clinical issue with or between one or more active or proposed clinical actions for a patient; e.g. Drug-drug interaction, Ineffective treatment frequency, Procedure-condition conflict, etc.",
          "properties": {
            "action": {
              "description": "Describes the action that was taken or the observation that was made that reduces/eliminates the risk associated with the identified issue.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "date": {
              "description": "Indicates when the mitigating action was documented.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "author": {
              "description": "Identifies the practitioner who determined the mitigation and takes responsibility for the mitigation step occurring.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "action"
          ]
        }
      ]
    },
    "Device": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource identifies an instance or a type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.  Medical devices includes durable (reusable) medical equipment, implantable devices, as well as disposable equipment used for diagnostic, treatment, and research for healthcare and public health.  Non-medical devices may include items such as a machine, cellphone, computer, application, etc.",
          "properties": {
            "resourceType": {
              "description": "This is a Device resource",
              "type": "string",
              "enum": [
                "Device"
              ]
            },
            "identifier": {
              "description": "Unique instance identifiers assigned to a device by manufacturers other organizations or owners.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "udiCarrier": {
              "description": "[Unique device identifier (UDI)](device.html#5.11.3.2.2) barcode or rfid string assigned to device label or package.",
              "$ref": "#/definitions/Identifier"
            },
            "status": {
              "description": "Status of the Device availability.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Code or identifier to identify a kind of device.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "lotNumber": {
              "description": "Lot number assigned by the manufacturer.",
              "type": "string"
            },
            "lotNumber_": {
              "description": "Extensions for lotNumber",
              "$ref": "#/definitions/Element"
            },
            "manufacturer": {
              "description": "A name of the manufacturer.",
              "type": "string"
            },
            "manufacturer_": {
              "description": "Extensions for manufacturer",
              "$ref": "#/definitions/Element"
            },
            "manufactureDate": {
              "description": "The date and time when the device was manufactured.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "manufactureDate_": {
              "description": "Extensions for manufactureDate",
              "$ref": "#/definitions/Element"
            },
            "expirationDate": {
              "description": "The date and time beyond which this device is no longer valid or should not be used (if applicable).",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "expirationDate_": {
              "description": "Extensions for expirationDate",
              "$ref": "#/definitions/Element"
            },
            "model": {
              "description": "The \"model\" is an identifier assigned by the manufacturer to identify the product by its type. This number is shared by the all devices sold as the same type.",
              "type": "string"
            },
            "model_": {
              "description": "Extensions for model",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version of the device, if the device has multiple releases under the same model, or if the device is software or carries firmware.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "patient": {
              "description": "Patient information, If the device is affixed to a person.",
              "$ref": "#/definitions/Reference"
            },
            "owner": {
              "description": "An organization that is responsible for the provision and ongoing maintenance of the device.",
              "$ref": "#/definitions/Reference"
            },
            "contact": {
              "description": "Contact details for an organization or a particular human that is responsible for the device.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "location": {
              "description": "The place where the device can be found.",
              "$ref": "#/definitions/Reference"
            },
            "url": {
              "description": "A network address on which the device may be contacted directly.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "note": {
              "description": "Descriptive information, usage information or implantation information that is not captured in an existing element.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            }
          },
          "required": [
            "type",
            "resourceType"
          ]
        }
      ]
    },
    "DeviceComponent": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.",
          "properties": {
            "resourceType": {
              "description": "This is a DeviceComponent resource",
              "type": "string",
              "enum": [
                "DeviceComponent"
              ]
            },
            "type": {
              "description": "Describes the specific component type as defined in the object-oriented or metric nomenclature partition.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "identifier": {
              "description": "Describes the local assigned unique identification by the software. For example: handle ID.",
              "$ref": "#/definitions/Identifier"
            },
            "lastSystemChange": {
              "description": "Describes the timestamp for the most recent system change which includes device configuration or setting change.",
              "type": "string"
            },
            "lastSystemChange_": {
              "description": "Extensions for lastSystemChange",
              "$ref": "#/definitions/Element"
            },
            "source": {
              "description": "Describes the link to the source Device that contains administrative device information such as manufacture, serial number, etc.",
              "$ref": "#/definitions/Reference"
            },
            "parent": {
              "description": "Describes the link to the parent resource. For example: Channel is linked to its VMD parent.",
              "$ref": "#/definitions/Reference"
            },
            "operationalStatus": {
              "description": "Indicates current operational status of the device. For example: On, Off, Standby, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "parameterGroup": {
              "description": "Describes the parameter group supported by the current device component that is based on some nomenclature, e.g. cardiovascular.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "measurementPrinciple": {
              "description": "Describes the physical principle of the measurement. For example: thermal, chemical, acoustical, etc.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "measurementPrinciple_": {
              "description": "Extensions for measurementPrinciple",
              "$ref": "#/definitions/Element"
            },
            "productionSpecification": {
              "description": "Describes the production specification such as component revision, serial number, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceComponent.ProductionSpecification"
              }
            },
            "languageCode": {
              "description": "Describes the language code for the human-readable text string produced by the device. This language code will follow the IETF language tag. Example: en-US.",
              "$ref": "#/definitions/CodeableConcept"
            }
          },
          "required": [
            "identifier",
            "type",
            "resourceType"
          ]
        }
      ]
    },
    "DeviceComponent.ProductionSpecification": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the characteristics, operational status and capabilities of a medical-related component of a medical device.",
          "properties": {
            "specType": {
              "description": "Describes the specification type, such as, serial number, part number, hardware revision, software revision, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "componentId": {
              "description": "Describes the internal component unique identification. This is a provision for manufacture specific standard components using a private OID. 11073-10101 has a partition for private OID semantic that the manufacture can make use of.",
              "$ref": "#/definitions/Identifier"
            },
            "productionSpec": {
              "description": "Describes the printable string defining the component.",
              "type": "string"
            },
            "productionSpec_": {
              "description": "Extensions for productionSpec",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "DeviceMetric": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Describes a measurement, calculation or setting capability of a medical device.",
          "properties": {
            "resourceType": {
              "description": "This is a DeviceMetric resource",
              "type": "string",
              "enum": [
                "DeviceMetric"
              ]
            },
            "type": {
              "description": "Describes the type of the metric. For example: Heart Rate, PEEP Setting, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "identifier": {
              "description": "Describes the unique identification of this metric that has been assigned by the device or gateway software. For example: handle ID.  It should be noted that in order to make the identifier unique, the system element of the identifier should be set to the unique identifier of the device.",
              "$ref": "#/definitions/Identifier"
            },
            "unit": {
              "description": "Describes the unit that an observed value determined for this metric will have. For example: Percent, Seconds, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "source": {
              "description": "Describes the link to the  Device that this DeviceMetric belongs to and that contains administrative device information such as manufacture, serial number, etc.",
              "$ref": "#/definitions/Reference"
            },
            "parent": {
              "description": "Describes the link to the  DeviceComponent that this DeviceMetric belongs to and that provide information about the location of this DeviceMetric in the containment structure of the parent Device. An example would be a DeviceComponent that represents a Channel. This reference can be used by a client application to distinguish DeviceMetrics that have the same type, but should be interpreted based on their containment location.",
              "$ref": "#/definitions/Reference"
            },
            "operationalStatus": {
              "description": "Indicates current operational state of the device. For example: On, Off, Standby, etc.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "operationalStatus_": {
              "description": "Extensions for operationalStatus",
              "$ref": "#/definitions/Element"
            },
            "color": {
              "description": "Describes the color representation for the metric. This is often used to aid clinicians to track and identify parameter types by color. In practice, consider a Patient Monitor that has ECG/HR and Pleth for example; the parameters are displayed in different characteristic colors, such as HR-blue, BP-green, and PR and SpO2- magenta.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "color_": {
              "description": "Extensions for color",
              "$ref": "#/definitions/Element"
            },
            "category": {
              "description": "Indicates the category of the observation generation process. A DeviceMetric can be for example a setting, measurement, or calculation.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "category_": {
              "description": "Extensions for category",
              "$ref": "#/definitions/Element"
            },
            "measurementPeriod": {
              "description": "Describes the measurement repetition time. This is not necessarily the same as the update period. The measurement repetition time can range from milliseconds up to hours. An example for a measurement repetition time in the range of milliseconds is the sampling rate of an ECG. An example for a measurement repetition time in the range of hours is a NIBP that is triggered automatically every hour. The update period may be different than the measurement repetition time, if the device does not update the published observed value with the same frequency as it was measured.",
              "$ref": "#/definitions/Timing"
            },
            "calibration": {
              "description": "Describes the calibrations that have been performed or that are required to be performed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceMetric.Calibration"
              }
            }
          },
          "required": [
            "identifier",
            "type",
            "resourceType"
          ]
        }
      ]
    },
    "DeviceMetric.Calibration": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes a measurement, calculation or setting capability of a medical device.",
          "properties": {
            "type": {
              "description": "Describes the type of the calibration method.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "state": {
              "description": "Describes the state of the calibration.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "state_": {
              "description": "Extensions for state",
              "$ref": "#/definitions/Element"
            },
            "time": {
              "description": "Describes the time last calibration has been performed.",
              "type": "string"
            },
            "time_": {
              "description": "Extensions for time",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "DeviceUseRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.",
          "properties": {
            "resourceType": {
              "description": "This is a DeviceUseRequest resource",
              "type": "string",
              "enum": [
                "DeviceUseRequest"
              ]
            },
            "bodySiteCodeableConcept": {
              "description": "Indicates the site on the subject\u0027s body where the device should be used ( i.e. the target site).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "bodySiteReference": {
              "description": "Indicates the site on the subject\u0027s body where the device should be used ( i.e. the target site).",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "The status of the request.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "device": {
              "description": "The details of the device  to be used.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "An encounter that provides additional context in which this request is made.",
              "$ref": "#/definitions/Reference"
            },
            "identifier": {
              "description": "Identifiers assigned to this order by the orderer or by the receiver.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "indication": {
              "description": "Reason or justification for the use of this device.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "notes": {
              "description": "Details about this request that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "notes_": {
              "description": "Extensions for notes",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "prnReason": {
              "description": "The proposed act must be performed if the indicated conditions occur, e.g.., shortness of breath, SpO2 less than x%.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "orderedOn": {
              "description": "The time when the request was made.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "orderedOn_": {
              "description": "Extensions for orderedOn",
              "$ref": "#/definitions/Element"
            },
            "recordedOn": {
              "description": "The time at which the request was made/recorded.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "recordedOn_": {
              "description": "Extensions for recordedOn",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "The patient who will use the device.",
              "$ref": "#/definitions/Reference"
            },
            "timingTiming": {
              "description": "The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".",
              "$ref": "#/definitions/Timing"
            },
            "timingPeriod": {
              "description": "The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".",
              "$ref": "#/definitions/Period"
            },
            "timingDateTime": {
              "description": "The timing schedule for the use of the device The Schedule data type allows many different expressions, for example. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "timingDateTime_": {
              "description": "Extensions for timingDateTime",
              "$ref": "#/definitions/Element"
            },
            "priority": {
              "description": "Characterizes how quickly the  use of device must be initiated. Includes concepts such as stat, urgent, routine.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "priority_": {
              "description": "Extensions for priority",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "subject",
            "device",
            "resourceType"
          ]
        }
      ]
    },
    "DeviceUseStatement": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.",
          "properties": {
            "resourceType": {
              "description": "This is a DeviceUseStatement resource",
              "type": "string",
              "enum": [
                "DeviceUseStatement"
              ]
            },
            "bodySiteCodeableConcept": {
              "description": "Indicates the site on the subject\u0027s body where the device was used ( i.e. the target site).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "bodySiteReference": {
              "description": "Indicates the site on the subject\u0027s body where the device was used ( i.e. the target site).",
              "$ref": "#/definitions/Reference"
            },
            "whenUsed": {
              "description": "The time period over which the device was used.",
              "$ref": "#/definitions/Period"
            },
            "device": {
              "description": "The details of the device used.",
              "$ref": "#/definitions/Reference"
            },
            "identifier": {
              "description": "An external identifier for this statement such as an IRI.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "indication": {
              "description": "Reason or justification for the use of the device.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "notes": {
              "description": "Details about the device statement that were not represented at all or sufficiently in one of the attributes provided in a class. These may include for example a comment, an instruction, or a note associated with the statement.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "notes_": {
              "description": "Extensions for notes",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "recordedOn": {
              "description": "The time at which the statement was made/recorded.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "recordedOn_": {
              "description": "Extensions for recordedOn",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "The patient who used the device.",
              "$ref": "#/definitions/Reference"
            },
            "timingTiming": {
              "description": "How often the device was used.",
              "$ref": "#/definitions/Timing"
            },
            "timingPeriod": {
              "description": "How often the device was used.",
              "$ref": "#/definitions/Period"
            },
            "timingDateTime": {
              "description": "How often the device was used.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "timingDateTime_": {
              "description": "Extensions for timingDateTime",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "subject",
            "device",
            "resourceType"
          ]
        }
      ]
    },
    "DiagnosticOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A record of a request for a diagnostic investigation service to be performed.",
          "properties": {
            "resourceType": {
              "description": "This is a DiagnosticOrder resource",
              "type": "string",
              "enum": [
                "DiagnosticOrder"
              ]
            },
            "identifier": {
              "description": "Identifiers assigned to this order instance by the orderer and/or  the receiver and/or order fulfiller.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "The status of the order.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "priority": {
              "description": "The clinical priority associated with this order.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "priority_": {
              "description": "Extensions for priority",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "On whom or what the investigation is to be performed. This is usually a human patient, but diagnostic tests can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "An encounter that provides additional information about the healthcare context in which this request is made.",
              "$ref": "#/definitions/Reference"
            },
            "orderer": {
              "description": "The practitioner that holds legal responsibility for ordering the investigation.",
              "$ref": "#/definitions/Reference"
            },
            "reason": {
              "description": "An explanation or justification for why this diagnostic investigation is being requested.   This is often for billing purposes.  May relate to the resources referred to in supportingInformation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "supportingInformation": {
              "description": "Additional clinical information about the patient or specimen that may influence test interpretations.  This includes observations explicitly requested by the producer(filler) to provide context or supporting information needed to complete the order.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "event": {
              "description": "A summary of the events of interest that have occurred as the request is processed; e.g. when the order was made, various processing steps (specimens received), when it was completed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiagnosticOrder.Event"
              }
            },
            "item": {
              "description": "The specific diagnostic investigations that are requested as part of this request. Sometimes, there can only be one item per request, but in most contexts, more than one investigation can be requested.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiagnosticOrder.Item"
              }
            },
            "note": {
              "description": "Any other notes associated with this patient, specimen or order (e.g. \"patient hates needles\").",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            }
          },
          "required": [
            "subject",
            "resourceType"
          ]
        }
      ]
    },
    "DiagnosticOrder.Event": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of a request for a diagnostic investigation service to be performed.",
          "properties": {
            "status": {
              "description": "The status for the event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Additional information about the event that occurred - e.g. if the status remained unchanged.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "dateTime": {
              "description": "The date/time at which the event occurred.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "dateTime_": {
              "description": "Extensions for dateTime",
              "$ref": "#/definitions/Element"
            },
            "actor": {
              "description": "The person responsible for performing or recording the action.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "DiagnosticOrder.Item": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of a request for a diagnostic investigation service to be performed.",
          "properties": {
            "code": {
              "description": "A code that identifies a particular diagnostic investigation, or panel of investigations, that have been requested.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "bodySite": {
              "description": "Anatomical location where the request test should be performed.  This is the target site.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "status": {
              "description": "The status of this individual item within the order.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "event": {
              "description": "A summary of the events of interest that have occurred as this item of the request is processed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiagnosticOrder.Event"
              }
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "DiagnosticReport": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.",
          "properties": {
            "resourceType": {
              "description": "This is a DiagnosticReport resource",
              "type": "string",
              "enum": [
                "DiagnosticReport"
              ]
            },
            "identifier": {
              "description": "The local ID assigned to the report by the order filler, usually by the Information System of the diagnostic service provider.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "The status of the diagnostic report as a whole.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "category": {
              "description": "A code that classifies the clinical discipline, department or diagnostic service that created the report (e.g. cardiology, biochemistry, hematology, MRI). This is used for searching, sorting and display purposes.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "code": {
              "description": "A code or name that describes this diagnostic report.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "subject": {
              "description": "The subject of the report. Usually, but not always, this is a patient. However diagnostic services also perform analyses on specimens collected from a variety of other sources.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "The link to the health care event (encounter) when the order was made.",
              "$ref": "#/definitions/Reference"
            },
            "effectiveDateTime": {
              "description": "The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "effectiveDateTime_": {
              "description": "Extensions for effectiveDateTime",
              "$ref": "#/definitions/Element"
            },
            "effectivePeriod": {
              "description": "The time or time-period the observed values are related to. When the subject of the report is a patient, this is usually either the time of the procedure or of specimen collection(s), but very often the source of the date/time is not known, only the date/time itself.",
              "$ref": "#/definitions/Period"
            },
            "issued": {
              "description": "The date and time that this version of the report was released from the source diagnostic service.",
              "type": "string"
            },
            "issued_": {
              "description": "Extensions for issued",
              "$ref": "#/definitions/Element"
            },
            "performer": {
              "description": "The diagnostic service that is responsible for issuing the report.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "request": {
              "description": "Details concerning a test or procedure requested.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "specimen": {
              "description": "Details about the specimens on which this diagnostic report is based.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "result": {
              "description": "Observations that are part of this diagnostic report. Observations can be simple name/value pairs (e.g. \"atomic\" results), or they can be grouping observations that include references to other members of the group (e.g. \"panels\").",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "imagingStudy": {
              "description": "One or more links to full details of any imaging performed during the diagnostic investigation. Typically, this is imaging performed by DICOM enabled modalities, but this is not required. A fully enabled PACS viewer can use this information to provide views of the source images.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "image": {
              "description": "A list of key images associated with this report. The images are generally created during the diagnostic process, and may be directly of the patient, or of treated specimens (i.e. slides of interest).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DiagnosticReport.Image"
              }
            },
            "conclusion": {
              "description": "Concise and clinically contextualized impression / summary of the diagnostic report.",
              "type": "string"
            },
            "conclusion_": {
              "description": "Extensions for conclusion",
              "$ref": "#/definitions/Element"
            },
            "codedDiagnosis": {
              "description": "Codes for the conclusion.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "presentedForm": {
              "description": "Rich text representation of the entire result as issued by the diagnostic service. Multiple formats are allowed but they SHALL be semantically equivalent.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            }
          },
          "required": [
            "code",
            "performer",
            "subject",
            "resourceType"
          ]
        }
      ]
    },
    "DiagnosticReport.Image": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The findings and interpretation of diagnostic  tests performed on patients, groups of patients, devices, and locations, and/or specimens derived from these. The report includes clinical context such as requesting and provider information, and some mix of atomic results, images, textual and coded interpretations, and formatted representation of diagnostic reports.",
          "properties": {
            "comment": {
              "description": "A comment about the image. Typically, this is used to provide an explanation for why the image is included, or to draw the viewer\u0027s attention to important features.",
              "type": "string"
            },
            "comment_": {
              "description": "Extensions for comment",
              "$ref": "#/definitions/Element"
            },
            "link": {
              "description": "Reference to the image source.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "link"
          ]
        }
      ]
    },
    "DocumentManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A manifest that defines a set of documents.",
          "properties": {
            "resourceType": {
              "description": "This is a DocumentManifest resource",
              "type": "string",
              "enum": [
                "DocumentManifest"
              ]
            },
            "masterIdentifier": {
              "description": "A single identifier that uniquely identifies this manifest. Principally used to refer to the manifest in non-FHIR contexts.",
              "$ref": "#/definitions/Identifier"
            },
            "identifier": {
              "description": "Other identifiers associated with the document manifest, including version independent  identifiers.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "subject": {
              "description": "Who or what the set of documents is about. The documents can be about a person, (patient or healthcare practitioner), a device (i.e. machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure). If the documents cross more than one subject, then more than one subject is allowed here (unusual use case).",
              "$ref": "#/definitions/Reference"
            },
            "recipient": {
              "description": "A patient, practitioner, or organization for which this set of documents is intended.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "type": {
              "description": "Specifies the kind of this set of documents (e.g. Patient Summary, Discharge Summary, Prescription, etc.). The type of a set of documents may be the same as one of the documents in it - especially if there is only one - but it may be wider.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "author": {
              "description": "Identifies who is responsible for creating the manifest, and adding  documents to it.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "created": {
              "description": "When the document manifest was created for submission to the server (not necessarily the same thing as the actual resource last modified time, since it may be modified, replicated, etc.).",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "source": {
              "description": "Identifies the source system, application, or software that produced the document manifest.",
              "type": "string"
            },
            "source_": {
              "description": "Extensions for source",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of this document manifest.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Human-readable description of the source document. This is sometimes known as the \"title\".",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "content": {
              "description": "The list of Documents included in the manifest.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentManifest.Content"
              }
            },
            "related": {
              "description": "Related identifiers or resources associated with the DocumentManifest.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentManifest.Related"
              }
            }
          },
          "required": [
            "content",
            "resourceType"
          ]
        }
      ]
    },
    "DocumentManifest.Content": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A manifest that defines a set of documents.",
          "properties": {
            "pAttachment": {
              "description": "The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.",
              "$ref": "#/definitions/Attachment"
            },
            "pReference": {
              "description": "The list of references to document content, or Attachment that consist of the parts of this document manifest. Usually, these would be document references, but direct references to Media or Attachments are also allowed.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "DocumentManifest.Related": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A manifest that defines a set of documents.",
          "properties": {
            "identifier": {
              "description": "Related identifier to this DocumentManifest.  For example, Order numbers, accession numbers, XDW workflow numbers.",
              "$ref": "#/definitions/Identifier"
            },
            "ref": {
              "description": "Related Resource to this DocumentManifest. For example, Order, DiagnosticOrder,  Procedure, EligibilityRequest, etc.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "DocumentReference": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A reference to a document .",
          "properties": {
            "resourceType": {
              "description": "This is a DocumentReference resource",
              "type": "string",
              "enum": [
                "DocumentReference"
              ]
            },
            "masterIdentifier": {
              "description": "Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.",
              "$ref": "#/definitions/Identifier"
            },
            "identifier": {
              "description": "Other identifiers associated with the document, including version independent identifiers.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "subject": {
              "description": "Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).",
              "$ref": "#/definitions/Reference"
            },
            "type": {
              "description": "Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "class": {
              "description": "A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "author": {
              "description": "Identifies who is responsible for adding the information to the document.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "custodian": {
              "description": "Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.",
              "$ref": "#/definitions/Reference"
            },
            "authenticator": {
              "description": "Which person or organization authenticates that this document is valid.",
              "$ref": "#/definitions/Reference"
            },
            "created": {
              "description": "When the document was created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "indexed": {
              "description": "When the document reference was created.",
              "type": "string"
            },
            "indexed_": {
              "description": "Extensions for indexed",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of this document reference.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "docStatus": {
              "description": "The status of the underlying document.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "relatesTo": {
              "description": "Relationships that this document has with other document references that already exist.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentReference.RelatesTo"
              }
            },
            "description": {
              "description": "Human-readable description of the source document. This is sometimes known as the \"title\".",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "securityLabel": {
              "description": "A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the \"reference\" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "content": {
              "description": "The document and format referenced. There may be multiple content element repetitions, each with a different format.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentReference.Content"
              }
            },
            "context": {
              "description": "The clinical context in which the document was prepared.",
              "$ref": "#/definitions/DocumentReference.Context"
            }
          },
          "required": [
            "type",
            "content",
            "resourceType"
          ]
        }
      ]
    },
    "DocumentReference.RelatesTo": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A reference to a document .",
          "properties": {
            "code": {
              "description": "The type of relationship that this document has with anther document.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "target": {
              "description": "The target document of this relationship.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "target"
          ]
        }
      ]
    },
    "DocumentReference.Content": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A reference to a document .",
          "properties": {
            "attachment": {
              "description": "The document or url of the document along with critical metadata to prove content has integrity.",
              "$ref": "#/definitions/Attachment"
            },
            "format": {
              "description": "An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            }
          },
          "required": [
            "attachment"
          ]
        }
      ]
    },
    "DocumentReference.Context": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A reference to a document .",
          "properties": {
            "encounter": {
              "description": "Describes the clinical encounter or type of care that the document content is associated with.",
              "$ref": "#/definitions/Reference"
            },
            "event": {
              "description": "This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the typeCode, such as a \"History and Physical Report\" in which the procedure being documented is necessarily a \"History and Physical\" act.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "period": {
              "description": "The time period over which the service that is described by the document was provided.",
              "$ref": "#/definitions/Period"
            },
            "facilityType": {
              "description": "The kind of facility where the patient was seen.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "practiceSetting": {
              "description": "This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "sourcePatientInfo": {
              "description": "The Patient Information as known when the document was published. May be a reference to a version specific, or contained.",
              "$ref": "#/definitions/Reference"
            },
            "related": {
              "description": "Related identifiers or resources associated with the DocumentReference.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DocumentReference.Related"
              }
            }
          }
        }
      ]
    },
    "DocumentReference.Related": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A reference to a document .",
          "properties": {
            "identifier": {
              "description": "Related identifier to this DocumentReference. If both id and ref are present they shall refer to the same thing.",
              "$ref": "#/definitions/Identifier"
            },
            "ref": {
              "description": "Related Resource to this DocumentReference. If both id and ref are present they shall refer to the same thing.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "EligibilityRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides the insurance eligibility details from the insurer regarding a specified coverage and optionally some class of service.",
          "properties": {
            "resourceType": {
              "description": "This is a EligibilityRequest resource",
              "type": "string",
              "enum": [
                "EligibilityRequest"
              ]
            },
            "identifier": {
              "description": "The Response business identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "ruleset": {
              "description": "The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when this resource was created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "targetIdentifier": {
              "description": "The Insurer who is target  of the request.",
              "$ref": "#/definitions/Identifier"
            },
            "targetReference": {
              "description": "The Insurer who is target  of the request.",
              "$ref": "#/definitions/Reference"
            },
            "providerIdentifier": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "providerReference": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "organizationIdentifier": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "organizationReference": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "priority": {
              "description": "Immediate (STAT), best effort (NORMAL), deferred (DEFER).",
              "$ref": "#/definitions/Coding"
            },
            "entererIdentifier": {
              "description": "Person who created the invoice/claim/pre-determination or pre-authorization.",
              "$ref": "#/definitions/Identifier"
            },
            "entererReference": {
              "description": "Person who created the invoice/claim/pre-determination or pre-authorization.",
              "$ref": "#/definitions/Reference"
            },
            "facilityIdentifier": {
              "description": "Facility where the services were provided.",
              "$ref": "#/definitions/Identifier"
            },
            "facilityReference": {
              "description": "Facility where the services were provided.",
              "$ref": "#/definitions/Reference"
            },
            "patientIdentifier": {
              "description": "Patient Resource.",
              "$ref": "#/definitions/Identifier"
            },
            "patientReference": {
              "description": "Patient Resource.",
              "$ref": "#/definitions/Reference"
            },
            "coverageIdentifier": {
              "description": "Financial instrument by which payment information for health care.",
              "$ref": "#/definitions/Identifier"
            },
            "coverageReference": {
              "description": "Financial instrument by which payment information for health care.",
              "$ref": "#/definitions/Reference"
            },
            "businessArrangement": {
              "description": "The contract number of a business agreement which describes the terms and conditions.",
              "type": "string"
            },
            "businessArrangement_": {
              "description": "Extensions for businessArrangement",
              "$ref": "#/definitions/Element"
            },
            "servicedDate": {
              "description": "The date or dates when the enclosed suite of services were performed or completed.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "servicedDate_": {
              "description": "Extensions for servicedDate",
              "$ref": "#/definitions/Element"
            },
            "servicedPeriod": {
              "description": "The date or dates when the enclosed suite of services were performed or completed.",
              "$ref": "#/definitions/Period"
            },
            "benefitCategory": {
              "description": "Dental, Vision, Medical, Pharmacy, Rehab etc.",
              "$ref": "#/definitions/Coding"
            },
            "benefitSubCategory": {
              "description": "Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "EligibilityResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides eligibility and plan details from the processing of an Eligibility resource.",
          "properties": {
            "resourceType": {
              "description": "This is a EligibilityResponse resource",
              "type": "string",
              "enum": [
                "EligibilityResponse"
              ]
            },
            "identifier": {
              "description": "The Response business identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "requestIdentifier": {
              "description": "Original request resource reference.",
              "$ref": "#/definitions/Identifier"
            },
            "requestReference": {
              "description": "Original request resource reference.",
              "$ref": "#/definitions/Reference"
            },
            "outcome": {
              "description": "Transaction status: error, complete.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "outcome_": {
              "description": "Extensions for outcome",
              "$ref": "#/definitions/Element"
            },
            "disposition": {
              "description": "A description of the status of the adjudication.",
              "type": "string"
            },
            "disposition_": {
              "description": "Extensions for disposition",
              "$ref": "#/definitions/Element"
            },
            "ruleset": {
              "description": "The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when the enclosed suite of services were performed or completed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "organizationIdentifier": {
              "description": "The Insurer who produced this adjudicated response.",
              "$ref": "#/definitions/Identifier"
            },
            "organizationReference": {
              "description": "The Insurer who produced this adjudicated response.",
              "$ref": "#/definitions/Reference"
            },
            "requestProviderIdentifier": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "requestProviderReference": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "requestOrganizationIdentifier": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "requestOrganizationReference": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "inforce": {
              "description": "Flag indicating if the coverage provided is inforce currently  if no service date(s) specified or for the whole duration of the service dates.",
              "type": "true | false"
            },
            "inforce_": {
              "description": "Extensions for inforce",
              "$ref": "#/definitions/Element"
            },
            "contract": {
              "description": "The contract resource which may provide more detailed information.",
              "$ref": "#/definitions/Reference"
            },
            "form": {
              "description": "The form to be used for printing the content.",
              "$ref": "#/definitions/Coding"
            },
            "benefitBalance": {
              "description": "Benefits and optionally current balances by Category.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EligibilityResponse.BenefitBalance"
              }
            },
            "error": {
              "description": "Mutually exclusive with Services Provided (Item).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EligibilityResponse.Error"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "EligibilityResponse.BenefitBalance": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides eligibility and plan details from the processing of an Eligibility resource.",
          "properties": {
            "category": {
              "description": "Dental, Vision, Medical, Pharmacy, Rehab etc.",
              "$ref": "#/definitions/Coding"
            },
            "subCategory": {
              "description": "Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.",
              "$ref": "#/definitions/Coding"
            },
            "network": {
              "description": "Network designation.",
              "$ref": "#/definitions/Coding"
            },
            "unit": {
              "description": "Unit designation: individual or family.",
              "$ref": "#/definitions/Coding"
            },
            "term": {
              "description": "The term or period of the values such as \u0027maximum lifetime benefit\u0027 or \u0027maximum annual vistis\u0027.",
              "$ref": "#/definitions/Coding"
            },
            "financial": {
              "description": "Benefits Used to date.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EligibilityResponse.Financial"
              }
            }
          },
          "required": [
            "category"
          ]
        }
      ]
    },
    "EligibilityResponse.Financial": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides eligibility and plan details from the processing of an Eligibility resource.",
          "properties": {
            "type": {
              "description": "Deductable, visits, benefit amount.",
              "$ref": "#/definitions/Coding"
            },
            "benefitUnsignedInt": {
              "description": "Benefits allowed.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "benefitUnsignedInt_": {
              "description": "Extensions for benefitUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "benefitMoney": {
              "description": "Benefits allowed.",
              "$ref": "#/definitions/Money"
            },
            "benefitUsedUnsignedInt": {
              "description": "Benefits used.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "benefitUsedUnsignedInt_": {
              "description": "Extensions for benefitUsedUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "benefitUsedMoney": {
              "description": "Benefits used.",
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "EligibilityResponse.Error": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides eligibility and plan details from the processing of an Eligibility resource.",
          "properties": {
            "code": {
              "description": "An error code,from a specified code system, which details why the eligibility check could not be performed.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "Encounter": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.",
          "properties": {
            "resourceType": {
              "description": "This is a Encounter resource",
              "type": "string",
              "enum": [
                "Encounter"
              ]
            },
            "identifier": {
              "description": "Identifier(s) by which this encounter is known.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "planned | arrived | in-progress | onleave | finished | cancelled.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "statusHistory": {
              "description": "The status history permits the encounter resource to contain the status history without needing to read through the historical versions of the resource, or even have the server store them.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Encounter.StatusHistory"
              }
            },
            "class": {
              "description": "inpatient | outpatient | ambulatory | emergency +.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "class_": {
              "description": "Extensions for class",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Specific type of encounter (e.g. e-mail consultation, surgical day-care, skilled nursing, rehabilitation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "priority": {
              "description": "Indicates the urgency of the encounter.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "patient": {
              "description": "The patient present at the encounter.",
              "$ref": "#/definitions/Reference"
            },
            "episodeOfCare": {
              "description": "Where a specific encounter should be classified as a part of a specific episode(s) of care this field should be used. This association can facilitate grouping of related encounters together for a specific purpose, such as government reporting, issue tracking, association via a common problem.  The association is recorded on the encounter as these are typically created after the episode of care, and grouped on entry rather than editing the episode of care to append another encounter to it (the episode of care could span years).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "incomingReferral": {
              "description": "The referral request this encounter satisfies (incoming referral).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "participant": {
              "description": "The list of people responsible for providing the service.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Encounter.Participant"
              }
            },
            "appointment": {
              "description": "The appointment that scheduled this encounter.",
              "$ref": "#/definitions/Reference"
            },
            "period": {
              "description": "The start and end time of the encounter.",
              "$ref": "#/definitions/Period"
            },
            "length": {
              "description": "Quantity of time the encounter lasted. This excludes the time during leaves of absence.",
              "$ref": "#/definitions/Duration"
            },
            "reason": {
              "description": "Reason the encounter takes place, expressed as a code. For admissions, this can be used for a coded admission diagnosis.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "indication": {
              "description": "Reason the encounter takes place, as specified using information from another resource. For admissions, this is the admission diagnosis. The indication will typically be a Condition (with other resources referenced in the evidence.detail), or a Procedure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "hospitalization": {
              "description": "Details about the admission to a healthcare service.",
              "$ref": "#/definitions/Encounter.Hospitalization"
            },
            "location": {
              "description": "List of locations where  the patient has been during this encounter.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Encounter.Location"
              }
            },
            "serviceProvider": {
              "description": "An organization that is in charge of maintaining the information of this Encounter (e.g. who maintains the report or the master service catalog item, etc.). This MAY be the same as the organization on the Patient record, however it could be different. This MAY not be not the Service Delivery Location\u0027s Organization.",
              "$ref": "#/definitions/Reference"
            },
            "partOf": {
              "description": "Another Encounter of which this encounter is a part of (administratively or in time).",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Encounter.StatusHistory": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.",
          "properties": {
            "status": {
              "description": "planned | arrived | in-progress | onleave | finished | cancelled.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "The time that the episode was in the specified status.",
              "$ref": "#/definitions/Period"
            }
          },
          "required": [
            "period"
          ]
        }
      ]
    },
    "Encounter.Participant": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.",
          "properties": {
            "type": {
              "description": "Role of participant in encounter.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "period": {
              "description": "The period of time that the specified participant was present during the encounter. These can overlap or be sub-sets of the overall encounters period.",
              "$ref": "#/definitions/Period"
            },
            "individual": {
              "description": "Persons involved in the encounter other than the patient.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Encounter.Hospitalization": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.",
          "properties": {
            "preAdmissionIdentifier": {
              "description": "Pre-admission identifier.",
              "$ref": "#/definitions/Identifier"
            },
            "origin": {
              "description": "The location from which the patient came before admission.",
              "$ref": "#/definitions/Reference"
            },
            "admitSource": {
              "description": "From where patient was admitted (physician referral, transfer).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "admittingDiagnosis": {
              "description": "The admitting diagnosis field is used to record the diagnosis codes as reported by admitting practitioner. This could be different or in addition to the conditions reported as reason-condition(s) for the encounter.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "reAdmission": {
              "description": "Whether this hospitalization is a readmission and why if known.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "dietPreference": {
              "description": "Diet preferences reported by the patient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "specialCourtesy": {
              "description": "Special courtesies (VIP, board member).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "specialArrangement": {
              "description": "Wheelchair, translator, stretcher, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "destination": {
              "description": "Location to which the patient is discharged.",
              "$ref": "#/definitions/Reference"
            },
            "dischargeDisposition": {
              "description": "Category or kind of location after discharge.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "dischargeDiagnosis": {
              "description": "The final diagnosis given a patient before release from the hospital after all testing, surgery, and workup are complete.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "Encounter.Location": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An interaction between a patient and healthcare provider(s) for the purpose of providing healthcare service(s) or assessing the health status of a patient.",
          "properties": {
            "location": {
              "description": "The location where the encounter takes place.",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "The status of the participants\u0027 presence at the specified location during the period specified. If the participant is is no longer at the location, then the period will have an end date/time.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "Time period during which the patient was present at the location.",
              "$ref": "#/definitions/Period"
            }
          },
          "required": [
            "location"
          ]
        }
      ]
    },
    "Endpoint": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.",
          "properties": {
            "resourceType": {
              "description": "This is a Endpoint resource",
              "type": "string",
              "enum": [
                "Endpoint"
              ]
            },
            "status": {
              "description": "active | suspended | error | off.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "managingOrganization": {
              "description": "The organization that exposes the endpoint (even if technically another organisation is hosting this in the cloud, it is the organisation associated with the data).",
              "$ref": "#/definitions/Reference"
            },
            "contact": {
              "description": "Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "connectionType": {
              "description": "The type of channel to send notifications on.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "connectionType_": {
              "description": "Extensions for connectionType",
              "$ref": "#/definitions/Element"
            },
            "method": {
              "description": "The http verb to be used when calling this endpoint.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "period": {
              "description": "The interval during which the managing organization assumes the defined responsibility.",
              "$ref": "#/definitions/Period"
            },
            "addressUri": {
              "description": "The uri that describes the actual end-point to send messages to.",
              "type": "string"
            },
            "addressUri_": {
              "description": "Extensions for addressUri",
              "$ref": "#/definitions/Element"
            },
            "addressString": {
              "description": "The uri that describes the actual end-point to send messages to.",
              "type": "string"
            },
            "addressString_": {
              "description": "Extensions for addressString",
              "$ref": "#/definitions/Element"
            },
            "payloadFormat": {
              "description": "The mime type to send the payload in - either application/xml+fhir, or application/json+fhir. If the mime type is blank, then there is no payload in the notification, just a notification.",
              "type": "string"
            },
            "payloadFormat_": {
              "description": "Extensions for payloadFormat",
              "$ref": "#/definitions/Element"
            },
            "payloadType": {
              "description": "The payload type describes the acceptable content that can be communicated on the endpoint.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "header": {
              "description": "Additional headers / information to send as part of the notification.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "header_": {
              "description": "Extensions for header",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "publicKey": {
              "description": "The public part of the \u0027keys\u0027 allocated to an Organization by an accredited body to support secure exchange of data over the internet. To be provided by the Organization, where available.",
              "type": "string"
            },
            "publicKey_": {
              "description": "Extensions for publicKey",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "payloadType",
            "resourceType"
          ]
        }
      ]
    },
    "EnrollmentRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides the insurance enrollment details to the insurer regarding a specified coverage.",
          "properties": {
            "resourceType": {
              "description": "This is a EnrollmentRequest resource",
              "type": "string",
              "enum": [
                "EnrollmentRequest"
              ]
            },
            "identifier": {
              "description": "The Response business identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "ruleset": {
              "description": "The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when this resource was created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "target": {
              "description": "The Insurer who is target  of the request.",
              "$ref": "#/definitions/Reference"
            },
            "provider": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "organization": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "subject": {
              "description": "Patient Resource.",
              "$ref": "#/definitions/Reference"
            },
            "coverage": {
              "description": "Reference to the program or plan identification, underwriter or payor.",
              "$ref": "#/definitions/Reference"
            },
            "relationship": {
              "description": "The relationship of the patient to the subscriber.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "coverage",
            "subject",
            "relationship",
            "resourceType"
          ]
        }
      ]
    },
    "EnrollmentResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides enrollment and plan details from the processing of an Enrollment resource.",
          "properties": {
            "resourceType": {
              "description": "This is a EnrollmentResponse resource",
              "type": "string",
              "enum": [
                "EnrollmentResponse"
              ]
            },
            "identifier": {
              "description": "The Response business identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "request": {
              "description": "Original request resource reference.",
              "$ref": "#/definitions/Reference"
            },
            "outcome": {
              "description": "Transaction status: error, complete.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "outcome_": {
              "description": "Extensions for outcome",
              "$ref": "#/definitions/Element"
            },
            "disposition": {
              "description": "A description of the status of the adjudication.",
              "type": "string"
            },
            "disposition_": {
              "description": "Extensions for disposition",
              "$ref": "#/definitions/Element"
            },
            "ruleset": {
              "description": "The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when the enclosed suite of services were performed or completed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "organization": {
              "description": "The Insurer who produced this adjudicated response.",
              "$ref": "#/definitions/Reference"
            },
            "requestProvider": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "requestOrganization": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "EpisodeOfCare": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.",
          "properties": {
            "resourceType": {
              "description": "This is a EpisodeOfCare resource",
              "type": "string",
              "enum": [
                "EpisodeOfCare"
              ]
            },
            "identifier": {
              "description": "Identifier(s) by which this EpisodeOfCare is known.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "planned | waitlist | active | onhold | finished | cancelled.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "statusHistory": {
              "description": "The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/EpisodeOfCare.StatusHistory"
              }
            },
            "type": {
              "description": "A classification of the type of episode of care; e.g. specialist referral, disease management, type of funded care.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "condition": {
              "description": "A list of conditions/problems/diagnoses that this episode of care is intended to be providing care for.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "patient": {
              "description": "The patient that this EpisodeOfCare applies to.",
              "$ref": "#/definitions/Reference"
            },
            "managingOrganization": {
              "description": "The organization that has assumed the specific responsibilities for the specified duration.",
              "$ref": "#/definitions/Reference"
            },
            "period": {
              "description": "The interval during which the managing organization assumes the defined responsibility.",
              "$ref": "#/definitions/Period"
            },
            "referralRequest": {
              "description": "Referral Request(s) that are fulfilled by this EpisodeOfCare, incoming referrals.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "careManager": {
              "description": "The practitioner that is the care manager/care co-ordinator for this patient.",
              "$ref": "#/definitions/Reference"
            },
            "team": {
              "description": "The list of practitioners that may be facilitating this episode of care for specific purposes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "patient",
            "resourceType"
          ]
        }
      ]
    },
    "EpisodeOfCare.StatusHistory": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.",
          "properties": {
            "status": {
              "description": "planned | waitlist | active | onhold | finished | cancelled.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "The period during this EpisodeOfCare that the specific status applied.",
              "$ref": "#/definitions/Period"
            }
          },
          "required": [
            "period"
          ]
        }
      ]
    },
    "ExpansionProfile": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "resourceType": {
              "description": "This is a ExpansionProfile resource",
              "type": "string",
              "enum": [
                "ExpansionProfile"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this expansion profile when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this expansion profile is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Formal identifier that is used to identify this expansion profile when it is represented in other formats, or referenced in a specification, model, design or an instance.",
              "$ref": "#/definitions/Identifier"
            },
            "version": {
              "description": "Used to identify this version of the expansion profile when it is referenced in a specification, model, design or instance.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name for the expansion profile.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the expansion profile.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "This expansion profile was authored for testing purposes (or education/evaluation/marketing), and is not intended for genuine production usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the expansion profile.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpansionProfile.Contact"
              }
            },
            "date": {
              "description": "The date that the expansion profile status was last changed. The date must change when the business version changes, if it does, and it must change if the status code changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the use of the expansion profile - reason for definition,  conditions of use, etc. The description may include a list of expected usages for the expansion profile and can also describe the approach taken to build the expansion profile.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "codeSystem": {
              "description": "A set of criteria that provide the constraints imposed on the value set expansion by including or excluding codes from specific code systems (or versions).",
              "$ref": "#/definitions/ExpansionProfile.CodeSystem"
            },
            "includeDesignations": {
              "description": "Controls whether concept designations are to be included or excluded in value set expansions.",
              "type": "true | false"
            },
            "includeDesignations_": {
              "description": "Extensions for includeDesignations",
              "$ref": "#/definitions/Element"
            },
            "designation": {
              "description": "A set of criteria that provide the constraints imposed on the value set expansion by including or excluding designations.",
              "$ref": "#/definitions/ExpansionProfile.Designation"
            },
            "includeDefinition": {
              "description": "Controls whether the value set definition is included or excluded in value set expansions.",
              "type": "true | false"
            },
            "includeDefinition_": {
              "description": "Extensions for includeDefinition",
              "$ref": "#/definitions/Element"
            },
            "includeInactive": {
              "description": "Controls whether inactive concepts are included or excluded in value set expansions.",
              "type": "true | false"
            },
            "includeInactive_": {
              "description": "Extensions for includeInactive",
              "$ref": "#/definitions/Element"
            },
            "excludeNested": {
              "description": "Controls whether or not the value set expansion includes nested codes (i.e. ValueSet.expansion.contains.contains).",
              "type": "true | false"
            },
            "excludeNested_": {
              "description": "Extensions for excludeNested",
              "$ref": "#/definitions/Element"
            },
            "excludeNotForUI": {
              "description": "Controls whether or not the value set expansion includes codes which cannot be displayed in user interfaces.",
              "type": "true | false"
            },
            "excludeNotForUI_": {
              "description": "Extensions for excludeNotForUI",
              "$ref": "#/definitions/Element"
            },
            "excludePostCoordinated": {
              "description": "Controls whether or not the value set expansion includes post coordinated codes.",
              "type": "true | false"
            },
            "excludePostCoordinated_": {
              "description": "Extensions for excludePostCoordinated",
              "$ref": "#/definitions/Element"
            },
            "displayLanguage": {
              "description": "Specifies the language to be used for description in the expansions i.e. the language to be used for ValueSet.expansion.contains.display.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "displayLanguage_": {
              "description": "Extensions for displayLanguage",
              "$ref": "#/definitions/Element"
            },
            "limitedExpansion": {
              "description": "If the value set being expanded is incomplete (because it is too big to expand), return a limited expansion (a subset) with an indicator that expansion is incomplete.",
              "type": "true | false"
            },
            "limitedExpansion_": {
              "description": "Extensions for limitedExpansion",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "ExpansionProfile.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the expansion profile.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "ExpansionProfile.CodeSystem": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "include": {
              "description": "Code systems to be included in value set expansions.",
              "$ref": "#/definitions/ExpansionProfile.Include"
            },
            "exclude": {
              "description": "Code systems to be excluded from value set expansions.",
              "$ref": "#/definitions/ExpansionProfile.Exclude"
            }
          }
        }
      ]
    },
    "ExpansionProfile.Include": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "codeSystem": {
              "description": "A data group for each code system to be included.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpansionProfile.CodeSystem1"
              }
            }
          },
          "required": [
            "codeSystem"
          ]
        }
      ]
    },
    "ExpansionProfile.CodeSystem1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "system": {
              "description": "An absolute URI which is the code system to be included.",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version of the code system from which codes in the expansion should be included.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ExpansionProfile.Exclude": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "codeSystem": {
              "description": "A data group for each code system to be excluded.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpansionProfile.CodeSystem2"
              }
            }
          },
          "required": [
            "codeSystem"
          ]
        }
      ]
    },
    "ExpansionProfile.CodeSystem2": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "system": {
              "description": "An absolute URI which is the code system to be excluded.",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version of the code system from which codes in the expansion should be excluded.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ExpansionProfile.Designation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "include": {
              "description": "Designations to be included.",
              "$ref": "#/definitions/ExpansionProfile.Include1"
            },
            "exclude": {
              "description": "Designations to be excluded.",
              "$ref": "#/definitions/ExpansionProfile.Exclude1"
            }
          }
        }
      ]
    },
    "ExpansionProfile.Include1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "designation": {
              "description": "A data group for each designation to be included.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpansionProfile.Designation1"
              }
            }
          }
        }
      ]
    },
    "ExpansionProfile.Designation1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "language": {
              "description": "The language this designation is defined for.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "language_": {
              "description": "Extensions for language",
              "$ref": "#/definitions/Element"
            },
            "use": {
              "description": "Designation uses for inclusion in the expansion.",
              "$ref": "#/definitions/Coding"
            }
          }
        }
      ]
    },
    "ExpansionProfile.Exclude1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "designation": {
              "description": "A data group for each designation to be excluded.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExpansionProfile.Designation2"
              }
            }
          }
        }
      ]
    },
    "ExpansionProfile.Designation2": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Resource to define constraints on the Expansion of a FHIR ValueSet.",
          "properties": {
            "language": {
              "description": "The language this designation is defined for.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "language_": {
              "description": "Extensions for language",
              "$ref": "#/definitions/Element"
            },
            "use": {
              "description": "Designation uses for exclusion in the expansion.",
              "$ref": "#/definitions/Coding"
            }
          }
        }
      ]
    },
    "ExplanationOfBenefit": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "resourceType": {
              "description": "This is a ExplanationOfBenefit resource",
              "type": "string",
              "enum": [
                "ExplanationOfBenefit"
              ]
            },
            "identifier": {
              "description": "The EOB Business Identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "claimIdentifier": {
              "description": "The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.",
              "$ref": "#/definitions/Identifier"
            },
            "claimReference": {
              "description": "The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.",
              "$ref": "#/definitions/Reference"
            },
            "claimResponseIdentifier": {
              "description": "The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.",
              "$ref": "#/definitions/Identifier"
            },
            "claimResponseReference": {
              "description": "The business identifier for the instance: invoice number, claim number, pre-determination or pre-authorization number.",
              "$ref": "#/definitions/Reference"
            },
            "type": {
              "description": "The category of claim.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "subType": {
              "description": "A finer grained suite of claim subtype codes which may convey Inpatient vs Outpatient and/or a specialty service. In the US the BillType.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "ruleset": {
              "description": "The version of the specification on which this instance relies.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The version of the specification from which the original instance was created.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when the EOB was created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "billablePeriod": {
              "description": "The billable period for which charges are being submitted.",
              "$ref": "#/definitions/Period"
            },
            "outcome": {
              "description": "Processing outcome errror, partial or complete processing.",
              "$ref": "#/definitions/Coding"
            },
            "disposition": {
              "description": "A description of the status of the adjudication.",
              "type": "string"
            },
            "disposition_": {
              "description": "Extensions for disposition",
              "$ref": "#/definitions/Element"
            },
            "providerIdentifier": {
              "description": "The provider which is responsible for the claim.",
              "$ref": "#/definitions/Identifier"
            },
            "providerReference": {
              "description": "The provider which is responsible for the claim.",
              "$ref": "#/definitions/Reference"
            },
            "organizationIdentifier": {
              "description": "The provider which is responsible for the claim.",
              "$ref": "#/definitions/Identifier"
            },
            "organizationReference": {
              "description": "The provider which is responsible for the claim.",
              "$ref": "#/definitions/Reference"
            },
            "facilityIdentifier": {
              "description": "Facility where the services were provided.",
              "$ref": "#/definitions/Identifier"
            },
            "facilityReference": {
              "description": "Facility where the services were provided.",
              "$ref": "#/definitions/Reference"
            },
            "related": {
              "description": "Other claims which are related to this claim such as prior claim versions or for related services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Related"
              }
            },
            "prescriptionIdentifier": {
              "description": "Prescription to support the dispensing of Pharmacy or Vision products.",
              "$ref": "#/definitions/Identifier"
            },
            "prescriptionReference": {
              "description": "Prescription to support the dispensing of Pharmacy or Vision products.",
              "$ref": "#/definitions/Reference"
            },
            "originalPrescriptionIdentifier": {
              "description": "Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products.",
              "$ref": "#/definitions/Identifier"
            },
            "originalPrescriptionReference": {
              "description": "Original prescription which has been superceded by this prescription to support the dispensing of pharmacy services, medications or products.",
              "$ref": "#/definitions/Reference"
            },
            "payee": {
              "description": "The party to be reimbursed for the services.",
              "$ref": "#/definitions/ExplanationOfBenefit.Payee"
            },
            "referralIdentifier": {
              "description": "The referral resource which lists the date, practitioner, reason and other supporting information.",
              "$ref": "#/definitions/Identifier"
            },
            "referralReference": {
              "description": "The referral resource which lists the date, practitioner, reason and other supporting information.",
              "$ref": "#/definitions/Reference"
            },
            "information": {
              "description": "Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues. Often there are mutiple jurisdiction specific valuesets which are required.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Information"
              }
            },
            "diagnosis": {
              "description": "Ordered list of patient diagnosis for which care is sought.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Diagnosis"
              }
            },
            "procedure": {
              "description": "Ordered list of patient procedures performed to support the adjudication.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Procedure"
              }
            },
            "patientIdentifier": {
              "description": "Patient Resource.",
              "$ref": "#/definitions/Identifier"
            },
            "patientReference": {
              "description": "Patient Resource.",
              "$ref": "#/definitions/Reference"
            },
            "precedence": {
              "description": "Precedence (primary, secondary, etc.).",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "precedence_": {
              "description": "Extensions for precedence",
              "$ref": "#/definitions/Element"
            },
            "coverage": {
              "description": "Financial instrument by which payment information for health care.",
              "$ref": "#/definitions/ExplanationOfBenefit.Coverage"
            },
            "accident": {
              "description": "An accident which resulted in the need for healthcare services.",
              "$ref": "#/definitions/ExplanationOfBenefit.Accident"
            },
            "item": {
              "description": "First tier of goods and services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Item"
              }
            },
            "addItem": {
              "description": "The first tier service adjudications for payor added services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.AddItem"
              }
            },
            "missingTeeth": {
              "description": "A list of teeth which would be expected but are not found due to having been previously  extracted or for other reasons.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.MissingTeeth"
              }
            },
            "totalCost": {
              "description": "The total cost of the services reported.",
              "$ref": "#/definitions/Money"
            },
            "unallocDeductable": {
              "description": "The amount of deductable applied which was not allocated to any particular service line.",
              "$ref": "#/definitions/Money"
            },
            "totalBenefit": {
              "description": "Total amount of benefit payable (Equal to sum of the Benefit amounts from all detail lines and additions less the Unallocated Deductable).",
              "$ref": "#/definitions/Money"
            },
            "paymentAdjustment": {
              "description": "Adjustment to the payment of this transaction which is not related to adjudication of this transaction.",
              "$ref": "#/definitions/Money"
            },
            "paymentAdjustmentReason": {
              "description": "Reason for the payment adjustment.",
              "$ref": "#/definitions/Coding"
            },
            "paymentDate": {
              "description": "Estimated payment date.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "paymentDate_": {
              "description": "Extensions for paymentDate",
              "$ref": "#/definitions/Element"
            },
            "paymentAmount": {
              "description": "Payable less any payment adjustment.",
              "$ref": "#/definitions/Money"
            },
            "paymentRef": {
              "description": "Payment identifer.",
              "$ref": "#/definitions/Identifier"
            },
            "reserved": {
              "description": "Status of funds reservation (For provider, for Patient, None).",
              "$ref": "#/definitions/Coding"
            },
            "form": {
              "description": "The form to be used for printing the content.",
              "$ref": "#/definitions/Coding"
            },
            "note": {
              "description": "Note text.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Note"
              }
            },
            "benefitBalance": {
              "description": "Balance by Benefit Category.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.BenefitBalance"
              }
            }
          },
          "required": [
            "coverage",
            "resourceType"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.Related": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "claimIdentifier": {
              "description": "Other claims which are related to this claim such as prior claim versions or for related services.",
              "$ref": "#/definitions/Identifier"
            },
            "claimReference": {
              "description": "Other claims which are related to this claim such as prior claim versions or for related services.",
              "$ref": "#/definitions/Reference"
            },
            "relationship": {
              "description": "For example prior or umbrella.",
              "$ref": "#/definitions/Coding"
            },
            "reference": {
              "description": "An alternate organizational reference to the case or file to which this particular claim pertains - eg Property/Casualy insurer claim # or Workers Compensation case # .",
              "$ref": "#/definitions/Identifier"
            }
          }
        }
      ]
    },
    "ExplanationOfBenefit.Payee": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "type": {
              "description": "Type of Party to be reimbursed: Subscriber, provider, other.",
              "$ref": "#/definitions/Coding"
            },
            "resourceType": {
              "description": "organization | patient | practitioner | relatedperson.",
              "$ref": "#/definitions/Coding"
            },
            "partyIdentifier": {
              "description": "Party to be reimbursed: Subscriber, provider, other.",
              "$ref": "#/definitions/Identifier"
            },
            "partyReference": {
              "description": "Party to be reimbursed: Subscriber, provider, other.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ExplanationOfBenefit.Information": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "category": {
              "description": "The general class of the information supplied: information; exception; accident, employment; onset, etc.",
              "$ref": "#/definitions/Coding"
            },
            "code": {
              "description": "System and code pertaining to the specific information regarding special conditions relating to the setting, treatment or patient  for which care is sought which may influence the adjudication.",
              "$ref": "#/definitions/Coding"
            },
            "timingDate": {
              "description": "The date when or period to which this information refers.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "timingDate_": {
              "description": "Extensions for timingDate",
              "$ref": "#/definitions/Element"
            },
            "timingPeriod": {
              "description": "The date when or period to which this information refers.",
              "$ref": "#/definitions/Period"
            },
            "valueString": {
              "description": "Additional data.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueQuantity": {
              "description": "Additional data.",
              "$ref": "#/definitions/Quantity"
            }
          },
          "required": [
            "category"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.Diagnosis": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "sequence": {
              "description": "Sequence of diagnosis which serves to order and provide a link.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "diagnosis": {
              "description": "The diagnosis.",
              "$ref": "#/definitions/Coding"
            },
            "type": {
              "description": "The type of the Diagnosis, for example: admitting,.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "drg": {
              "description": "The Diagnosis Related Group (DRG) code based on the assigned grouping code system.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "diagnosis"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.Procedure": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "sequence": {
              "description": "Sequence of procedures which serves to order and provide a link.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "Date and optionally time the procedure was performed .",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "procedureCoding": {
              "description": "The procedure code.",
              "$ref": "#/definitions/Coding"
            },
            "procedureReference": {
              "description": "The procedure code.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ExplanationOfBenefit.Coverage": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "coverageIdentifier": {
              "description": "Reference to the program or plan identification, underwriter or payor.",
              "$ref": "#/definitions/Identifier"
            },
            "coverageReference": {
              "description": "Reference to the program or plan identification, underwriter or payor.",
              "$ref": "#/definitions/Reference"
            },
            "preAuthRef": {
              "description": "A list of references from the Insurer to which these services pertain.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "preAuthRef_": {
              "description": "Extensions for preAuthRef",
              "items": {
                "$ref": "#/definitions/Element"
              }
            }
          }
        }
      ]
    },
    "ExplanationOfBenefit.Accident": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "date": {
              "description": "Date of an accident which these services are addressing.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Type of accident: work, auto, etc.",
              "$ref": "#/definitions/Coding"
            },
            "locationAddress": {
              "description": "Where the accident occurred.",
              "$ref": "#/definitions/Address"
            },
            "locationReference": {
              "description": "Where the accident occurred.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ExplanationOfBenefit.Item": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "sequence": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of product or service.",
              "$ref": "#/definitions/Coding"
            },
            "careTeam": {
              "description": "The members of the team who provided the overall service as well as their role and whether responsible and qualifications.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.CareTeam"
              }
            },
            "diagnosisLinkId": {
              "description": "Diagnosis applicable for this service or product line.",
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "[1-9][0-9]*"
              }
            },
            "diagnosisLinkId_": {
              "description": "Extensions for diagnosisLinkId",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "service": {
              "description": "If a grouping item then \u0027GROUP\u0027 otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.",
              "$ref": "#/definitions/Coding"
            },
            "serviceModifier": {
              "description": "Unusual circumstances which may influence adjudication.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "modifier": {
              "description": "Item typification or modifiers codes, eg for Oral whether the treatment is cosmetic or associated with TMJ, or an appliance was lost or stolen.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "programCode": {
              "description": "For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "servicedDate": {
              "description": "The date or dates when the enclosed suite of services were performed or completed.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "servicedDate_": {
              "description": "Extensions for servicedDate",
              "$ref": "#/definitions/Element"
            },
            "servicedPeriod": {
              "description": "The date or dates when the enclosed suite of services were performed or completed.",
              "$ref": "#/definitions/Period"
            },
            "place": {
              "description": "Where the service was provided.",
              "$ref": "#/definitions/Coding"
            },
            "quantity": {
              "description": "The number of repetitions of a service or product.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "unitPrice": {
              "description": "If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.",
              "$ref": "#/definitions/Money"
            },
            "factor": {
              "description": "A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "factor_": {
              "description": "Extensions for factor",
              "$ref": "#/definitions/Element"
            },
            "points": {
              "description": "An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the good or service delivered. The concept of Points allows for assignment of point values for services and/or goods, such that a monetary amount can be assigned to each point.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "points_": {
              "description": "Extensions for points",
              "$ref": "#/definitions/Element"
            },
            "net": {
              "description": "The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points \u003d net Amount. Quantity, factor and points are assumed to be 1 if not supplied.",
              "$ref": "#/definitions/Money"
            },
            "udi": {
              "description": "List of Unique Device Identifiers associated with this line item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "bodySite": {
              "description": "Physical service site on the patient (limb, tooth, etc).",
              "$ref": "#/definitions/Coding"
            },
            "subSite": {
              "description": "A region or surface of the site, eg. limb region or tooth surface(s).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "noteNumber": {
              "description": "A list of note references to the notes provided below.",
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "[1-9][0-9]*"
              }
            },
            "noteNumber_": {
              "description": "Extensions for noteNumber",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Adjudication"
              }
            },
            "detail": {
              "description": "Second tier of goods and services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Detail"
              }
            },
            "prosthesis": {
              "description": "The materials and placement date of prior fixed prosthesis.",
              "$ref": "#/definitions/ExplanationOfBenefit.Prosthesis"
            }
          },
          "required": [
            "service",
            "type"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.CareTeam": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "providerIdentifier": {
              "description": "The members of the team who provided the overall service.",
              "$ref": "#/definitions/Identifier"
            },
            "providerReference": {
              "description": "The members of the team who provided the overall service.",
              "$ref": "#/definitions/Reference"
            },
            "responsible": {
              "description": "The practitioner who is billing and responsible for the claimed services rendered to the patient.",
              "type": "true | false"
            },
            "responsible_": {
              "description": "Extensions for responsible",
              "$ref": "#/definitions/Element"
            },
            "role": {
              "description": "The lead, assisting or supervising practitioner and their discipline if a multidisiplinary team.",
              "$ref": "#/definitions/Coding"
            },
            "qualification": {
              "description": "The qualification which is applicable for this service.",
              "$ref": "#/definitions/Coding"
            }
          }
        }
      ]
    },
    "ExplanationOfBenefit.Adjudication": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "category": {
              "description": "Code indicating: Co-Pay, deductable, elegible, benefit, tax, etc.",
              "$ref": "#/definitions/Coding"
            },
            "reason": {
              "description": "Adjudication reason such as limit reached.",
              "$ref": "#/definitions/Coding"
            },
            "amount": {
              "description": "Monitory amount associated with the code.",
              "$ref": "#/definitions/Money"
            },
            "value": {
              "description": "A non-monetary value for example a percentage. Mutually exclusive to the amount element above.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "category"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.Detail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "sequence": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of product or service.",
              "$ref": "#/definitions/Coding"
            },
            "service": {
              "description": "If a grouping item then \u0027GROUP\u0027 otherwise it is a node therefore a code to indicate the Professional Service or Product supplied.",
              "$ref": "#/definitions/Coding"
            },
            "programCode": {
              "description": "For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "quantity": {
              "description": "The number of repetitions of a service or product.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "unitPrice": {
              "description": "If the item is a node then this is the fee for the product or service, otherwise this is the total of the fees for the children of the group.",
              "$ref": "#/definitions/Money"
            },
            "factor": {
              "description": "A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "factor_": {
              "description": "Extensions for factor",
              "$ref": "#/definitions/Element"
            },
            "points": {
              "description": "An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the good or service delivered. The concept of Points allows for assignment of point values for services and/or goods, such that a monetary amount can be assigned to each point.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "points_": {
              "description": "Extensions for points",
              "$ref": "#/definitions/Element"
            },
            "net": {
              "description": "The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points \u003d net Amount. Quantity, factor and points are assumed to be 1 if not supplied.",
              "$ref": "#/definitions/Money"
            },
            "udi": {
              "description": "List of Unique Device Identifiers associated with this line item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Adjudication"
              }
            },
            "subDetail": {
              "description": "Third tier of goods and services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.SubDetail"
              }
            }
          },
          "required": [
            "service",
            "type"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.SubDetail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "sequence": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of product or service.",
              "$ref": "#/definitions/Coding"
            },
            "service": {
              "description": "The fee for an addittional service or product or charge.",
              "$ref": "#/definitions/Coding"
            },
            "programCode": {
              "description": "For programs which require reson codes for the inclusion, covering, of this billed item under the program or sub-program.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "quantity": {
              "description": "The number of repetitions of a service or product.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "unitPrice": {
              "description": "The fee for an addittional service or product or charge.",
              "$ref": "#/definitions/Money"
            },
            "factor": {
              "description": "A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "factor_": {
              "description": "Extensions for factor",
              "$ref": "#/definitions/Element"
            },
            "points": {
              "description": "An amount that expresses the weighting (based on difficulty, cost and/or resource intensiveness) associated with the good or service delivered. The concept of Points allows for assignment of point values for services and/or goods, such that a monetary amount can be assigned to each point.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "points_": {
              "description": "Extensions for points",
              "$ref": "#/definitions/Element"
            },
            "net": {
              "description": "The quantity times the unit price for an addittional service or product or charge. For example, the formula: unit Quantity * unit Price (Cost per Point) * factor Number  * points \u003d net Amount. Quantity, factor and points are assumed to be 1 if not supplied.",
              "$ref": "#/definitions/Money"
            },
            "udi": {
              "description": "List of Unique Device Identifiers associated with this line item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Adjudication"
              }
            }
          },
          "required": [
            "service",
            "type"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.Prosthesis": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "initial": {
              "description": "Indicates whether this is the initial placement of a fixed prosthesis.",
              "type": "true | false"
            },
            "initial_": {
              "description": "Extensions for initial",
              "$ref": "#/definitions/Element"
            },
            "priorDate": {
              "description": "Date of the initial placement.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "priorDate_": {
              "description": "Extensions for priorDate",
              "$ref": "#/definitions/Element"
            },
            "priorMaterial": {
              "description": "Material of the prior denture or bridge prosthesis (Oral).",
              "$ref": "#/definitions/Coding"
            }
          }
        }
      ]
    },
    "ExplanationOfBenefit.AddItem": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "sequenceLinkId": {
              "description": "List of input service items which this service line is intended to replace.",
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "[1-9][0-9]*"
              }
            },
            "sequenceLinkId_": {
              "description": "Extensions for sequenceLinkId",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "service": {
              "description": "A code to indicate the Professional Service or Product supplied.",
              "$ref": "#/definitions/Coding"
            },
            "fee": {
              "description": "The fee charged for the professional service or product.",
              "$ref": "#/definitions/Money"
            },
            "noteNumberLinkId": {
              "description": "A list of note references to the notes provided below.",
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "[1-9][0-9]*"
              }
            },
            "noteNumberLinkId_": {
              "description": "Extensions for noteNumberLinkId",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Adjudication"
              }
            },
            "detail": {
              "description": "The second tier service adjudications for payor added services.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Detail1"
              }
            }
          },
          "required": [
            "service"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.Detail1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "service": {
              "description": "A code to indicate the Professional Service or Product supplied.",
              "$ref": "#/definitions/Coding"
            },
            "fee": {
              "description": "The fee charged for the professional service or product.",
              "$ref": "#/definitions/Money"
            },
            "adjudication": {
              "description": "The adjudications results.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Adjudication"
              }
            }
          },
          "required": [
            "service"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.MissingTeeth": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "tooth": {
              "description": "The code identifying which tooth is missing.",
              "$ref": "#/definitions/Coding"
            },
            "reason": {
              "description": "Missing reason may be: E-extraction, O-other.",
              "$ref": "#/definitions/Coding"
            },
            "extractionDate": {
              "description": "The date of the extraction either known from records or patient reported estimate.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "extractionDate_": {
              "description": "Extensions for extractionDate",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "tooth"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.Note": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "number": {
              "description": "An integer associated with each note which may be referred to from each service line item.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "number_": {
              "description": "Extensions for number",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The note purpose: Print/Display.",
              "$ref": "#/definitions/Coding"
            },
            "text": {
              "description": "The note text.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ExplanationOfBenefit.BenefitBalance": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "category": {
              "description": "Dental, Vision, Medical, Pharmacy, Rehab etc.",
              "$ref": "#/definitions/Coding"
            },
            "subCategory": {
              "description": "Dental: basic, major, ortho; Vision exam, glasses, contacts; etc.",
              "$ref": "#/definitions/Coding"
            },
            "network": {
              "description": "Network designation.",
              "$ref": "#/definitions/Coding"
            },
            "unit": {
              "description": "Unit designation: individual or family.",
              "$ref": "#/definitions/Coding"
            },
            "term": {
              "description": "The term or period of the values such as \u0027maximum lifetime benefit\u0027 or \u0027maximum annual vistis\u0027.",
              "$ref": "#/definitions/Coding"
            },
            "financial": {
              "description": "Benefits Used to date.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExplanationOfBenefit.Financial"
              }
            }
          },
          "required": [
            "category"
          ]
        }
      ]
    },
    "ExplanationOfBenefit.Financial": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides: the claim details; adjudication details from the processing of a Claim; and optionally account balance information, for informing the subscriber of the benefits provided.",
          "properties": {
            "type": {
              "description": "Deductable, visits, benefit amount.",
              "$ref": "#/definitions/Coding"
            },
            "benefitUnsignedInt": {
              "description": "Benefits allowed.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "benefitUnsignedInt_": {
              "description": "Extensions for benefitUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "benefitMoney": {
              "description": "Benefits allowed.",
              "$ref": "#/definitions/Money"
            },
            "benefitUsedUnsignedInt": {
              "description": "Benefits used.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "benefitUsedUnsignedInt_": {
              "description": "Extensions for benefitUsedUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "benefitUsedMoney": {
              "description": "Benefits used.",
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "FamilyMemberHistory": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.",
          "properties": {
            "resourceType": {
              "description": "This is a FamilyMemberHistory resource",
              "type": "string",
              "enum": [
                "FamilyMemberHistory"
              ]
            },
            "identifier": {
              "description": "This records identifiers associated with this family member history record that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "patient": {
              "description": "The person who this history concerns.",
              "$ref": "#/definitions/Reference"
            },
            "date": {
              "description": "The date (and possibly time) when the family member history was taken.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "A code specifying a state of a Family Member History record.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "This will either be a name or a description; e.g. \"Aunt Susan\", \"my cousin with the red hair\".",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "relationship": {
              "description": "The type of relationship this person has to the patient (father, mother, brother etc.).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "gender": {
              "description": "Administrative Gender - the gender that the relative is considered to have for administration and record keeping purposes.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "gender_": {
              "description": "Extensions for gender",
              "$ref": "#/definitions/Element"
            },
            "bornPeriod": {
              "description": "The actual or approximate date of birth of the relative.",
              "$ref": "#/definitions/Period"
            },
            "bornDate": {
              "description": "The actual or approximate date of birth of the relative.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "bornDate_": {
              "description": "Extensions for bornDate",
              "$ref": "#/definitions/Element"
            },
            "bornString": {
              "description": "The actual or approximate date of birth of the relative.",
              "type": "string"
            },
            "bornString_": {
              "description": "Extensions for bornString",
              "$ref": "#/definitions/Element"
            },
            "ageAge": {
              "description": "The actual or approximate age of the relative at the time the family member history is recorded.",
              "$ref": "#/definitions/Age"
            },
            "ageRange": {
              "description": "The actual or approximate age of the relative at the time the family member history is recorded.",
              "$ref": "#/definitions/Range"
            },
            "ageString": {
              "description": "The actual or approximate age of the relative at the time the family member history is recorded.",
              "type": "string"
            },
            "ageString_": {
              "description": "Extensions for ageString",
              "$ref": "#/definitions/Element"
            },
            "deceasedBoolean": {
              "description": "Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.",
              "type": "true | false"
            },
            "deceasedBoolean_": {
              "description": "Extensions for deceasedBoolean",
              "$ref": "#/definitions/Element"
            },
            "deceasedAge": {
              "description": "Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.",
              "$ref": "#/definitions/Age"
            },
            "deceasedRange": {
              "description": "Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.",
              "$ref": "#/definitions/Range"
            },
            "deceasedDate": {
              "description": "Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "deceasedDate_": {
              "description": "Extensions for deceasedDate",
              "$ref": "#/definitions/Element"
            },
            "deceasedString": {
              "description": "Deceased flag or the actual or approximate age of the relative at the time of death for the family member history record.",
              "type": "string"
            },
            "deceasedString_": {
              "description": "Extensions for deceasedString",
              "$ref": "#/definitions/Element"
            },
            "note": {
              "description": "This property allows a non condition-specific note to the made about the related person. Ideally, the note would be in the condition property, but this is not always possible.",
              "$ref": "#/definitions/Annotation"
            },
            "condition": {
              "description": "The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/FamilyMemberHistory.Condition"
              }
            }
          },
          "required": [
            "patient",
            "relationship",
            "resourceType"
          ]
        }
      ]
    },
    "FamilyMemberHistory.Condition": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Significant health events and conditions for a person related to the patient relevant in the context of care for the patient.",
          "properties": {
            "code": {
              "description": "The actual condition specified. Could be a coded condition (like MI or Diabetes) or a less specific string like \u0027cancer\u0027 depending on how much is known about the condition and the capabilities of the creating system.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "outcome": {
              "description": "Indicates what happened as a result of this condition.  If the condition resulted in death, deceased date is captured on the relation.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "onsetAge": {
              "description": "Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.",
              "$ref": "#/definitions/Age"
            },
            "onsetRange": {
              "description": "Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.",
              "$ref": "#/definitions/Range"
            },
            "onsetPeriod": {
              "description": "Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.",
              "$ref": "#/definitions/Period"
            },
            "onsetString": {
              "description": "Either the age of onset, range of approximate age or descriptive string can be recorded.  For conditions with multiple occurrences, this describes the first known occurrence.",
              "type": "string"
            },
            "onsetString_": {
              "description": "Extensions for onsetString",
              "$ref": "#/definitions/Element"
            },
            "note": {
              "description": "An area where general notes can be placed about this specific condition.",
              "$ref": "#/definitions/Annotation"
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "Flag": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Prospective warnings of potential issues when providing care to the patient.",
          "properties": {
            "resourceType": {
              "description": "This is a Flag resource",
              "type": "string",
              "enum": [
                "Flag"
              ]
            },
            "identifier": {
              "description": "Identifier assigned to the flag for external use (outside the FHIR environment).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "category": {
              "description": "Allows an flag to be divided into different categories like clinical, administrative etc. Intended to be used as a means of filtering which flags are displayed to particular user or in a given context.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "status": {
              "description": "Supports basic workflow.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "The period of time from the activation of the flag to inactivation of the flag. If the flag is active, the end of the period should be unspecified.",
              "$ref": "#/definitions/Period"
            },
            "subject": {
              "description": "The patient, location, group , organization , or practitioner this is about record this flag is associated with.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "This alert is only relevant during the encounter.",
              "$ref": "#/definitions/Reference"
            },
            "author": {
              "description": "The person, organization or device that created the flag.",
              "$ref": "#/definitions/Reference"
            },
            "code": {
              "description": "The coded value or textual component of the flag to display to the user.",
              "$ref": "#/definitions/CodeableConcept"
            }
          },
          "required": [
            "code",
            "subject",
            "resourceType"
          ]
        }
      ]
    },
    "Goal": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.",
          "properties": {
            "resourceType": {
              "description": "This is a Goal resource",
              "type": "string",
              "enum": [
                "Goal"
              ]
            },
            "identifier": {
              "description": "This records identifiers associated with this care plan that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "subject": {
              "description": "Identifies the patient, group or organization for whom the goal is being established.",
              "$ref": "#/definitions/Reference"
            },
            "startDate": {
              "description": "The date or event after which the goal should begin being pursued.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "startDate_": {
              "description": "Extensions for startDate",
              "$ref": "#/definitions/Element"
            },
            "startCodeableConcept": {
              "description": "The date or event after which the goal should begin being pursued.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "targetDate": {
              "description": "Indicates either the date or the duration after start by which the goal should be met.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "targetDate_": {
              "description": "Extensions for targetDate",
              "$ref": "#/definitions/Element"
            },
            "targetDuration": {
              "description": "Indicates either the date or the duration after start by which the goal should be met.",
              "$ref": "#/definitions/Duration"
            },
            "category": {
              "description": "Indicates a category the goal falls within.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "description": {
              "description": "Human-readable description of a specific desired objective of care.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "Indicates whether the goal has been reached and is still considered relevant.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "statusDate": {
              "description": "Identifies when the current status.  I.e. When initially created, when achieved, when cancelled, etc.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "statusDate_": {
              "description": "Extensions for statusDate",
              "$ref": "#/definitions/Element"
            },
            "statusReason": {
              "description": "Captures the reason for the current status.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "expressedBy": {
              "description": "Indicates whose goal this is - patient goal, practitioner goal, etc.",
              "$ref": "#/definitions/Reference"
            },
            "priority": {
              "description": "Identifies the mutually agreed level of importance associated with reaching/sustaining the goal.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "addresses": {
              "description": "The identified conditions and other health record elements that are intended to be addressed by the goal.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "note": {
              "description": "Any comments related to the goal.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "outcome": {
              "description": "Identifies the change (or lack of change) at the point where the goal was deepmed to be cancelled or achieved.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Goal.Outcome"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Goal.Outcome": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.",
          "properties": {
            "resultCodeableConcept": {
              "description": "Details of what\u0027s changed (or not changed).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "resultReference": {
              "description": "Details of what\u0027s changed (or not changed).",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Group": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn\u0027t an Organization.",
          "properties": {
            "resourceType": {
              "description": "This is a Group resource",
              "type": "string",
              "enum": [
                "Group"
              ]
            },
            "identifier": {
              "description": "A unique business identifier for this group.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "type": {
              "description": "Identifies the broad classification of the kind of resources the group includes.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "actual": {
              "description": "If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.",
              "type": "true | false"
            },
            "actual_": {
              "description": "Extensions for actual",
              "$ref": "#/definitions/Element"
            },
            "active": {
              "description": "Indicates whether the record for the group is available for use or is merely being retained for historical purposes.",
              "type": "true | false"
            },
            "active_": {
              "description": "Extensions for active",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "Provides a specific type of resource the group includes; e.g. \"cow\", \"syringe\", etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "name": {
              "description": "A label assigned to the group for human identification and communication.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "quantity": {
              "description": "A count of the number of resource instances that are part of the group.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "quantity_": {
              "description": "Extensions for quantity",
              "$ref": "#/definitions/Element"
            },
            "characteristic": {
              "description": "Identifies the traits shared by members of the group.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group.Characteristic"
              }
            },
            "member": {
              "description": "Identifies the resource instances that are members of the group.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group.Member"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Group.Characteristic": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn\u0027t an Organization.",
          "properties": {
            "code": {
              "description": "A code that identifies the kind of trait being asserted.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueCodeableConcept": {
              "description": "The value of the trait that holds (or does not hold - see \u0027exclude\u0027) for members of the group.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueBoolean": {
              "description": "The value of the trait that holds (or does not hold - see \u0027exclude\u0027) for members of the group.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueQuantity": {
              "description": "The value of the trait that holds (or does not hold - see \u0027exclude\u0027) for members of the group.",
              "$ref": "#/definitions/Quantity"
            },
            "valueRange": {
              "description": "The value of the trait that holds (or does not hold - see \u0027exclude\u0027) for members of the group.",
              "$ref": "#/definitions/Range"
            },
            "exclude": {
              "description": "If true, indicates the characteristic is one that is NOT held by members of the group.",
              "type": "true | false"
            },
            "exclude_": {
              "description": "Extensions for exclude",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.",
              "$ref": "#/definitions/Period"
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "Group.Member": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively and are not formally or legally recognized; i.e. a collection of entities that isn\u0027t an Organization.",
          "properties": {
            "entity": {
              "description": "A reference to the entity that is a member of the group. Must be consistent with Group.type.",
              "$ref": "#/definitions/Reference"
            },
            "period": {
              "description": "The period that the member was in the group, if known.",
              "$ref": "#/definitions/Period"
            },
            "inactive": {
              "description": "A flag to indicate that the member is no longer in the group, but previously may have been a member.",
              "type": "true | false"
            },
            "inactive_": {
              "description": "Extensions for inactive",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "entity"
          ]
        }
      ]
    },
    "GuidanceResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.",
          "properties": {
            "resourceType": {
              "description": "This is a GuidanceResponse resource",
              "type": "string",
              "enum": [
                "GuidanceResponse"
              ]
            },
            "requestId": {
              "description": "The id of the request associated with this response. If an id was given as part of the request, it will be reproduced here to enable the requester to more easily identify the response in a multi-request scenario.",
              "type": "string"
            },
            "requestId_": {
              "description": "Extensions for requestId",
              "$ref": "#/definitions/Element"
            },
            "module": {
              "description": "A reference to the knowledge module that was invoked.",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "The status of the response. If the evaluation is completed successfully, the status will indicate success. However, in order to complete the evaluation, the engine may require more information. In this case, the status will be data-required, and the response will contain a description of the additional required information. If the evaluation completed successfully, but the engine determines that a potentially more accurate response could be provided if more data was available, the status will be data-requested, and the response will contain a description of the additional requested information.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "evaluationMessage": {
              "description": "Messages resulting from the evaluation of the artifact or artifacts. As part of evaluating the request, the engine may produce informational or warning messages. These messages will be provided by this element.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "outputParameters": {
              "description": "The output parameters of the evaluation, if any. Many modules will result in the return of specific resources such as procedure or communication requests that are returned as part of the operation result. However, modules may define specific outputs that would be returned as the result of the evaluation, and these would be returned in this element.",
              "$ref": "#/definitions/Reference"
            },
            "action": {
              "description": "The actions, if any, produced by the evaluation of the artifact.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/GuidanceResponse.Action"
              }
            },
            "dataRequirement": {
              "description": "If the evaluation could not be completed due to lack of information, or additional information would potentially result in a more accurate response, this element will a description of the data required in order to proceed with the evaluation. A subsequent request to the service should include this data.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataRequirement"
              }
            }
          },
          "required": [
            "module",
            "resourceType"
          ]
        }
      ]
    },
    "GuidanceResponse.Action": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.",
          "properties": {
            "actionIdentifier": {
              "description": "A unique identifier for the action. The identifier SHALL be unique within the container in which it appears, and MAY be universally unique.",
              "$ref": "#/definitions/Identifier"
            },
            "label": {
              "description": "A user-visible label for the action.",
              "type": "string"
            },
            "label_": {
              "description": "Extensions for label",
              "$ref": "#/definitions/Element"
            },
            "title": {
              "description": "The title of the action displayed to a user.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A short description of the action used to provide a summary to display to the user.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "textEquivalent": {
              "description": "A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that may not be capable of interpreting it dynamically.",
              "type": "string"
            },
            "textEquivalent_": {
              "description": "Extensions for textEquivalent",
              "$ref": "#/definitions/Element"
            },
            "concept": {
              "description": "The concept represented by this action or its sub-actions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "supportingEvidence": {
              "description": "The evidence grade and the sources of evidence for this action.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            },
            "relatedAction": {
              "description": "A relationship to another action such as \"before\" or \"30-60 minutes after start of\".",
              "$ref": "#/definitions/GuidanceResponse.RelatedAction"
            },
            "documentation": {
              "description": "Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            },
            "participant": {
              "description": "The participant in the action.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "type": {
              "description": "The type of action to perform (create, update, remove).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "behavior": {
              "description": "A behavior associated with the action. Behaviors define how the action is to be presented and/or executed within the receiving environment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/GuidanceResponse.Behavior"
              }
            },
            "resource": {
              "description": "The resource that is the target of the action (e.g. CommunicationRequest).",
              "$ref": "#/definitions/Reference"
            },
            "action": {
              "description": "Sub actions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/GuidanceResponse.Action"
              }
            }
          }
        }
      ]
    },
    "GuidanceResponse.RelatedAction": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.",
          "properties": {
            "actionIdentifier": {
              "description": "The unique identifier of the related action.",
              "$ref": "#/definitions/Identifier"
            },
            "relationship": {
              "description": "The relationship of this action to the related action.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "relationship_": {
              "description": "Extensions for relationship",
              "$ref": "#/definitions/Element"
            },
            "offsetDuration": {
              "description": "A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.",
              "$ref": "#/definitions/Duration"
            },
            "offsetRange": {
              "description": "A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.",
              "$ref": "#/definitions/Range"
            },
            "anchor": {
              "description": "An optional indicator for how the relationship is anchored to the related action. For example \"before the start\" or \"before the end\" of the related action.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "anchor_": {
              "description": "Extensions for anchor",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "actionIdentifier"
          ]
        }
      ]
    },
    "GuidanceResponse.Behavior": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.",
          "properties": {
            "type": {
              "description": "The type of the behavior to be described, such as grouping, visual, or selection behaviors.",
              "$ref": "#/definitions/Coding"
            },
            "value": {
              "description": "The specific behavior. The code used here is determined by the type of behavior being described. For example, the grouping behavior uses the grouping-behavior-type valueset.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "type",
            "value"
          ]
        }
      ]
    },
    "HealthcareService": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The details of a healthcare service available at a location.",
          "properties": {
            "resourceType": {
              "description": "This is a HealthcareService resource",
              "type": "string",
              "enum": [
                "HealthcareService"
              ]
            },
            "identifier": {
              "description": "External identifiers for this item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "providedBy": {
              "description": "The organization that provides this healthcare service.",
              "$ref": "#/definitions/Reference"
            },
            "serviceCategory": {
              "description": "Identifies the broad category of service being performed or delivered.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "serviceType": {
              "description": "The specific type of service that may be delivered or performed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "specialty": {
              "description": "Collection of specialties handled by the service site. This is more of a medical term.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "location": {
              "description": "The location(s) where this healthcare service may be provided.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "serviceName": {
              "description": "Further description of the service as it would be presented to a consumer while searching.",
              "type": "string"
            },
            "serviceName_": {
              "description": "Extensions for serviceName",
              "$ref": "#/definitions/Element"
            },
            "comment": {
              "description": "Any additional description of the service and/or any specific issues not covered by the other attributes, which can be displayed as further detail under the serviceName.",
              "type": "string"
            },
            "comment_": {
              "description": "Extensions for comment",
              "$ref": "#/definitions/Element"
            },
            "extraDetails": {
              "description": "Extra details about the service that can\u0027t be placed in the other fields.",
              "type": "string"
            },
            "extraDetails_": {
              "description": "Extensions for extraDetails",
              "$ref": "#/definitions/Element"
            },
            "photo": {
              "description": "If there is a photo/symbol associated with this HealthcareService, it may be included here to facilitate quick identification of the service in a list.",
              "$ref": "#/definitions/Attachment"
            },
            "telecom": {
              "description": "List of contacts related to this specific healthcare service.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "coverageArea": {
              "description": "The location(s) that this service is available to (not where the service is provided).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "serviceProvisionCode": {
              "description": "The code(s) that detail the conditions under which the healthcare service is available/offered.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "eligibility": {
              "description": "Does this service have specific eligibility requirements that need to be met in order to use the service?",
              "$ref": "#/definitions/CodeableConcept"
            },
            "eligibilityNote": {
              "description": "Describes the eligibility conditions for the service.",
              "type": "string"
            },
            "eligibilityNote_": {
              "description": "Extensions for eligibilityNote",
              "$ref": "#/definitions/Element"
            },
            "programName": {
              "description": "Program Names that can be used to categorize the service.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "programName_": {
              "description": "Extensions for programName",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "characteristic": {
              "description": "Collection of characteristics (attributes).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "referralMethod": {
              "description": "Ways that the service accepts referrals, if this is not provided then it is implied that no referral is required.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "publicKey": {
              "description": "The public part of the \u0027keys\u0027 allocated to an Organization by an accredited body to support secure exchange of data over the internet. To be provided by the Organization, where available.",
              "type": "string"
            },
            "publicKey_": {
              "description": "Extensions for publicKey",
              "$ref": "#/definitions/Element"
            },
            "appointmentRequired": {
              "description": "Indicates whether or not a prospective consumer will require an appointment for a particular service at a site to be provided by the Organization. Indicates if an appointment is required for access to this service.",
              "type": "true | false"
            },
            "appointmentRequired_": {
              "description": "Extensions for appointmentRequired",
              "$ref": "#/definitions/Element"
            },
            "availableTime": {
              "description": "A collection of times that the Service Site is available.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HealthcareService.AvailableTime"
              }
            },
            "notAvailable": {
              "description": "The HealthcareService is not available during this period of time due to the provided reason.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HealthcareService.NotAvailable"
              }
            },
            "availabilityExceptions": {
              "description": "A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.",
              "type": "string"
            },
            "availabilityExceptions_": {
              "description": "Extensions for availabilityExceptions",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "HealthcareService.AvailableTime": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The details of a healthcare service available at a location.",
          "properties": {
            "daysOfWeek": {
              "description": "Indicates which days of the week are available between the start and end Times.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "daysOfWeek_": {
              "description": "Extensions for daysOfWeek",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "allDay": {
              "description": "Is this always available? (hence times are irrelevant) e.g. 24 hour service.",
              "type": "true | false"
            },
            "allDay_": {
              "description": "Extensions for allDay",
              "$ref": "#/definitions/Element"
            },
            "availableStartTime": {
              "description": "The opening time of day. Note: If the AllDay flag is set, then this time is ignored.",
              "type": "string",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"
            },
            "availableStartTime_": {
              "description": "Extensions for availableStartTime",
              "$ref": "#/definitions/Element"
            },
            "availableEndTime": {
              "description": "The closing time of day. Note: If the AllDay flag is set, then this time is ignored.",
              "type": "string",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"
            },
            "availableEndTime_": {
              "description": "Extensions for availableEndTime",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "HealthcareService.NotAvailable": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The details of a healthcare service available at a location.",
          "properties": {
            "description": {
              "description": "The reason that can be presented to the user as to why this time is not available.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "during": {
              "description": "Service is not available (seasonally or for a public holiday) from this date.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "ImagingManifest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingManifest resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance (\"cine\" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.",
          "properties": {
            "resourceType": {
              "description": "This is a ImagingManifest resource",
              "type": "string",
              "enum": [
                "ImagingManifest"
              ]
            },
            "uid": {
              "description": "Unique identifier of the DICOM Key Object Selection (KOS) representation.",
              "type": "string",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"
            },
            "uid_": {
              "description": "Extensions for uid",
              "$ref": "#/definitions/Element"
            },
            "patient": {
              "description": "A patient resource reference which is the patient subject of all DICOM SOP Instances in this ImagingManifest.",
              "$ref": "#/definitions/Reference"
            },
            "authoringTime": {
              "description": "Date and time when the selection of the referenced instances were made. It is (typically) different from the creation date of the selection resource, and from dates associated with the referenced instances (e.g. capture time of the referenced image).",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "authoringTime_": {
              "description": "Extensions for authoringTime",
              "$ref": "#/definitions/Element"
            },
            "author": {
              "description": "Author of ImagingManifest. It can be a human author or a device which made the decision of the SOP instances selected. For example, a radiologist selected a set of imaging SOP instances to attach in a diagnostic report, and a CAD application may author a selection to describe SOP instances it used to generate a detection conclusion.",
              "$ref": "#/definitions/Reference"
            },
            "title": {
              "description": "The reason for, or significance of, the selection of objects referenced in the resource.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "description": {
              "description": "Text description of the DICOM SOP instances selected in the ImagingManifest. This should be aligned with the content of the title element, and can provide further explanation of the SOP instances in the selection.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "study": {
              "description": "Study identity and locating information of the DICOM SOP instances in the selection.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImagingManifest.Study"
              }
            }
          },
          "required": [
            "study",
            "patient",
            "title",
            "resourceType"
          ]
        }
      ]
    },
    "ImagingManifest.Study": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingManifest resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance (\"cine\" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.",
          "properties": {
            "uid": {
              "description": "Study instance UID of the SOP instances in the selection.",
              "type": "string",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"
            },
            "uid_": {
              "description": "Extensions for uid",
              "$ref": "#/definitions/Element"
            },
            "imagingStudy": {
              "description": "Reference to the Imaging Study in FHIR form.",
              "$ref": "#/definitions/Reference"
            },
            "baseLocation": {
              "description": "Methods of accessing using DICOM web technologies.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImagingManifest.BaseLocation"
              }
            },
            "series": {
              "description": "Series identity and locating information of the DICOM SOP instances in the selection.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImagingManifest.Series"
              }
            }
          },
          "required": [
            "series"
          ]
        }
      ]
    },
    "ImagingManifest.BaseLocation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingManifest resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance (\"cine\" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.",
          "properties": {
            "type": {
              "description": "Access type for DICOM web.",
              "$ref": "#/definitions/Coding"
            },
            "url": {
              "description": "The source system root URL / base URL, from which all content can be retrieved using the specified DICOM protocol.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "ImagingManifest.Series": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingManifest resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance (\"cine\" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.",
          "properties": {
            "uid": {
              "description": "Series instance UID of the SOP instances in the selection.",
              "type": "string",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"
            },
            "uid_": {
              "description": "Extensions for uid",
              "$ref": "#/definitions/Element"
            },
            "baseLocation": {
              "description": "Methods of accessing using DICOM web technologies.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImagingManifest.BaseLocation1"
              }
            },
            "instance": {
              "description": "Identity and locating information of the selected DICOM SOP instances.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImagingManifest.Instance"
              }
            }
          },
          "required": [
            "instance"
          ]
        }
      ]
    },
    "ImagingManifest.BaseLocation1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingManifest resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance (\"cine\" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.",
          "properties": {
            "type": {
              "description": "Access type for DICOM web.",
              "$ref": "#/definitions/Coding"
            },
            "url": {
              "description": "The source system root URL / base URL, from which all content can be retrieved using the specified DICOM protocol.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "ImagingManifest.Instance": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A manifest of a set of DICOM Service-Object Pair Instances (SOP Instances).  The referenced SOP Instances (images or other content) are for a single patient, and may be from one or more studies. The referenced SOP Instances have been selected for a purpose, such as quality assurance, conference, or consult. Reflecting that range of purposes, typical ImagingManifest resources may include all SOP Instances in a study (perhaps for sharing through a Health Information Exchange); key images from multiple studies (for reference by a referring or treating physician); a multi-frame ultrasound instance (\"cine\" video clip) and a set of measurements taken from that instance (for inclusion in a teaching file); and so on.",
          "properties": {
            "sopClass": {
              "description": "SOP class UID of the selected instance.",
              "type": "string",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"
            },
            "sopClass_": {
              "description": "Extensions for sopClass",
              "$ref": "#/definitions/Element"
            },
            "uid": {
              "description": "SOP Instance UID of the selected instance.",
              "type": "string",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"
            },
            "uid_": {
              "description": "Extensions for uid",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ImagingStudy": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.",
          "properties": {
            "resourceType": {
              "description": "This is a ImagingStudy resource",
              "type": "string",
              "enum": [
                "ImagingStudy"
              ]
            },
            "uid": {
              "description": "Formal identifier for the study.",
              "type": "string",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"
            },
            "uid_": {
              "description": "Extensions for uid",
              "$ref": "#/definitions/Element"
            },
            "accession": {
              "description": "Accession Number is an identifier related to some aspect of imaging workflow and data management. Usage may vary across different institutions.  See for instance [IHE Radiology Technical Framework Volume 1 Appendix A](http://www.ihe.net/uploadedFiles/Documents/Radiology/IHE_RAD_TF_Rev13.0_Vol1_FT_2014-07-30.pdf).",
              "$ref": "#/definitions/Identifier"
            },
            "identifier": {
              "description": "Other identifiers for the study.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "availability": {
              "description": "Availability of study (online, offline or nearline).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "availability_": {
              "description": "Extensions for availability",
              "$ref": "#/definitions/Element"
            },
            "modalityList": {
              "description": "A list of all the Series.ImageModality values that are actual acquisition modalities, i.e. those in the DICOM Context Group 29 (value set OID 1.2.840.10008.6.1.19).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "patient": {
              "description": "The patient imaged in the study.",
              "$ref": "#/definitions/Reference"
            },
            "started": {
              "description": "Date and Time the study started.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "started_": {
              "description": "Extensions for started",
              "$ref": "#/definitions/Element"
            },
            "order": {
              "description": "A list of the diagnostic orders that resulted in this imaging study being performed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "referrer": {
              "description": "The requesting/referring physician.",
              "$ref": "#/definitions/Reference"
            },
            "interpreter": {
              "description": "Who read the study and interpreted the images or other content.",
              "$ref": "#/definitions/Reference"
            },
            "url": {
              "description": "WADO-RS resource where Study is available.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "numberOfSeries": {
              "description": "Number of Series in Study.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "numberOfSeries_": {
              "description": "Extensions for numberOfSeries",
              "$ref": "#/definitions/Element"
            },
            "numberOfInstances": {
              "description": "Number of SOP Instances in Study.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "numberOfInstances_": {
              "description": "Extensions for numberOfInstances",
              "$ref": "#/definitions/Element"
            },
            "procedure": {
              "description": "Type of procedure performed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "description": {
              "description": "Institution-generated description or classification of the Study performed.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "series": {
              "description": "Each study has one or more series of images or other content.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImagingStudy.Series"
              }
            }
          },
          "required": [
            "patient",
            "resourceType"
          ]
        }
      ]
    },
    "ImagingStudy.Series": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.",
          "properties": {
            "uid": {
              "description": "Formal identifier for this series.",
              "type": "string",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"
            },
            "uid_": {
              "description": "Extensions for uid",
              "$ref": "#/definitions/Element"
            },
            "number": {
              "description": "The Numeric identifier of this series in the study.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "number_": {
              "description": "Extensions for number",
              "$ref": "#/definitions/Element"
            },
            "modality": {
              "description": "The modality of this series sequence.",
              "$ref": "#/definitions/Coding"
            },
            "description": {
              "description": "A description of the series.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "numberOfInstances": {
              "description": "Number of SOP Instances in Series.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "numberOfInstances_": {
              "description": "Extensions for numberOfInstances",
              "$ref": "#/definitions/Element"
            },
            "availability": {
              "description": "Availability of series (online, offline or nearline).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "availability_": {
              "description": "Extensions for availability",
              "$ref": "#/definitions/Element"
            },
            "url": {
              "description": "URI/URL specifying the location of the referenced series using WADO-RS.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "bodySite": {
              "description": "Body part examined. See  DICOM Part 16 Annex L for the mapping from DICOM to Snomed CT.",
              "$ref": "#/definitions/Coding"
            },
            "laterality": {
              "description": "Laterality if body site is paired anatomic structure and laterality is not pre-coordinated in body site code.",
              "$ref": "#/definitions/Coding"
            },
            "started": {
              "description": "The date and time the series was started.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "started_": {
              "description": "Extensions for started",
              "$ref": "#/definitions/Element"
            },
            "instance": {
              "description": "A single SOP Instance within the series, e.g. an image, or presentation state.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImagingStudy.Instance"
              }
            }
          },
          "required": [
            "modality"
          ]
        }
      ]
    },
    "ImagingStudy.Instance": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Representation of the content produced in a DICOM imaging study. A study comprises a set of series, each of which includes a set of Service-Object Pair Instances (SOP Instances - images or other data) acquired or produced in a common context.  A series is of only one modality (e.g. X-ray, CT, MR, ultrasound), but a study may have multiple series of different modalities.",
          "properties": {
            "uid": {
              "description": "Formal identifier for this image or other content.",
              "type": "string",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"
            },
            "uid_": {
              "description": "Extensions for uid",
              "$ref": "#/definitions/Element"
            },
            "number": {
              "description": "The number of instance in the series.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "number_": {
              "description": "Extensions for number",
              "$ref": "#/definitions/Element"
            },
            "sopClass": {
              "description": "DICOM instance  type.",
              "type": "string",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*"
            },
            "sopClass_": {
              "description": "Extensions for sopClass",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "A human-friendly SOP Class name.",
              "type": "string"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "title": {
              "description": "The description of the instance.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "content": {
              "description": "Content of the instance or a rendering thereof (e.g. a JPEG of an image, or an XML of a structured report). May be represented for example by inline encoding; by a URL reference to a WADO-RS service that makes the instance available; or to a FHIR Resource (e.g. Media, Document, etc.). Multiple content attachments may be used for alternate representations of the instance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            }
          }
        }
      ]
    },
    "Immunization": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.",
          "properties": {
            "resourceType": {
              "description": "This is a Immunization resource",
              "type": "string",
              "enum": [
                "Immunization"
              ]
            },
            "identifier": {
              "description": "A unique identifier assigned to this immunization record.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "Indicates the current status of the vaccination event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "Date vaccine administered or was to be administered.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "vaccineCode": {
              "description": "Vaccine that was administered or was to be administered.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "patient": {
              "description": "The patient who either received or did not receive the immunization.",
              "$ref": "#/definitions/Reference"
            },
            "wasNotGiven": {
              "description": "Indicates if the vaccination was or was not given.",
              "type": "true | false"
            },
            "wasNotGiven_": {
              "description": "Extensions for wasNotGiven",
              "$ref": "#/definitions/Element"
            },
            "reported": {
              "description": "True if this administration was reported rather than directly administered.",
              "type": "true | false"
            },
            "reported_": {
              "description": "Extensions for reported",
              "$ref": "#/definitions/Element"
            },
            "performer": {
              "description": "Clinician who administered the vaccine.",
              "$ref": "#/definitions/Reference"
            },
            "requester": {
              "description": "Clinician who ordered the vaccination.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "The visit or admission or other contact between patient and health care provider the immunization was performed as part of.",
              "$ref": "#/definitions/Reference"
            },
            "manufacturer": {
              "description": "Name of vaccine manufacturer.",
              "$ref": "#/definitions/Reference"
            },
            "location": {
              "description": "The service delivery location where the vaccine administration occurred.",
              "$ref": "#/definitions/Reference"
            },
            "lotNumber": {
              "description": "Lot number of the  vaccine product.",
              "type": "string"
            },
            "lotNumber_": {
              "description": "Extensions for lotNumber",
              "$ref": "#/definitions/Element"
            },
            "expirationDate": {
              "description": "Date vaccine batch expires.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "expirationDate_": {
              "description": "Extensions for expirationDate",
              "$ref": "#/definitions/Element"
            },
            "site": {
              "description": "Body site where vaccine was administered.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "route": {
              "description": "The path by which the vaccine product is taken into the body.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "doseQuantity": {
              "description": "The quantity of vaccine product that was administered.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "note": {
              "description": "Extra information about the immunization that is not conveyed by the other attributes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "explanation": {
              "description": "Reasons why a vaccine was or was not administered.",
              "$ref": "#/definitions/Immunization.Explanation"
            },
            "reaction": {
              "description": "Categorical data indicating that an adverse event is associated in time to an immunization.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Immunization.Reaction"
              }
            },
            "vaccinationProtocol": {
              "description": "Contains information about the protocol(s) under which the vaccine was administered.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Immunization.VaccinationProtocol"
              }
            }
          },
          "required": [
            "patient",
            "vaccineCode",
            "resourceType"
          ]
        }
      ]
    },
    "Immunization.Explanation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.",
          "properties": {
            "reason": {
              "description": "Reasons why a vaccine was administered.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reasonNotGiven": {
              "description": "Reason why a vaccine was not administered.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            }
          }
        }
      ]
    },
    "Immunization.Reaction": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.",
          "properties": {
            "date": {
              "description": "Date of reaction to the immunization.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "detail": {
              "description": "Details of the reaction.",
              "$ref": "#/definitions/Reference"
            },
            "reported": {
              "description": "Self-reported indicator.",
              "type": "true | false"
            },
            "reported_": {
              "description": "Extensions for reported",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Immunization.VaccinationProtocol": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the event of a patient being administered a vaccination or a record of a vaccination as reported by a patient, a clinician or another party and may include vaccine reaction information and what vaccination protocol was followed.",
          "properties": {
            "doseSequence": {
              "description": "Nominal position in a series.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "doseSequence_": {
              "description": "Extensions for doseSequence",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Contains the description about the protocol under which the vaccine was administered.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "authority": {
              "description": "Indicates the authority who published the protocol.  E.g. ACIP.",
              "$ref": "#/definitions/Reference"
            },
            "series": {
              "description": "One possible path to achieve presumed immunity against a disease - within the context of an authority.",
              "type": "string"
            },
            "series_": {
              "description": "Extensions for series",
              "$ref": "#/definitions/Element"
            },
            "seriesDoses": {
              "description": "The recommended number of doses to achieve immunity.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "seriesDoses_": {
              "description": "Extensions for seriesDoses",
              "$ref": "#/definitions/Element"
            },
            "targetDisease": {
              "description": "The targeted disease.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "doseStatus": {
              "description": "Indicates if the immunization event should \"count\" against  the protocol.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "doseStatusReason": {
              "description": "Provides an explanation as to why an immunization event should or should not count against the protocol.",
              "$ref": "#/definitions/CodeableConcept"
            }
          },
          "required": [
            "doseStatus",
            "targetDisease"
          ]
        }
      ]
    },
    "ImmunizationRecommendation": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A patient\u0027s point-in-time immunization and recommendation (i.e. forecasting a patient\u0027s immunization eligibility according to a published schedule) with optional supporting justification.",
          "properties": {
            "resourceType": {
              "description": "This is a ImmunizationRecommendation resource",
              "type": "string",
              "enum": [
                "ImmunizationRecommendation"
              ]
            },
            "identifier": {
              "description": "A unique identifier assigned to this particular recommendation record.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "patient": {
              "description": "The patient for whom the recommendations are for.",
              "$ref": "#/definitions/Reference"
            },
            "recommendation": {
              "description": "Vaccine administration recommendations.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImmunizationRecommendation.Recommendation"
              }
            }
          },
          "required": [
            "patient",
            "recommendation",
            "resourceType"
          ]
        }
      ]
    },
    "ImmunizationRecommendation.Recommendation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A patient\u0027s point-in-time immunization and recommendation (i.e. forecasting a patient\u0027s immunization eligibility according to a published schedule) with optional supporting justification.",
          "properties": {
            "date": {
              "description": "The date the immunization recommendation was created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "vaccineCode": {
              "description": "Vaccine that pertains to the recommendation.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "doseNumber": {
              "description": "This indicates the next recommended dose number (e.g. dose 2 is the next recommended dose).",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "doseNumber_": {
              "description": "Extensions for doseNumber",
              "$ref": "#/definitions/Element"
            },
            "forecastStatus": {
              "description": "Vaccine administration status.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "dateCriterion": {
              "description": "Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImmunizationRecommendation.DateCriterion"
              }
            },
            "protocol": {
              "description": "Contains information about the protocol under which the vaccine was administered.",
              "$ref": "#/definitions/ImmunizationRecommendation.Protocol"
            },
            "supportingImmunization": {
              "description": "Immunization event history that supports the status and recommendation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "supportingPatientInformation": {
              "description": "Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "forecastStatus",
            "vaccineCode"
          ]
        }
      ]
    },
    "ImmunizationRecommendation.DateCriterion": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A patient\u0027s point-in-time immunization and recommendation (i.e. forecasting a patient\u0027s immunization eligibility according to a published schedule) with optional supporting justification.",
          "properties": {
            "code": {
              "description": "Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "value": {
              "description": "The date whose meaning is specified by dateCriterion.code.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "ImmunizationRecommendation.Protocol": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A patient\u0027s point-in-time immunization and recommendation (i.e. forecasting a patient\u0027s immunization eligibility according to a published schedule) with optional supporting justification.",
          "properties": {
            "doseSequence": {
              "description": "Indicates the nominal position in a series of the next dose.  This is the recommended dose number as per a specified protocol.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "doseSequence_": {
              "description": "Extensions for doseSequence",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Contains the description about the protocol under which the vaccine was administered.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "authority": {
              "description": "Indicates the authority who published the protocol.  For example, ACIP.",
              "$ref": "#/definitions/Reference"
            },
            "series": {
              "description": "One possible path to achieve presumed immunity against a disease - within the context of an authority.",
              "type": "string"
            },
            "series_": {
              "description": "Extensions for series",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ImplementationGuide": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.",
          "properties": {
            "resourceType": {
              "description": "This is a ImplementationGuide resource",
              "type": "string",
              "enum": [
                "ImplementationGuide"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this implementation guide is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The identifier that is used to identify this version of the Implementation Guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the Implementation Guide author manually.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name identifying the Implementation Guide.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the Implementation Guide.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "This Implementation Guide was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the implementation guide.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImplementationGuide.Contact"
              }
            },
            "date": {
              "description": "The date this version of the implementation guide was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the Implementation Guide and its use.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of implementation guides. The most common use of this element is to represent the country / jurisdiction for which this implementation guide was defined.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "copyright": {
              "description": "A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "fhirVersion": {
              "description": "The version of the FHIR specification on which this ImplementationGuide is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.4.0 for this version.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "fhirVersion_": {
              "description": "Extensions for fhirVersion",
              "$ref": "#/definitions/Element"
            },
            "dependency": {
              "description": "Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImplementationGuide.Dependency"
              }
            },
            "package": {
              "description": "A logical group of resources. Logical groups can be used when building pages.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImplementationGuide.Package"
              }
            },
            "global": {
              "description": "A set of profiles that all resources covered by this implementation guide must conform to.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImplementationGuide.Global"
              }
            },
            "binary": {
              "description": "A binary file that is included in the  implementation guide when it is published.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "binary_": {
              "description": "Extensions for binary",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "page": {
              "description": "A page / section in the implementation guide. The root page is the implementation guide home page.",
              "$ref": "#/definitions/ImplementationGuide.Page"
            }
          },
          "required": [
            "package",
            "page",
            "resourceType"
          ]
        }
      ]
    },
    "ImplementationGuide.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the implementation guide.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "ImplementationGuide.Dependency": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.",
          "properties": {
            "type": {
              "description": "How the dependency is represented when the guide is published.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "uri": {
              "description": "Where the dependency is located.",
              "type": "string"
            },
            "uri_": {
              "description": "Extensions for uri",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ImplementationGuide.Package": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.",
          "properties": {
            "name": {
              "description": "The name for the group, as used in page.package.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Human readable text describing the package.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "resource": {
              "description": "A resource that is part of the implementation guide. Conformance resources (value set, structure definition, conformance statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImplementationGuide.Resource"
              }
            }
          },
          "required": [
            "resource"
          ]
        }
      ]
    },
    "ImplementationGuide.Resource": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.",
          "properties": {
            "example": {
              "description": "Whether a resource is included in the guide as part of the rules defined by the guide, or just as an example of a resource that conforms to the rules and/or help implementers understand the intent of the guide.",
              "type": "true | false"
            },
            "example_": {
              "description": "Extensions for example",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A description of the reason that a resource has been included in the implementation guide.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "acronym": {
              "description": "A short code that may be used to identify the resource throughout the implementation guide.",
              "type": "string"
            },
            "acronym_": {
              "description": "Extensions for acronym",
              "$ref": "#/definitions/Element"
            },
            "sourceUri": {
              "description": "Where this resource is found.",
              "type": "string"
            },
            "sourceUri_": {
              "description": "Extensions for sourceUri",
              "$ref": "#/definitions/Element"
            },
            "sourceReference": {
              "description": "Where this resource is found.",
              "$ref": "#/definitions/Reference"
            },
            "exampleFor": {
              "description": "Another resource that this resource is an example for. This is mostly used for resources that are included as examples of StructureDefinitions.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ImplementationGuide.Global": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.",
          "properties": {
            "type": {
              "description": "The type of resource that all instances must conform to.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "A reference to the profile that all instances must conform to.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "profile"
          ]
        }
      ]
    },
    "ImplementationGuide.Page": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of rules or how FHIR is used to solve a particular problem. This resource is used to gather all the parts of an implementation guide into a logical whole, and to publish a computable definition of all the parts.",
          "properties": {
            "source": {
              "description": "The source address for the page.",
              "type": "string"
            },
            "source_": {
              "description": "Extensions for source",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A short name used to represent this page in navigational structures such as table of contents, bread crumbs, etc.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "kind": {
              "description": "The kind of page that this is. Some pages are autogenerated (list, example), and other kinds are of interest so that tools can navigate the user to the page of interest.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "kind_": {
              "description": "Extensions for kind",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "For constructed pages, what kind of resources to include in the list.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "type_": {
              "description": "Extensions for type",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "package": {
              "description": "For constructed pages, a list of packages to include in the page (or else empty for everything).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "package_": {
              "description": "Extensions for package",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "format": {
              "description": "The format of the page.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "format_": {
              "description": "Extensions for format",
              "$ref": "#/definitions/Element"
            },
            "page": {
              "description": "Nested Pages/Sections under this page.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ImplementationGuide.Page"
              }
            }
          }
        }
      ]
    },
    "Library": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The Library resource provides a representation container for knowledge artifact component definitions. It is effectively an exposure of the header information for a CQL/ELM library.",
          "properties": {
            "resourceType": {
              "description": "This is a Library resource",
              "type": "string",
              "enum": [
                "Library"
              ]
            },
            "moduleMetadata": {
              "description": "The metadata for the library, including publishing, life-cycle, version, documentation, and supporting evidence.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "model": {
              "description": "A model element describes the model and version used by the library.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Library.Model"
              }
            },
            "library": {
              "description": "A library element describes a library referenced by this library.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Library.Library"
              }
            },
            "codeSystem": {
              "description": "A code system definition used within the library.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Library.CodeSystem"
              }
            },
            "valueSet": {
              "description": "A value set definition referenced by the library.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Library.ValueSet"
              }
            },
            "parameter": {
              "description": "The parameter element defines parameters used by the library.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParameterDefinition"
              }
            },
            "dataRequirement": {
              "description": "The dataRequirement element specifies a data requirement used by some expression within the library.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DataRequirement"
              }
            },
            "document": {
              "description": "The content of the library as an Attachment. The content may be a reference to a url, or may be directly embedded as a base-64 string. Either way, the content is expected to be a CQL or ELM document.",
              "$ref": "#/definitions/Attachment"
            }
          },
          "required": [
            "document",
            "resourceType"
          ]
        }
      ]
    },
    "Library.Model": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The Library resource provides a representation container for knowledge artifact component definitions. It is effectively an exposure of the header information for a CQL/ELM library.",
          "properties": {
            "name": {
              "description": "The name element defines the local name of the model as used within the library.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "The identifier element specifies the global, non-version-specific identifier for the model.",
              "type": "string"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version element, if present, identifies the specific version of the model to be used. If no version is specified, the most recent published version of the model is implied.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Library.Library": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The Library resource provides a representation container for knowledge artifact component definitions. It is effectively an exposure of the header information for a CQL/ELM library.",
          "properties": {
            "name": {
              "description": "The name element defines the local name of the referenced library.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "The identifier element specifies the global, non-version-specific identifier for the library.",
              "type": "string"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version element, if present, identifies the specific version of the library to be used. If no version is specified, the most recent published version of the library is implied.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "documentAttachment": {
              "description": "The content of the referenced library as an Attachment, or a reference to the Library resource. If the document is an attachment, it may be a reference to a url from which the library document may be retrieved, or it may be directly embedded as a base-64 string. Either way, the content is expected to be a CQL or ELM document.",
              "$ref": "#/definitions/Attachment"
            },
            "documentReference": {
              "description": "The content of the referenced library as an Attachment, or a reference to the Library resource. If the document is an attachment, it may be a reference to a url from which the library document may be retrieved, or it may be directly embedded as a base-64 string. Either way, the content is expected to be a CQL or ELM document.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Library.CodeSystem": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The Library resource provides a representation container for knowledge artifact component definitions. It is effectively an exposure of the header information for a CQL/ELM library.",
          "properties": {
            "name": {
              "description": "The name element specifies the local name of the code system as used within the library. This name is also used when the code system is referenced from a value set element to determine the version of the code system to be used when computed the expansion of the value set definition.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "The identifier element specifies the global, non-version-specific identifier for the code system.",
              "type": "string"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version element, if present, identifies the specific version of the library to be used. If no code system is specified, the most recent published version of the code system is implied.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Library.ValueSet": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The Library resource provides a representation container for knowledge artifact component definitions. It is effectively an exposure of the header information for a CQL/ELM library.",
          "properties": {
            "name": {
              "description": "The name element specifies the local name of the value set used within the library.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "The identifier element specifies the global, non-version-specific identifier for the value set.",
              "type": "string"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version element, if present, determines the specific version of the value set definition that is used by the library. If no version is specified, the latest published version of the value set definition is implied.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "codeSystem": {
              "description": "The codeSystem element determines which code system binding to use to compute the expansion of the value set definition. The codeSystem element specified here will correspond to a code system element, which is used to determine the code system version.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "codeSystem_": {
              "description": "Extensions for codeSystem",
              "items": {
                "$ref": "#/definitions/Element"
              }
            }
          }
        }
      ]
    },
    "Linkage": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Identifies two or more records (resource instances) that are referring to the same real-world \"occurrence\".",
          "properties": {
            "resourceType": {
              "description": "This is a Linkage resource",
              "type": "string",
              "enum": [
                "Linkage"
              ]
            },
            "author": {
              "description": "Identifies the user or organization responsible for asserting the linkages and who establishes the context for evaluating the nature of each linkage.",
              "$ref": "#/definitions/Reference"
            },
            "item": {
              "description": "Identifies one of the records that is considered to refer to the same real-world occurrence as well as how the items hould be evaluated within the collection of linked items.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Linkage.Item"
              }
            }
          },
          "required": [
            "item",
            "resourceType"
          ]
        }
      ]
    },
    "Linkage.Item": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Identifies two or more records (resource instances) that are referring to the same real-world \"occurrence\".",
          "properties": {
            "type": {
              "description": "Distinguishes which item is \"source of truth\" (if any) and which items are no longer considered to be current representations.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "resource": {
              "description": "The resource instance being linked as part of the group.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "resource"
          ]
        }
      ]
    },
    "List": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A set of information summarized from a list of other resources.",
          "properties": {
            "resourceType": {
              "description": "This is a List resource",
              "type": "string",
              "enum": [
                "List"
              ]
            },
            "identifier": {
              "description": "Identifier for the List assigned for business purposes outside the context of FHIR.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "Indicates the current state of this list.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "mode": {
              "description": "How this list was prepared - whether it is a working list that is suitable for being maintained on an ongoing basis, or if it represents a snapshot of a list of items from another source, or whether it is a prepared list where items may be marked as added, modified or deleted.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "#/definitions/Element"
            },
            "title": {
              "description": "A label for the list assigned by the author.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "This code defines the purpose of the list - why it was created.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "subject": {
              "description": "The common subject (or patient) of the resources that are in the list, if there is one.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "The encounter that is the context in which this list was created.",
              "$ref": "#/definitions/Reference"
            },
            "date": {
              "description": "The date that the list was prepared.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "source": {
              "description": "The entity responsible for deciding what the contents of the list were. Where the list was created by a human, this is the same as the author of the list.",
              "$ref": "#/definitions/Reference"
            },
            "orderedBy": {
              "description": "What order applies to the items in the list.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "note": {
              "description": "Comments that apply to the overall list.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "entry": {
              "description": "Entries in this list.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/List.Entry"
              }
            },
            "emptyReason": {
              "description": "If the list is empty, why the list is empty.",
              "$ref": "#/definitions/CodeableConcept"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "List.Entry": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A set of information summarized from a list of other resources.",
          "properties": {
            "flag": {
              "description": "The flag allows the system constructing the list to indicate the role and significance of the item in the list.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "deleted": {
              "description": "True if this item is marked as deleted in the list.",
              "type": "true | false"
            },
            "deleted_": {
              "description": "Extensions for deleted",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "When this item was added to the list.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "item": {
              "description": "A reference to the actual resource from which data was derived.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "item"
          ]
        }
      ]
    },
    "Location": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.",
          "properties": {
            "resourceType": {
              "description": "This is a Location resource",
              "type": "string",
              "enum": [
                "Location"
              ]
            },
            "identifier": {
              "description": "Unique code or number identifying the location to its users.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "active | suspended | inactive.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "Name of the location as used by humans. Does not need to be unique.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Description of the Location, which helps in finding or referencing the place.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "mode": {
              "description": "Indicates whether a resource instance represents a specific location or a class of locations.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Indicates the type of function performed at the location.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "telecom": {
              "description": "The contact details of communication devices available at the location. This can include phone numbers, fax numbers, mobile numbers, email addresses and web sites.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "address": {
              "description": "Physical location.",
              "$ref": "#/definitions/Address"
            },
            "physicalType": {
              "description": "Physical form of the location, e.g. building, room, vehicle, road.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "position": {
              "description": "The absolute geographic location of the Location, expressed using the WGS84 datum (This is the same co-ordinate system used in KML).",
              "$ref": "#/definitions/Location.Position"
            },
            "managingOrganization": {
              "description": "The organization responsible for the provisioning and upkeep of the location.",
              "$ref": "#/definitions/Reference"
            },
            "partOf": {
              "description": "Another Location which this Location is physically part of.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Location.Position": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Details and position information for a physical place where services are provided  and resources and participants may be stored, found, contained or accommodated.",
          "properties": {
            "longitude": {
              "description": "Longitude. The value domain and the interpretation are the same as for the text of the longitude element in KML (see notes below).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "longitude_": {
              "description": "Extensions for longitude",
              "$ref": "#/definitions/Element"
            },
            "latitude": {
              "description": "Latitude. The value domain and the interpretation are the same as for the text of the latitude element in KML (see notes below).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "latitude_": {
              "description": "Extensions for latitude",
              "$ref": "#/definitions/Element"
            },
            "altitude": {
              "description": "Altitude. The value domain and the interpretation are the same as for the text of the altitude element in KML (see notes below).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "altitude_": {
              "description": "Extensions for altitude",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Measure": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The Measure resource provides the definition of a quality measure.",
          "properties": {
            "resourceType": {
              "description": "This is a Measure resource",
              "type": "string",
              "enum": [
                "Measure"
              ]
            },
            "moduleMetadata": {
              "description": "The metadata for the measure, including publishing, life-cycle, version, documentation, and supporting evidence.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "library": {
              "description": "A reference to a Library resource containing the formal logic used by the measure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "disclaimer": {
              "description": "A disclaimer for the use of the measure.",
              "type": "string"
            },
            "disclaimer_": {
              "description": "Extensions for disclaimer",
              "$ref": "#/definitions/Element"
            },
            "scoring": {
              "description": "The measure scoring type, e.g. proportion, CV.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "scoring_": {
              "description": "Extensions for scoring",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The measure type, e.g. process, outcome.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "type_": {
              "description": "Extensions for type",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "riskAdjustment": {
              "description": "A description of the risk adjustment factors that may impact the resulting score for the measure and how they may be accounted for when computing and reporting measure results.",
              "type": "string"
            },
            "riskAdjustment_": {
              "description": "Extensions for riskAdjustment",
              "$ref": "#/definitions/Element"
            },
            "rateAggregation": {
              "description": "A description of the rate aggregation for the measure.",
              "type": "string"
            },
            "rateAggregation_": {
              "description": "Extensions for rateAggregation",
              "$ref": "#/definitions/Element"
            },
            "rationale": {
              "description": "The rationale for the measure.",
              "type": "string"
            },
            "rationale_": {
              "description": "Extensions for rationale",
              "$ref": "#/definitions/Element"
            },
            "clinicalRecommendationStatement": {
              "description": "The clinical recommendation statement for the measure.",
              "type": "string"
            },
            "clinicalRecommendationStatement_": {
              "description": "Extensions for clinicalRecommendationStatement",
              "$ref": "#/definitions/Element"
            },
            "improvementNotation": {
              "description": "Improvement notation for the measure, e.g. higher score indicates better quality.",
              "type": "string"
            },
            "improvementNotation_": {
              "description": "Extensions for improvementNotation",
              "$ref": "#/definitions/Element"
            },
            "definition": {
              "description": "A narrative description of the complete measure calculation.",
              "type": "string"
            },
            "definition_": {
              "description": "Extensions for definition",
              "$ref": "#/definitions/Element"
            },
            "guidance": {
              "description": "Additional guidance for the measure including how it can be used in a clinical context, and the intent of the measure.",
              "type": "string"
            },
            "guidance_": {
              "description": "Extensions for guidance",
              "$ref": "#/definitions/Element"
            },
            "set": {
              "description": "The measure set, e.g. Preventive Care and Screening.",
              "type": "string"
            },
            "set_": {
              "description": "Extensions for set",
              "$ref": "#/definitions/Element"
            },
            "group": {
              "description": "A group of population criteria for the measure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Measure.Group"
              }
            },
            "supplementalData": {
              "description": "The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Measure.SupplementalData"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Measure.Group": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The Measure resource provides the definition of a quality measure.",
          "properties": {
            "identifier": {
              "description": "A unique identifier for the group. This identifier will used to report data for the group in the measure report.",
              "$ref": "#/definitions/Identifier"
            },
            "name": {
              "description": "Optional name or short description of this group.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "The human readable description of this population group.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "population": {
              "description": "A population criteria for the measure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Measure.Population"
              }
            },
            "stratifier": {
              "description": "The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library, or a valid FHIR Resource Path.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Measure.Stratifier"
              }
            }
          },
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "Measure.Population": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The Measure resource provides the definition of a quality measure.",
          "properties": {
            "type": {
              "description": "The type of population criteria.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "A unique identifier for the population criteria. This identifier is used to report data against this criteria within the measure report.",
              "$ref": "#/definitions/Identifier"
            },
            "name": {
              "description": "Optional name or short description of this population.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "The human readable description of this population criteria.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "criteria": {
              "description": "The name of a valid referenced CQL expression (may be namespaced) that defines this population criteria.",
              "type": "string"
            },
            "criteria_": {
              "description": "Extensions for criteria",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "Measure.Stratifier": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The Measure resource provides the definition of a quality measure.",
          "properties": {
            "identifier": {
              "description": "The identifier for the stratifier used to coordinate the reported data back to this stratifier.",
              "$ref": "#/definitions/Identifier"
            },
            "criteria": {
              "description": "The criteria for the stratifier. This must be the name of an expression defined within a referenced library.",
              "type": "string"
            },
            "criteria_": {
              "description": "Extensions for criteria",
              "$ref": "#/definitions/Element"
            },
            "path": {
              "description": "The path to an element that defines the stratifier, specified as a valid FHIR resource path.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "Measure.SupplementalData": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The Measure resource provides the definition of a quality measure.",
          "properties": {
            "identifier": {
              "description": "An identifier for the supplemental data.",
              "$ref": "#/definitions/Identifier"
            },
            "usage": {
              "description": "An indicator of the intended usage for the supplemental data element. Supplemental data indicates the data is additional information requested to augment the measure information. Risk adjustment factor indicates the data is additional information used to calculate risk adjustment factors when applying a risk model to the measure calculation.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "usage_": {
              "description": "Extensions for usage",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "criteria": {
              "description": "The criteria for the supplemental data. This must be the name of a valid expression defined within a referenced library, and defines the data to be returned for this element.",
              "type": "string"
            },
            "criteria_": {
              "description": "Extensions for criteria",
              "$ref": "#/definitions/Element"
            },
            "path": {
              "description": "The supplemental data to be supplied as part of the measure response, specified as a valid FHIR Resource Path.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "MeasureReport": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The MeasureReport resource contains the results of evaluating a measure.",
          "properties": {
            "resourceType": {
              "description": "This is a MeasureReport resource",
              "type": "string",
              "enum": [
                "MeasureReport"
              ]
            },
            "measure": {
              "description": "A reference to the Measure that was evaluated to produce this report.",
              "$ref": "#/definitions/Reference"
            },
            "type": {
              "description": "The type of measure report. This may be an individual report, which provides a single patient\u0027s score for the measure, a patient listing, which returns the list of patients that meet the various criteria in the measure, or a summary report, which returns a population count for each criteria in the measure.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "patient": {
              "description": "Optional Patient if the report was requested for a single patient.",
              "$ref": "#/definitions/Reference"
            },
            "period": {
              "description": "The reporting period for which the report was calculated.",
              "$ref": "#/definitions/Period"
            },
            "status": {
              "description": "The report status. No data will be available until the report status is complete.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "The date this measure report was generated.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "reportingOrganization": {
              "description": "Reporting Organization.",
              "$ref": "#/definitions/Reference"
            },
            "group": {
              "description": "The results of the calculation, one for each population group in the measure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasureReport.Group"
              }
            },
            "evaluatedResources": {
              "description": "A reference to a Bundle containing the Resources that were used in the evaluation of this report.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "period",
            "measure",
            "resourceType"
          ]
        }
      ]
    },
    "MeasureReport.Group": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The MeasureReport resource contains the results of evaluating a measure.",
          "properties": {
            "identifier": {
              "description": "The identifier of the population group as defined in the measure definition.",
              "$ref": "#/definitions/Identifier"
            },
            "population": {
              "description": "The populations that make up the population group, one for each type of population appropriate for the measure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasureReport.Population"
              }
            },
            "measureScore": {
              "description": "The measure score.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "measureScore_": {
              "description": "Extensions for measureScore",
              "$ref": "#/definitions/Element"
            },
            "stratifier": {
              "description": "When a measure includes multiple stratifiers, there will be a stratifier group for each stratifier defined by the measure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasureReport.Stratifier"
              }
            },
            "supplementalData": {
              "description": "Supplemental data elements for the measure provide additional information requested by the measure for each patient involved in the populations.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasureReport.SupplementalData"
              }
            }
          },
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "MeasureReport.Population": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The MeasureReport resource contains the results of evaluating a measure.",
          "properties": {
            "type": {
              "description": "The type of the population.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "count": {
              "description": "The number of members of the population.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "count_": {
              "description": "Extensions for count",
              "$ref": "#/definitions/Element"
            },
            "patients": {
              "description": "This element refers to a List of patient level MeasureReport resources, one for each patient in this population.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "MeasureReport.Stratifier": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The MeasureReport resource contains the results of evaluating a measure.",
          "properties": {
            "identifier": {
              "description": "The identifier of this stratifier, as defined in the measure definition.",
              "$ref": "#/definitions/Identifier"
            },
            "group": {
              "description": "This element contains the results for a single stratum within the stratifier. For example, when stratifying on administrative gender, there will be four strata, one for each possible gender value.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasureReport.Group1"
              }
            }
          },
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "MeasureReport.Group1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The MeasureReport resource contains the results of evaluating a measure.",
          "properties": {
            "value": {
              "description": "The value for this stratum, expressed as a string. When defining stratifiers on complex values, the value must be rendered such that the value for each stratum within the stratifier is unique.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            },
            "population": {
              "description": "The populations that make up the stratum, one for each type of population appropriate to the measure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasureReport.Population1"
              }
            },
            "measureScore": {
              "description": "The measure score for this stratum.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "measureScore_": {
              "description": "Extensions for measureScore",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "MeasureReport.Population1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The MeasureReport resource contains the results of evaluating a measure.",
          "properties": {
            "type": {
              "description": "The type of the population.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "count": {
              "description": "The number of members of the population in this stratum.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "count_": {
              "description": "Extensions for count",
              "$ref": "#/definitions/Element"
            },
            "patients": {
              "description": "This element refers to a List of patient level MeasureReport resources, one for each patient in this population in this stratum.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "MeasureReport.SupplementalData": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The MeasureReport resource contains the results of evaluating a measure.",
          "properties": {
            "identifier": {
              "description": "The identifier of the supplemental data element as defined in the measure.",
              "$ref": "#/definitions/Identifier"
            },
            "group": {
              "description": "This element contains the results for a single value within the supplemental data. For example, when reporting supplemental data for administrative gender, there will be four groups, one for each possible gender value.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MeasureReport.Group2"
              }
            }
          },
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "MeasureReport.Group2": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The MeasureReport resource contains the results of evaluating a measure.",
          "properties": {
            "value": {
              "description": "The value for this supplemental data element, expressed as a string.  When defining supplemental data  on complex values, the value must be rendered such that the value for each group within the supplemental data element is unique.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            },
            "count": {
              "description": "The number of members in the supplemental data group.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "count_": {
              "description": "Extensions for count",
              "$ref": "#/definitions/Element"
            },
            "patients": {
              "description": "This element refers to a List of patient level MeasureReport resources, one for each patient in this population.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Media": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.",
          "properties": {
            "resourceType": {
              "description": "This is a Media resource",
              "type": "string",
              "enum": [
                "Media"
              ]
            },
            "identifier": {
              "description": "Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "type": {
              "description": "Whether the media is a photo (still image), an audio recording, or a video recording.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "subtype": {
              "description": "Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "view": {
              "description": "The name of the imaging view e.g. Lateral or Antero-posterior (AP).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "subject": {
              "description": "Who/What this Media is a record of.",
              "$ref": "#/definitions/Reference"
            },
            "operator": {
              "description": "The person who administered the collection of the image.",
              "$ref": "#/definitions/Reference"
            },
            "deviceName": {
              "description": "The name of the device / manufacturer of the device  that was used to make the recording.",
              "type": "string"
            },
            "deviceName_": {
              "description": "Extensions for deviceName",
              "$ref": "#/definitions/Element"
            },
            "height": {
              "description": "Height of the image in pixels (photo/video).",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "height_": {
              "description": "Extensions for height",
              "$ref": "#/definitions/Element"
            },
            "width": {
              "description": "Width of the image in pixels (photo/video).",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "width_": {
              "description": "Extensions for width",
              "$ref": "#/definitions/Element"
            },
            "frames": {
              "description": "The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "frames_": {
              "description": "Extensions for frames",
              "$ref": "#/definitions/Element"
            },
            "duration": {
              "description": "The duration of the recording in seconds - for audio and video.",
              "type": "number",
              "pattern": "[0]|([1-9][0-9]*)"
            },
            "duration_": {
              "description": "Extensions for duration",
              "$ref": "#/definitions/Element"
            },
            "content": {
              "description": "The actual content of the media - inline or by direct reference to the media source file.",
              "$ref": "#/definitions/Attachment"
            }
          },
          "required": [
            "content",
            "resourceType"
          ]
        }
      ]
    },
    "Medication": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.",
          "properties": {
            "resourceType": {
              "description": "This is a Medication resource",
              "type": "string",
              "enum": [
                "Medication"
              ]
            },
            "code": {
              "description": "A code (or set of codes) that specify this medication, or a textual description if no code is available. Usage note: This could be a standard medication code such as a code from RxNorm, SNOMED CT, IDMP etc. It could also be a national or local formulary code, optionally with translations to other code systems.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "isBrand": {
              "description": "Set to true if the item is attributable to a specific manufacturer.",
              "type": "true | false"
            },
            "isBrand_": {
              "description": "Extensions for isBrand",
              "$ref": "#/definitions/Element"
            },
            "manufacturer": {
              "description": "Describes the details of the manufacturer.",
              "$ref": "#/definitions/Reference"
            },
            "product": {
              "description": "Information that only applies to products (not packages).",
              "$ref": "#/definitions/Medication.Product"
            },
            "package": {
              "description": "Information that only applies to packages (not products).",
              "$ref": "#/definitions/Medication.Package"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Medication.Product": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.",
          "properties": {
            "form": {
              "description": "Describes the form of the item.  Powder; tablets; carton.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "ingredient": {
              "description": "Identifies a particular constituent of interest in the product.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Medication.Ingredient"
              }
            },
            "batch": {
              "description": "Information about a group of medication produced or packaged from one production run.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Medication.Batch"
              }
            }
          }
        }
      ]
    },
    "Medication.Ingredient": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.",
          "properties": {
            "itemCodeableConcept": {
              "description": "The actual ingredient - either a substance (simple ingredient) or another medication.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "itemReference": {
              "description": "The actual ingredient - either a substance (simple ingredient) or another medication.",
              "$ref": "#/definitions/Reference"
            },
            "amount": {
              "description": "Specifies how many (or how much) of the items there are in this Medication.  For example, 250 mg per tablet.",
              "$ref": "#/definitions/Ratio"
            }
          }
        }
      ]
    },
    "Medication.Batch": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.",
          "properties": {
            "lotNumber": {
              "description": "The assigned lot number of a batch of the specified product.",
              "type": "string"
            },
            "lotNumber_": {
              "description": "Extensions for lotNumber",
              "$ref": "#/definitions/Element"
            },
            "expirationDate": {
              "description": "When this specific batch of product will expire.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "expirationDate_": {
              "description": "Extensions for expirationDate",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Medication.Package": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.",
          "properties": {
            "container": {
              "description": "The kind of container that this package comes as.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "content": {
              "description": "A set of components that go to make up the described item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Medication.Content"
              }
            }
          }
        }
      ]
    },
    "Medication.Content": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource is primarily used for the identification and definition of a medication. It covers the ingredients and the packaging for a medication.",
          "properties": {
            "itemCodeableConcept": {
              "description": "Identifies one of the items in the package.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "itemReference": {
              "description": "Identifies one of the items in the package.",
              "$ref": "#/definitions/Reference"
            },
            "amount": {
              "description": "The amount of the product that is in the package.",
              "$ref": "#/definitions/SimpleQuantity"
            }
          }
        }
      ]
    },
    "MedicationAdministration": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.",
          "properties": {
            "resourceType": {
              "description": "This is a MedicationAdministration resource",
              "type": "string",
              "enum": [
                "MedicationAdministration"
              ]
            },
            "identifier": {
              "description": "External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "Will generally be set to show that the administration has been completed.  For some long running administrations such as infusions it is possible for an administration to be started but not completed or it may be paused while some other process is under way.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "medicationCodeableConcept": {
              "description": "Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "medicationReference": {
              "description": "Identifies the medication that was administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.",
              "$ref": "#/definitions/Reference"
            },
            "patient": {
              "description": "The person or animal receiving the medication.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "The visit, admission or other contact between patient and health care provider the medication administration was performed as part of.",
              "$ref": "#/definitions/Reference"
            },
            "effectiveTimeDateTime": {
              "description": "A specific date/time or interval of time during which the administration took place (or did not take place, when the \u0027notGiven\u0027 attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "effectiveTimeDateTime_": {
              "description": "Extensions for effectiveTimeDateTime",
              "$ref": "#/definitions/Element"
            },
            "effectiveTimePeriod": {
              "description": "A specific date/time or interval of time during which the administration took place (or did not take place, when the \u0027notGiven\u0027 attribute is true). For many administrations, such as swallowing a tablet the use of dateTime is more appropriate.",
              "$ref": "#/definitions/Period"
            },
            "performer": {
              "description": "The individual who was responsible for giving the medication to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "prescription": {
              "description": "The original request, instruction or authority to perform the administration.",
              "$ref": "#/definitions/Reference"
            },
            "wasNotGiven": {
              "description": "Set this to true if the record is saying that the medication was NOT administered.",
              "type": "true | false"
            },
            "wasNotGiven_": {
              "description": "Extensions for wasNotGiven",
              "$ref": "#/definitions/Element"
            },
            "reasonNotGiven": {
              "description": "A code indicating why the administration was not performed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reasonGiven": {
              "description": "A code indicating why the medication was given.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "device": {
              "description": "The device used in administering the medication to the patient.  For example, a particular infusion pump.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "note": {
              "description": "Extra information about the medication administration that is not conveyed by the other attributes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "dosage": {
              "description": "Describes the medication dosage information details e.g. dose, rate, site, route, etc.",
              "$ref": "#/definitions/MedicationAdministration.Dosage"
            },
            "eventHistory": {
              "description": "A summary of the events of interest that have occurred, such as when the administration was verified.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MedicationAdministration.EventHistory"
              }
            }
          },
          "required": [
            "patient",
            "resourceType"
          ]
        }
      ]
    },
    "MedicationAdministration.Dosage": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.",
          "properties": {
            "text": {
              "description": "Free text dosage instructions can be used for cases where the instructions are too complex to code. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            },
            "siteCodeableConcept": {
              "description": "A coded specification of the anatomic site where the medication first entered the body.  For example, \"left arm\".",
              "$ref": "#/definitions/CodeableConcept"
            },
            "siteReference": {
              "description": "A coded specification of the anatomic site where the medication first entered the body.  For example, \"left arm\".",
              "$ref": "#/definitions/Reference"
            },
            "route": {
              "description": "A code specifying the route or physiological path of administration of a therapeutic agent into or onto the patient.  For example, topical, intravenous, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "method": {
              "description": "A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "dose": {
              "description": "The amount of the medication given at one administration event.   Use this value when the administration is essentially an instantaneous event such as a swallowing a tablet or giving an injection.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "rateRatio": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.",
              "$ref": "#/definitions/Ratio"
            },
            "rateSimpleQuantity": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient.  Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples:  200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.",
              "$ref": "#/definitions/SimpleQuantity"
            }
          }
        }
      ]
    },
    "MedicationAdministration.EventHistory": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.",
          "properties": {
            "status": {
              "description": "The status for the event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "action": {
              "description": "The action that was taken (e.g. verify).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "dateTime": {
              "description": "The date/time at which the event occurred.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "dateTime_": {
              "description": "Extensions for dateTime",
              "$ref": "#/definitions/Element"
            },
            "actor": {
              "description": "The person responsible for taking the action.",
              "$ref": "#/definitions/Reference"
            },
            "reason": {
              "description": "The reason why the action was taken.",
              "$ref": "#/definitions/CodeableConcept"
            }
          }
        }
      ]
    },
    "MedicationDispense": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.",
          "properties": {
            "resourceType": {
              "description": "This is a MedicationDispense resource",
              "type": "string",
              "enum": [
                "MedicationDispense"
              ]
            },
            "identifier": {
              "description": "Identifier assigned by the dispensing facility - this is an identifier assigned outside FHIR.",
              "$ref": "#/definitions/Identifier"
            },
            "status": {
              "description": "A code specifying the state of the set of dispense events.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "medicationCodeableConcept": {
              "description": "Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "medicationReference": {
              "description": "Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.",
              "$ref": "#/definitions/Reference"
            },
            "patient": {
              "description": "A link to a resource representing the person to whom the medication will be given.",
              "$ref": "#/definitions/Reference"
            },
            "dispenser": {
              "description": "The individual responsible for dispensing the medication.",
              "$ref": "#/definitions/Reference"
            },
            "authorizingPrescription": {
              "description": "Indicates the medication order that is being dispensed against.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "type": {
              "description": "Indicates the type of dispensing event that is performed. For example, Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "quantity": {
              "description": "The amount of medication that has been dispensed. Includes unit of measure.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "daysSupply": {
              "description": "The amount of medication expressed as a timing amount.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "whenPrepared": {
              "description": "The time when the dispensed product was packaged and reviewed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "whenPrepared_": {
              "description": "Extensions for whenPrepared",
              "$ref": "#/definitions/Element"
            },
            "whenHandedOver": {
              "description": "The time the dispensed product was provided to the patient or their representative.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "whenHandedOver_": {
              "description": "Extensions for whenHandedOver",
              "$ref": "#/definitions/Element"
            },
            "destination": {
              "description": "Identification of the facility/location where the medication was shipped to, as part of the dispense event.",
              "$ref": "#/definitions/Reference"
            },
            "receiver": {
              "description": "Identifies the person who picked up the medication.  This will usually be a patient or their caregiver, but some cases exist where it can be a healthcare professional.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "note": {
              "description": "Extra information about the dispense that could not be conveyed in the other attributes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "dosageInstruction": {
              "description": "Indicates how the medication is to be used by the patient.  The pharmacist reviews the medication order prior to dispense and updates the dosageInstruction based on the actual product being dispensed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MedicationDispense.DosageInstruction"
              }
            },
            "substitution": {
              "description": "Indicates whether or not substitution was made as part of the dispense.  In some cases substitution will be expected but does not happen, in other cases substitution is not expected but does happen.  This block explains what substitution did or did not happen and why.",
              "$ref": "#/definitions/MedicationDispense.Substitution"
            },
            "eventHistory": {
              "description": "A summary of the events of interest that have occurred, such as when the dispense was verified.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MedicationDispense.EventHistory"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "MedicationDispense.DosageInstruction": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.",
          "properties": {
            "text": {
              "description": "Free text dosage instructions can be used for cases where the instructions are too complex to code. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            },
            "additionalInstructions": {
              "description": "Additional instructions such as \"Swallow with plenty of water\" which may or may not be coded.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "timing": {
              "description": "The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions.  For example, \"Every  8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\";  \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/Timing"
            },
            "asNeededBoolean": {
              "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).  \n\nSpecifically if \u0027boolean\u0027 datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.",
              "type": "true | false"
            },
            "asNeededBoolean_": {
              "description": "Extensions for asNeededBoolean",
              "$ref": "#/definitions/Element"
            },
            "asNeededCodeableConcept": {
              "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).  \n\nSpecifically if \u0027boolean\u0027 datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "siteCodeableConcept": {
              "description": "A coded specification of the anatomic site where the medication first enters the body.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "siteReference": {
              "description": "A coded specification of the anatomic site where the medication first enters the body.",
              "$ref": "#/definitions/Reference"
            },
            "route": {
              "description": "A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "method": {
              "description": "A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "doseRange": {
              "description": "The amount of therapeutic or other substance given at one administration event.",
              "$ref": "#/definitions/Range"
            },
            "doseSimpleQuantity": {
              "description": "The amount of therapeutic or other substance given at one administration event.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "rateRatio": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/Ratio"
            },
            "rateRange": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/Range"
            },
            "rateSimpleQuantity": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.  Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "maxDosePerPeriod": {
              "description": "The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time,  e.g. 1000mg in 24 hours.",
              "$ref": "#/definitions/Ratio"
            }
          }
        }
      ]
    },
    "MedicationDispense.Substitution": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.",
          "properties": {
            "type": {
              "description": "A code signifying whether a different drug was dispensed from what was prescribed.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "reason": {
              "description": "Indicates the reason for the substitution of (or lack of substitution) from what was prescribed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "responsibleParty": {
              "description": "The person or organization that has primary responsibility for the substitution.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "MedicationDispense.EventHistory": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Indicates that a medication product is to be or has been dispensed for a named person/patient.  This includes a description of the medication product (supply) provided and the instructions for administering the medication.  The medication dispense is the result of a pharmacy system responding to a medication order.",
          "properties": {
            "status": {
              "description": "The status for the event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "action": {
              "description": "The action that was taken (e.g. verify).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "dateTime": {
              "description": "The date/time at which the event occurred.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "dateTime_": {
              "description": "Extensions for dateTime",
              "$ref": "#/definitions/Element"
            },
            "actor": {
              "description": "The person responsible for taking the action.",
              "$ref": "#/definitions/Reference"
            },
            "reason": {
              "description": "The reason why the action was taken.",
              "$ref": "#/definitions/CodeableConcept"
            }
          }
        }
      ]
    },
    "MedicationOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationOrder\" rather than \"MedicationPrescription\" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.",
          "properties": {
            "resourceType": {
              "description": "This is a MedicationOrder resource",
              "type": "string",
              "enum": [
                "MedicationOrder"
              ]
            },
            "identifier": {
              "description": "External identifier - one that would be used by another non-FHIR system - for example a re-imbursement system might issue its own id for each prescription that is created.  This is particularly important where FHIR only provides part of an entire workflow process where records have to be tracked through an entire system.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "A code specifying the state of the order.  Generally this will be active or completed state.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "medicationCodeableConcept": {
              "description": "Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "medicationReference": {
              "description": "Identifies the medication being administered. This is a link to a resource that represents the medication which may be the details of the medication or simply an attribute carrying a code that identifies the medication from a known list of medications.",
              "$ref": "#/definitions/Reference"
            },
            "patient": {
              "description": "A link to a resource representing the person to whom the medication will be given.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "A link to a resource that identifies the particular occurrence of contact between patient and health care provider.",
              "$ref": "#/definitions/Reference"
            },
            "dateWritten": {
              "description": "The date (and perhaps time) when the prescription was initially written.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "dateWritten_": {
              "description": "Extensions for dateWritten",
              "$ref": "#/definitions/Element"
            },
            "prescriber": {
              "description": "The healthcare professional responsible for authorizing the initial prescription.",
              "$ref": "#/definitions/Reference"
            },
            "reasonCode": {
              "description": "Can be the reason or the indication for writing the prescription.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reasonReference": {
              "description": "Condition that supports why the prescription is being written.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "note": {
              "description": "Extra information about the prescription that could not be conveyed by the other attributes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "dosageInstruction": {
              "description": "Indicates how the medication is to be used by the patient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MedicationOrder.DosageInstruction"
              }
            },
            "dispenseRequest": {
              "description": "Indicates the specific details for the dispense or medication supply part of a medication order (also known as a Medication Prescription).  Note that this information is NOT always sent with the order.  There may be in some settings (e.g. hospitals) institutional or system support for completing the dispense details in the pharmacy department.",
              "$ref": "#/definitions/MedicationOrder.DispenseRequest"
            },
            "substitution": {
              "description": "Indicates whether or not substitution can or should be part of the dispense. In some cases substitution must happen, in other cases substitution must not happen, and in others it does not matter. This block explains the prescriber\u0027s intent. If nothing is specified substitution may be done.",
              "$ref": "#/definitions/MedicationOrder.Substitution"
            },
            "priorPrescription": {
              "description": "A link to a resource representing an earlier order or prescription that this order supersedes.",
              "$ref": "#/definitions/Reference"
            },
            "eventHistory": {
              "description": "A summary of the events of interest that have occurred as the request is processed; e.g. when the order was verified or when it was completed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MedicationOrder.EventHistory"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "MedicationOrder.DosageInstruction": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationOrder\" rather than \"MedicationPrescription\" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.",
          "properties": {
            "text": {
              "description": "Free text dosage instructions can be used for cases where the instructions are too complex to code.  The content of this attribute does not include the name or description of the medication. When coded instructions are present, the free text instructions may still be present for display to humans taking or administering the medication. It is expected that the text instructions will always be populated.  If the dosage.timing attribute is also populated, then the dosage.text should reflect the same information as the timing.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            },
            "additionalInstructions": {
              "description": "Additional instructions such as \"Swallow with plenty of water\" which may or may not be coded.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "timing": {
              "description": "The timing schedule for giving the medication to the patient. The Schedule data type allows many different expressions. For example: \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/Timing"
            },
            "asNeededBoolean": {
              "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
              "type": "true | false"
            },
            "asNeededBoolean_": {
              "description": "Extensions for asNeededBoolean",
              "$ref": "#/definitions/Element"
            },
            "asNeededCodeableConcept": {
              "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "siteCodeableConcept": {
              "description": "A coded specification of the anatomic site where the medication first enters the body.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "siteReference": {
              "description": "A coded specification of the anatomic site where the medication first enters the body.",
              "$ref": "#/definitions/Reference"
            },
            "route": {
              "description": "A code specifying the route or physiological path of administration of a therapeutic agent into or onto a patient\u0027s body.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "method": {
              "description": "A coded value indicating the method by which the medication is introduced into or onto the body. Most commonly used for injections.  For examples, Slow Push; Deep IV.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "doseRange": {
              "description": "The amount of therapeutic or other substance given at one administration event.",
              "$ref": "#/definitions/Range"
            },
            "doseSimpleQuantity": {
              "description": "The amount of therapeutic or other substance given at one administration event.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "maxDosePerPeriod": {
              "description": "The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.",
              "$ref": "#/definitions/Ratio"
            },
            "maxDosePerAdministration": {
              "description": "The maximum total quantity of a therapeutic substance that may be administered to a subject per administration.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "maxDosePerLifetime": {
              "description": "The maximum total quantity of a therapeutic substance that may be administered per lifetime of the subject.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "rateRatio": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/Ratio"
            },
            "rateRange": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/Range"
            },
            "rateSimpleQuantity": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/SimpleQuantity"
            }
          }
        }
      ]
    },
    "MedicationOrder.DispenseRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationOrder\" rather than \"MedicationPrescription\" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.",
          "properties": {
            "validityPeriod": {
              "description": "This indicates the validity period of a prescription (stale dating the Prescription).",
              "$ref": "#/definitions/Period"
            },
            "numberOfRepeatsAllowed": {
              "description": "An integer indicating the number of additional times (aka refills or repeats) the patient can receive the prescribed medication.   Usage Notes: This integer does NOT include the original order dispense.   This means that if an order indicates dispense 30 tablets plus  \"3 repeats\", then the order can be dispensed a total of 4 times and the patient can receive a total of 120 tablets.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "numberOfRepeatsAllowed_": {
              "description": "Extensions for numberOfRepeatsAllowed",
              "$ref": "#/definitions/Element"
            },
            "quantity": {
              "description": "The amount that is to be dispensed for one fill.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "expectedSupplyDuration": {
              "description": "Identifies the period time over which the supplied product is expected to be used, or the length of time the dispense is expected to last.",
              "$ref": "#/definitions/Duration"
            }
          }
        }
      ]
    },
    "MedicationOrder.Substitution": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationOrder\" rather than \"MedicationPrescription\" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.",
          "properties": {
            "allowed": {
              "description": "True if the prescriber allows a different drug to be dispensed from what was prescribed.",
              "type": "true | false"
            },
            "allowed_": {
              "description": "Extensions for allowed",
              "$ref": "#/definitions/Element"
            },
            "reason": {
              "description": "Indicates the reason for the substitution, or why substitution must or must not be performed.",
              "$ref": "#/definitions/CodeableConcept"
            }
          }
        }
      ]
    },
    "MedicationOrder.EventHistory": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An order for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called \"MedicationOrder\" rather than \"MedicationPrescription\" to generalize the use across inpatient and outpatient settings as well as for care plans, etc.",
          "properties": {
            "status": {
              "description": "The status for the event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "action": {
              "description": "The action that was taken (e.g. verify, discontinue).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "dateTime": {
              "description": "The date/time at which the event occurred.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "dateTime_": {
              "description": "Extensions for dateTime",
              "$ref": "#/definitions/Element"
            },
            "actor": {
              "description": "The person responsible for taking the action.",
              "$ref": "#/definitions/Reference"
            },
            "reason": {
              "description": "The reason why the action was taken.",
              "$ref": "#/definitions/CodeableConcept"
            }
          }
        }
      ]
    },
    "MedicationStatement": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient\u0027s memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains \r\rThe primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient\u0027s memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.",
          "properties": {
            "resourceType": {
              "description": "This is a MedicationStatement resource",
              "type": "string",
              "enum": [
                "MedicationStatement"
              ]
            },
            "identifier": {
              "description": "External identifier - FHIR will generate its own internal identifiers (probably URLs) which do not need to be explicitly managed by the resource.  The identifier here is one that would be used by another non-FHIR system - for example an automated medication pump would provide a record each time it operated; an administration while the patient was off the ward might be made with a different system and entered after the event.  Particularly important if these records have to be updated.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "A code representing the patient or other source\u0027s judgment about the state of the medication used that this statement is about.  Generally this will be active or completed.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "medicationCodeableConcept": {
              "description": "Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "medicationReference": {
              "description": "Identifies the medication being administered. This is either a link to a resource representing the details of the medication or a simple attribute carrying a code that identifies the medication from a known list of medications.",
              "$ref": "#/definitions/Reference"
            },
            "patient": {
              "description": "The person or animal who is/was taking the medication.",
              "$ref": "#/definitions/Reference"
            },
            "effectiveDateTime": {
              "description": "The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "effectiveDateTime_": {
              "description": "Extensions for effectiveDateTime",
              "$ref": "#/definitions/Element"
            },
            "effectivePeriod": {
              "description": "The interval of time during which it is being asserted that the patient was taking the medication (or was not taking, when the wasNotGiven element is true).",
              "$ref": "#/definitions/Period"
            },
            "informationSource": {
              "description": "The person who provided the information about the taking of this medication.  Note:  A MedicationStatement may be derived from supportingInformation e.g claims or medicationOrder.",
              "$ref": "#/definitions/Reference"
            },
            "supportingInformation": {
              "description": "Allows linking the MedicationStatement to the underlying MedicationOrder, or to other information that supports or is used to derive the MedicationStatement.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "dateAsserted": {
              "description": "The date when the medication statement was asserted by the information source.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "dateAsserted_": {
              "description": "Extensions for dateAsserted",
              "$ref": "#/definitions/Element"
            },
            "wasNotTaken": {
              "description": "Set this to true if the record is saying that the medication was NOT taken.",
              "type": "true | false"
            },
            "wasNotTaken_": {
              "description": "Extensions for wasNotTaken",
              "$ref": "#/definitions/Element"
            },
            "reasonNotTaken": {
              "description": "A code indicating why the medication was not taken.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reasonForUseCode": {
              "description": "A reason for why the medication is being/was taken.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reasonForUseReference": {
              "description": "Condition that supports why the medication is being/was taken.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "note": {
              "description": "Provides extra information about the medication statement that is not conveyed by the other attributes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "dosage": {
              "description": "Indicates how the medication is/was used by the patient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MedicationStatement.Dosage"
              }
            }
          },
          "required": [
            "patient",
            "resourceType"
          ]
        }
      ]
    },
    "MedicationStatement.Dosage": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of a medication that is being consumed by a patient.   A MedicationStatement may indicate that the patient may be taking the medication now, or has taken the medication in the past or will be taking the medication in the future.  The source of this information can be the patient, significant other (such as a family member or spouse), or a clinician.  A common scenario where this information is captured is during the history taking process during a patient visit or stay.   The medication information may come from e.g. the patient\u0027s memory, from a prescription bottle,  or from a list of medications the patient, clinician or other party maintains \r\rThe primary difference between a medication statement and a medication administration is that the medication administration has complete administration information and is based on actual administration information from the person who administered the medication.  A medication statement is often, if not always, less specific.  There is no required date/time when the medication was administered, in fact we only know that a source has reported the patient is taking this medication, where details such as time, quantity, or rate or even medication product may be incomplete or missing or less precise.  As stated earlier, the medication statement information may come from the patient\u0027s memory, from a prescription bottle or from a list of medications the patient, clinician or other party maintains.  Medication administration is more formal and is not missing detailed information.",
          "properties": {
            "text": {
              "description": "Free text dosage information as reported about a patient\u0027s medication use. When coded dosage information is present, the free text may still be present for display to humans.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            },
            "additionalInstructions": {
              "description": "Additional instructions such as \"Swallow with plenty of water\" which may or may not be coded.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "timing": {
              "description": "The timing schedule for giving the medication to the patient.  The Schedule data type allows many different expressions, for example.  \"Every  8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\";  \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/Timing"
            },
            "asNeededBoolean": {
              "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).  \n\nSpecifically if \u0027boolean\u0027 datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.",
              "type": "true | false"
            },
            "asNeededBoolean_": {
              "description": "Extensions for asNeededBoolean",
              "$ref": "#/definitions/Element"
            },
            "asNeededCodeableConcept": {
              "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).  \n\nSpecifically if \u0027boolean\u0027 datatype is selected, then the following logic applies:  If set to True, this indicates that the medication is only taken when needed, within the specified schedule.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "siteCodeableConcept": {
              "description": "A coded specification of or a reference to the anatomic site where the medication first enters the body.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "siteReference": {
              "description": "A coded specification of or a reference to the anatomic site where the medication first enters the body.",
              "$ref": "#/definitions/Reference"
            },
            "route": {
              "description": "A code specifying the route or physiological path of administration of a therapeutic agent into or onto a subject.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "method": {
              "description": "A coded value indicating the method by which the medication is intended to be or was introduced into or on the body.  This attribute will most often NOT be populated.  It is most commonly used for injections.  For example, Slow Push, Deep IV.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "doseSimpleQuantity": {
              "description": "The amount of therapeutic or other substance given at one administration event.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "doseRange": {
              "description": "The amount of therapeutic or other substance given at one administration event.",
              "$ref": "#/definitions/Range"
            },
            "rateRatio": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/Ratio"
            },
            "rateRange": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/Range"
            },
            "rateSimpleQuantity": {
              "description": "Identifies the speed with which the medication was or will be introduced into the patient. Typically the rate for an infusion e.g. 100 ml per 1 hour or 100 ml/hr.  May also be expressed as a rate per unit of time e.g. 500 ml per 2 hours.   Other examples: 200 mcg/min or 200 mcg/1 minute; 1 liter/8 hours.  Sometimes, a rate can imply duration when expressed as total volume / duration (e.g.  500mL/2 hours implies a duration of 2 hours).  However, when rate doesn\u0027t imply duration (e.g. 250mL/hour), then the timing.repeat.duration is needed to convey the infuse over time period.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "maxDosePerPeriod": {
              "description": "The maximum total quantity of a therapeutic substance that may be administered to a subject over the period of time.  For example, 1000mg in 24 hours.",
              "$ref": "#/definitions/Ratio"
            }
          }
        }
      ]
    },
    "MessageHeader": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.",
          "properties": {
            "resourceType": {
              "description": "This is a MessageHeader resource",
              "type": "string",
              "enum": [
                "MessageHeader"
              ]
            },
            "timestamp": {
              "description": "The time that the message was sent.",
              "type": "string"
            },
            "timestamp_": {
              "description": "Extensions for timestamp",
              "$ref": "#/definitions/Element"
            },
            "event": {
              "description": "Code that identifies the event this message represents and connects it with its definition. Events defined as part of the FHIR specification have the system value \"http://hl7.org/fhir/message-events\".",
              "$ref": "#/definitions/Coding"
            },
            "response": {
              "description": "Information about the message that this message is a response to.  Only present if this message is a response.",
              "$ref": "#/definitions/MessageHeader.Response"
            },
            "source": {
              "description": "The source application from which this message originated.",
              "$ref": "#/definitions/MessageHeader.Source"
            },
            "destination": {
              "description": "The destination application which the message is intended for.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/MessageHeader.Destination"
              }
            },
            "enterer": {
              "description": "The person or device that performed the data entry leading to this message. Where there is more than one candidate, pick the most proximal to the message. Can provide other enterers in extensions.",
              "$ref": "#/definitions/Reference"
            },
            "author": {
              "description": "The logical author of the message - the person or device that decided the described event should happen. Where there is more than one candidate, pick the most proximal to the MessageHeader. Can provide other authors in extensions.",
              "$ref": "#/definitions/Reference"
            },
            "receiver": {
              "description": "Allows data conveyed by a message to be addressed to a particular person or department when routing to a specific application isn\u0027t sufficient.",
              "$ref": "#/definitions/Reference"
            },
            "responsible": {
              "description": "The person or organization that accepts overall responsibility for the contents of the message. The implication is that the message event happened under the policies of the responsible party.",
              "$ref": "#/definitions/Reference"
            },
            "reason": {
              "description": "Coded indication of the cause for the event - indicates  a reason for the occurrence of the event that is a focus of this message.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "data": {
              "description": "The actual data of the message - a reference to the root/focus class of the event.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "source",
            "event",
            "resourceType"
          ]
        }
      ]
    },
    "MessageHeader.Response": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.",
          "properties": {
            "identifier": {
              "description": "The id of the message that this message is a response to.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "Code that identifies the type of response to the message - whether it was successful or not, and whether it should be resent or not.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "details": {
              "description": "Full details of any issues found in the message.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "MessageHeader.Source": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.",
          "properties": {
            "name": {
              "description": "Human-readable name for the source system.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "software": {
              "description": "May include configuration or other information useful in debugging.",
              "type": "string"
            },
            "software_": {
              "description": "Extensions for software",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "Can convey versions of multiple systems in situations where a message passes through multiple hands.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "An e-mail, phone, website or other contact point to use to resolve issues with message communications.",
              "$ref": "#/definitions/ContactPoint"
            },
            "endpoint": {
              "description": "Identifies the routing target to send acknowledgements to.",
              "type": "string"
            },
            "endpoint_": {
              "description": "Extensions for endpoint",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "MessageHeader.Destination": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The header for a message exchange that is either requesting or responding to an action.  The reference(s) that are the subject of the action as well as other information related to the action are typically transmitted in a bundle in which the MessageHeader resource instance is the first resource in the bundle.",
          "properties": {
            "name": {
              "description": "Human-readable name for the target system.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "target": {
              "description": "Identifies the target end system in situations where the initial message transmission is to an intermediary system.",
              "$ref": "#/definitions/Reference"
            },
            "endpoint": {
              "description": "Indicates where the message should be routed to.",
              "type": "string"
            },
            "endpoint_": {
              "description": "Extensions for endpoint",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ModuleDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The ModuleDefinition resource defines the data requirements for a quality artifact.",
          "properties": {
            "resourceType": {
              "description": "This is a ModuleDefinition resource",
              "type": "string",
              "enum": [
                "ModuleDefinition"
              ]
            },
            "identifier": {
              "description": "A logical identifier for the module such as the CMS or NQF identifiers for a measure artifact.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "version": {
              "description": "The version of the module, if any. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge modules, refer to the Decision Support Service specification.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "model": {
              "description": "A model reference used by the content.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleDefinition.Model"
              }
            },
            "library": {
              "description": "A library referenced by the module. The reference must consist of either an id, or a document reference.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleDefinition.Library"
              }
            },
            "codeSystem": {
              "description": "A code system definition used within the knowledge module.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleDefinition.CodeSystem"
              }
            },
            "valueSet": {
              "description": "A value set definition used by the knowledge module.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleDefinition.ValueSet"
              }
            },
            "parameter": {
              "description": "Parameters to the module.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleDefinition.Parameter"
              }
            },
            "data": {
              "description": "Describes a required data item for evaluation in terms of the type of data, and optional code- or date-based filters of the data.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleDefinition.Data"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "ModuleDefinition.Model": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleDefinition resource defines the data requirements for a quality artifact.",
          "properties": {
            "name": {
              "description": "The name of the model.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "The identifier of the model.",
              "type": "string"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version of the model.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ModuleDefinition.Library": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleDefinition resource defines the data requirements for a quality artifact.",
          "properties": {
            "name": {
              "description": "The local name for the library reference. If no local name is provided, the name of the referenced library is assumed.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "The identifier of the library.",
              "type": "string"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version of the library.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "documentAttachment": {
              "description": "A reference to the library.",
              "$ref": "#/definitions/Attachment"
            },
            "documentReference": {
              "description": "A reference to the library.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ModuleDefinition.CodeSystem": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleDefinition resource defines the data requirements for a quality artifact.",
          "properties": {
            "name": {
              "description": "The local name for the code system.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "The code system uri.",
              "type": "string"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The code system version, if any.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ModuleDefinition.ValueSet": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleDefinition resource defines the data requirements for a quality artifact.",
          "properties": {
            "name": {
              "description": "The local name for the value set.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "The value set uri.",
              "type": "string"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version of the value set, if any.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "codeSystem": {
              "description": "The code systems in use within the value set. These must refer to previously defined code systems within this knowledge module or a referenced library.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "codeSystem_": {
              "description": "Extensions for codeSystem",
              "items": {
                "$ref": "#/definitions/Element"
              }
            }
          }
        }
      ]
    },
    "ModuleDefinition.Parameter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleDefinition resource defines the data requirements for a quality artifact.",
          "properties": {
            "name": {
              "description": "The name of the parameter.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "use": {
              "description": "Whether the parameter is input or output for the module.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "use_": {
              "description": "Extensions for use",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "A brief description of the parameter.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of the parameter.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "The profile of the parameter, if any.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "ModuleDefinition.Data": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleDefinition resource defines the data requirements for a quality artifact.",
          "properties": {
            "type": {
              "description": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "The profile of the required data, specified as the uri of the profile definition.",
              "$ref": "#/definitions/Reference"
            },
            "mustSupport": {
              "description": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "mustSupport_": {
              "description": "Extensions for mustSupport",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "codeFilter": {
              "description": "Code filters for the required data, if any.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleDefinition.CodeFilter"
              }
            },
            "dateFilter": {
              "description": "Date filters for the required data, if any.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModuleDefinition.DateFilter"
              }
            }
          }
        }
      ]
    },
    "ModuleDefinition.CodeFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleDefinition resource defines the data requirements for a quality artifact.",
          "properties": {
            "path": {
              "description": "The code-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            },
            "valueSetString": {
              "description": "The valueset for the code filter. The valueSet or codeableConcept elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
              "type": "string"
            },
            "valueSetString_": {
              "description": "Extensions for valueSetString",
              "$ref": "#/definitions/Element"
            },
            "valueSetReference": {
              "description": "The valueset for the code filter. The valueSet or codeableConcept elements are exclusive. If valueSet is specified, the filter will return only those data items for which the value of the code-valued element specified in the path is a member of the specified valueset.",
              "$ref": "#/definitions/Reference"
            },
            "codeableConcept": {
              "description": "The codeable concept for the code filter. Only one of valueSet or codeableConcept may be specified. If codeableConcepts are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codeable concepts.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            }
          }
        }
      ]
    },
    "ModuleDefinition.DateFilter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The ModuleDefinition resource defines the data requirements for a quality artifact.",
          "properties": {
            "path": {
              "description": "The date-valued attribute of the filter. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements. Note that the index must be an integer constant. The path must resolve to an element of type dateTime, Period, Schedule, or Timing.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            },
            "valuePeriod": {
              "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "NamingSystem": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding data types.",
          "properties": {
            "resourceType": {
              "description": "This is a NamingSystem resource",
              "type": "string",
              "enum": [
                "NamingSystem"
              ]
            },
            "name": {
              "description": "The descriptive name of this particular identifier type or code system.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "Indicates whether the naming system is \"ready for use\" or not.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "kind": {
              "description": "Indicates the purpose for the naming system - what kinds of things does it make unique?",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "kind_": {
              "description": "Extensions for kind",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "The date  (and optionally time) when the system was registered or published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the registration changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the naming system.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NamingSystem.Contact"
              }
            },
            "responsible": {
              "description": "The name of the organization that is responsible for issuing identifiers or codes for this namespace and ensuring their non-collision.",
              "type": "string"
            },
            "responsible_": {
              "description": "Extensions for responsible",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Categorizes a naming system for easier search by grouping related naming systems.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "description": {
              "description": "Details about what the namespace identifies including scope, granularity, version labeling, etc.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of naming systems.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "usage": {
              "description": "Provides guidance on the use of the namespace, including the handling of formatting characters, use of upper vs. lower case, etc.",
              "type": "string"
            },
            "usage_": {
              "description": "Extensions for usage",
              "$ref": "#/definitions/Element"
            },
            "uniqueId": {
              "description": "Indicates how the system may be identified when referenced in electronic exchange.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NamingSystem.UniqueId"
              }
            },
            "replacedBy": {
              "description": "For naming systems that are retired, indicates the naming system that should be used in their place (if any).",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "uniqueId",
            "resourceType"
          ]
        }
      ]
    },
    "NamingSystem.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding data types.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the naming system.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "NamingSystem.UniqueId": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a \"System\" used within the Identifier and Coding data types.",
          "properties": {
            "type": {
              "description": "Identifies the unique identifier scheme used for this particular identifier.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The string that should be sent over the wire to identify the code system or identifier system.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            },
            "preferred": {
              "description": "Indicates whether this identifier is the \"preferred\" identifier of this type.",
              "type": "true | false"
            },
            "preferred_": {
              "description": "Extensions for preferred",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "Identifies the period of time over which this identifier is considered appropriate to refer to the naming system.  Outside of this window, the identifier might be non-deterministic.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "NutritionOrder": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.",
          "properties": {
            "resourceType": {
              "description": "This is a NutritionOrder resource",
              "type": "string",
              "enum": [
                "NutritionOrder"
              ]
            },
            "identifier": {
              "description": "Identifiers assigned to this order by the order sender or by the order receiver.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "The workflow status of the nutrition order/request.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "patient": {
              "description": "The person (patient) who needs the nutrition order for an oral diet, nutritional supplement and/or enteral or formula feeding.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "An encounter that provides additional information about the healthcare context in which this request is made.",
              "$ref": "#/definitions/Reference"
            },
            "dateTime": {
              "description": "The date and time that this nutrition order was requested.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "dateTime_": {
              "description": "Extensions for dateTime",
              "$ref": "#/definitions/Element"
            },
            "orderer": {
              "description": "The practitioner that holds legal responsibility for ordering the diet, nutritional supplement, or formula feedings.",
              "$ref": "#/definitions/Reference"
            },
            "allergyIntolerance": {
              "description": "A link to a record of allergies or intolerances  which should be included in the nutrition order.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "foodPreferenceModifier": {
              "description": "This modifier is used to convey order-specific modifiers about the type of food that should be given. These can be derived from patient allergies, intolerances, or preferences such as Halal, Vegan or Kosher. This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "excludeFoodModifier": {
              "description": "This modifier is used to convey order-specific modifiers about the type of food that should NOT be given. These can be derived from patient allergies, intolerances, or preferences such as No Red Meat, No Soy or No Wheat or  Gluten-Free.  While it should not be necessary to repeat allergy or intolerance information captured in the referenced allergyIntolerance resource in the excludeFoodModifier, this element may be used to convey additional specificity related to foods that should be eliminated from the patient’s diet for any reason.  This modifier applies to the entire nutrition order inclusive of the oral diet, nutritional supplements and enteral formula feedings.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "oralDiet": {
              "description": "Diet given orally in contrast to enteral (tube) feeding.",
              "$ref": "#/definitions/NutritionOrder.OralDiet"
            },
            "supplement": {
              "description": "Oral nutritional products given in order to add further nutritional value to the patient\u0027s diet.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NutritionOrder.Supplement"
              }
            },
            "enteralFormula": {
              "description": "Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.",
              "$ref": "#/definitions/NutritionOrder.EnteralFormula"
            }
          },
          "required": [
            "patient",
            "resourceType"
          ]
        }
      ]
    },
    "NutritionOrder.OralDiet": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.",
          "properties": {
            "type": {
              "description": "The kind of diet or dietary restriction such as fiber restricted diet or diabetic diet.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "schedule": {
              "description": "The time period and frequency at which the diet should be given.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Timing"
              }
            },
            "nutrient": {
              "description": "Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NutritionOrder.Nutrient"
              }
            },
            "texture": {
              "description": "Class that describes any texture modifications required for the patient to safely consume various types of solid foods.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NutritionOrder.Texture"
              }
            },
            "fluidConsistencyType": {
              "description": "The required consistency (e.g. honey-thick, nectar-thick, thin, thickened.) of liquids or fluids served to the patient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "instruction": {
              "description": "Free text or additional instructions or information pertaining to the oral diet.",
              "type": "string"
            },
            "instruction_": {
              "description": "Extensions for instruction",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "NutritionOrder.Nutrient": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.",
          "properties": {
            "modifier": {
              "description": "The nutrient that is being modified such as carbohydrate or sodium.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "amount": {
              "description": "The quantity of the specified nutrient to include in diet.",
              "$ref": "#/definitions/SimpleQuantity"
            }
          }
        }
      ]
    },
    "NutritionOrder.Texture": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.",
          "properties": {
            "modifier": {
              "description": "Any texture modifications (for solid foods) that should be made, e.g. easy to chew, chopped, ground, and pureed.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "foodType": {
              "description": "The food type(s) (e.g. meats, all foods)  that the texture modification applies to.  This could be all foods types.",
              "$ref": "#/definitions/CodeableConcept"
            }
          }
        }
      ]
    },
    "NutritionOrder.Supplement": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.",
          "properties": {
            "type": {
              "description": "The kind of nutritional supplement product required such as a high protein or pediatric clear liquid supplement.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "productName": {
              "description": "The product or brand name of the nutritional supplement such as \"Acme Protein Shake\".",
              "type": "string"
            },
            "productName_": {
              "description": "Extensions for productName",
              "$ref": "#/definitions/Element"
            },
            "schedule": {
              "description": "The time period and frequency at which the supplement(s) should be given.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Timing"
              }
            },
            "quantity": {
              "description": "The amount of the nutritional supplement to be given.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "instruction": {
              "description": "Free text or additional instructions or information pertaining to the oral supplement.",
              "type": "string"
            },
            "instruction_": {
              "description": "Extensions for instruction",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "NutritionOrder.EnteralFormula": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.",
          "properties": {
            "baseFormulaType": {
              "description": "The type of enteral or infant formula such as an adult standard formula with fiber or a soy-based infant formula.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "baseFormulaProductName": {
              "description": "The product or brand name of the enteral or infant formula product such as \"ACME Adult Standard Formula\".",
              "type": "string"
            },
            "baseFormulaProductName_": {
              "description": "Extensions for baseFormulaProductName",
              "$ref": "#/definitions/Element"
            },
            "additiveType": {
              "description": "Indicates the type of modular component such as protein, carbohydrate, fat or fiber to be provided in addition to or mixed with the base formula.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "additiveProductName": {
              "description": "The product or brand name of the type of modular component to be added to the formula.",
              "type": "string"
            },
            "additiveProductName_": {
              "description": "Extensions for additiveProductName",
              "$ref": "#/definitions/Element"
            },
            "caloricDensity": {
              "description": "The amount of energy (Calories) that the formula should provide per specified volume, typically per mL or fluid oz.  For example, an infant may require a formula that provides 24 Calories per fluid ounce or an adult may require an enteral formula that provides 1.5 Calorie/mL.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "routeofAdministration": {
              "description": "The route or physiological path of administration into the patient\u0027s gastrointestinal  tract for purposes of providing the formula feeding, e.g. nasogastric tube.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "administration": {
              "description": "Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NutritionOrder.Administration"
              }
            },
            "maxVolumeToDeliver": {
              "description": "The maximum total quantity of formula that may be administered to a subject over the period of time, e.g. 1440 mL over 24 hours.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "administrationInstruction": {
              "description": "Free text formula administration, feeding instructions or additional instructions or information.",
              "type": "string"
            },
            "administrationInstruction_": {
              "description": "Extensions for administrationInstruction",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "NutritionOrder.Administration": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.",
          "properties": {
            "schedule": {
              "description": "The time period and frequency at which the enteral formula should be delivered to the patient.",
              "$ref": "#/definitions/Timing"
            },
            "quantity": {
              "description": "The volume of formula to provide to the patient per the specified administration schedule.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "rateSimpleQuantity": {
              "description": "The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "rateRatio": {
              "description": "The rate of administration of formula via a feeding pump, e.g. 60 mL per hour, according to the specified schedule.",
              "$ref": "#/definitions/Ratio"
            }
          }
        }
      ]
    },
    "Observation": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Measurements and simple assertions made about a patient, device or other subject.",
          "properties": {
            "resourceType": {
              "description": "This is a Observation resource",
              "type": "string",
              "enum": [
                "Observation"
              ]
            },
            "identifier": {
              "description": "A unique identifier for the simple observation instance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "status": {
              "description": "The status of the result value.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "category": {
              "description": "A code that classifies the general type of observation being made.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "code": {
              "description": "Describes what was observed. Sometimes this is called the observation \"name\".",
              "$ref": "#/definitions/CodeableConcept"
            },
            "subject": {
              "description": "The patient, or group of patients, location, or device whose characteristics (direct or indirect) are described by the observation and into whose record the observation is placed.  Comments: Indirect characteristics may be those of a specimen, fetus, donor,  other observer (for example a relative or EMT), or any observation made about the subject.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "The healthcare event  (e.g. a patient and healthcare provider interaction) during which this observation is made.",
              "$ref": "#/definitions/Reference"
            },
            "effectiveDateTime": {
              "description": "The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the \"physiologically relevant time\". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "effectiveDateTime_": {
              "description": "Extensions for effectiveDateTime",
              "$ref": "#/definitions/Element"
            },
            "effectivePeriod": {
              "description": "The time or time-period the observed value is asserted as being true. For biological subjects - e.g. human patients - this is usually called the \"physiologically relevant time\". This is usually either the time of the procedure or of specimen collection, but very often the source of the date/time is not known, only the date/time itself.",
              "$ref": "#/definitions/Period"
            },
            "issued": {
              "description": "The date and time this observation was made available to providers, typically after the results have been reviewed and verified.",
              "type": "string"
            },
            "issued_": {
              "description": "Extensions for issued",
              "$ref": "#/definitions/Element"
            },
            "performer": {
              "description": "Who was responsible for asserting the observed value as \"true\".",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "valueQuantity": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Quantity"
            },
            "valueCodeableConcept": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueString": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueRange": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Range"
            },
            "valueRatio": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Ratio"
            },
            "valueSampledData": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/SampledData"
            },
            "valueAttachment": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Attachment"
            },
            "valueTime": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "valueTime_": {
              "description": "Extensions for valueTime",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            },
            "valuePeriod": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Period"
            },
            "dataAbsentReason": {
              "description": "Provides a reason why the expected value in the element Observation.value[x] is missing.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "interpretation": {
              "description": "The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "comment": {
              "description": "May include statements about significant, unexpected or unreliable values, or information about the source of the value where this may be relevant to the interpretation of the result.",
              "type": "string"
            },
            "comment_": {
              "description": "Extensions for comment",
              "$ref": "#/definitions/Element"
            },
            "bodySite": {
              "description": "Indicates the site on the subject\u0027s body where the observation was made (i.e. the target site).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "method": {
              "description": "Indicates the mechanism used to perform the observation.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "specimen": {
              "description": "The specimen that was used when this observation was made.",
              "$ref": "#/definitions/Reference"
            },
            "device": {
              "description": "The device used to generate the observation data.",
              "$ref": "#/definitions/Reference"
            },
            "referenceRange": {
              "description": "Guidance on how to interpret the value by comparison to a normal or recommended range.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Observation.ReferenceRange"
              }
            },
            "related": {
              "description": "A  reference to another resource (usually another Observation but could  also be a QuestionnaireAnswer) whose relationship is defined by the relationship type code.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Observation.Related"
              }
            },
            "component": {
              "description": "Some observations have multiple component observations.  These component observations are expressed as separate code value pairs that share the same attributes.  Examples include systolic and diastolic component observations for blood pressure measurement and multiple component observations for genetics observations.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Observation.Component"
              }
            }
          },
          "required": [
            "code",
            "resourceType"
          ]
        }
      ]
    },
    "Observation.ReferenceRange": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Measurements and simple assertions made about a patient, device or other subject.",
          "properties": {
            "low": {
              "description": "The value of the low bound of the reference range.  The low bound of the reference range endpoint is inclusive of the value (e.g.  reference range is \u003e\u003d5 - \u003c\u003d9).   If the low bound is omitted,  it is assumed to be meaningless (e.g. reference range is \u003c\u003d2.3).",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "high": {
              "description": "The value of the high bound of the reference range.  The high bound of the reference range endpoint is inclusive of the value (e.g.  reference range is \u003e\u003d5 - \u003c\u003d9).   If the high bound is omitted,  it is assumed to be meaningless (e.g. reference range is \u003e\u003d 2.3).",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "meaning": {
              "description": "Codes to indicate the the target population this reference range applies to.  For example, a reference range may be based on the normal population or a particular sex, race, therapeutic status, or endocrine or reproductive status.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "age": {
              "description": "The age at which this reference range is applicable. This is a neonatal age (e.g. number of weeks at term) if the meaning says so.",
              "$ref": "#/definitions/Range"
            },
            "text": {
              "description": "Text based reference range in an observation which may be used when a quantitative range is not appropriate for an observation.  An example would be a reference value of \"Negative\" or a list or table of \u0027normals\u0027.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Observation.Related": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Measurements and simple assertions made about a patient, device or other subject.",
          "properties": {
            "type": {
              "description": "A code specifying the kind of relationship that exists with the target resource.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "target": {
              "description": "A reference to the observation or [[[QuestionnaireResponse]]] resource that is related to this observation.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "target"
          ]
        }
      ]
    },
    "Observation.Component": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Measurements and simple assertions made about a patient, device or other subject.",
          "properties": {
            "code": {
              "description": "Describes what was observed. Sometimes this is called the observation \"code\".",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueQuantity": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Quantity"
            },
            "valueCodeableConcept": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueString": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueRange": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Range"
            },
            "valueRatio": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Ratio"
            },
            "valueSampledData": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/SampledData"
            },
            "valueAttachment": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Attachment"
            },
            "valueTime": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "valueTime_": {
              "description": "Extensions for valueTime",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            },
            "valuePeriod": {
              "description": "The information determined as a result of making the observation, if the information has a simple value.",
              "$ref": "#/definitions/Period"
            },
            "dataAbsentReason": {
              "description": "Provides a reason why the expected value in the element Observation.value[x] is missing.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "interpretation": {
              "description": "The assessment made based on the result of the observation.  Intended as a simple compact code often placed adjacent to the result value in reports and flow sheets to signal the meaning/normalcy status of the result. Otherwise known as abnormal flag.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "referenceRange": {
              "description": "Guidance on how to interpret the value by comparison to a normal or recommended range.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Observation.ReferenceRange"
              }
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "OperationDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).",
          "properties": {
            "resourceType": {
              "description": "This is a OperationDefinition resource",
              "type": "string",
              "enum": [
                "OperationDefinition"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this operation definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this operation definition is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The identifier that is used to identify this version of the profile when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name identifying the operation.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the profile.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "kind": {
              "description": "Whether this is an operation or a named query.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "kind_": {
              "description": "Extensions for kind",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "This profile was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "The date this version of the operation definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the Operation Definition changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the operation definition.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationDefinition.Contact"
              }
            },
            "description": {
              "description": "A free text natural language description of the profile and its use.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of operation definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requirements": {
              "description": "Explains why this operation definition is needed and why it\u0027s been constrained as it has.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "idempotent": {
              "description": "Operations that are idempotent (see [HTTP specification definition of idempotent](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html)) may be invoked by performing an HTTP GET operation instead of a POST.",
              "type": "true | false"
            },
            "idempotent_": {
              "description": "Extensions for idempotent",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "The name used to invoke the operation.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "comment": {
              "description": "Additional information about how to use this operation or named query.",
              "type": "string"
            },
            "comment_": {
              "description": "Extensions for comment",
              "$ref": "#/definitions/Element"
            },
            "base": {
              "description": "Indicates that this operation definition is a constraining profile on the base.",
              "$ref": "#/definitions/Reference"
            },
            "system": {
              "description": "Indicates whether this operation or named query can be invoked at the system level (e.g. without needing to choose a resource type for the context).",
              "type": "true | false"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Indicates whether this operation or named query can be invoked at the resource type level for any given resource type level (e.g. without needing to choose a resource type for the context).",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "type_": {
              "description": "Extensions for type",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "instance": {
              "description": "Indicates whether this operation can be invoked on a particular instance of one of the given types.",
              "type": "true | false"
            },
            "instance_": {
              "description": "Extensions for instance",
              "$ref": "#/definitions/Element"
            },
            "parameter": {
              "description": "The parameters for the operation/query.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationDefinition.Parameter"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "OperationDefinition.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the operation definition.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "OperationDefinition.Parameter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).",
          "properties": {
            "name": {
              "description": "The name of used to identify the parameter.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "use": {
              "description": "Whether this is an input or an output parameter.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "use_": {
              "description": "Extensions for use",
              "$ref": "#/definitions/Element"
            },
            "min": {
              "description": "The minimum number of times this parameter SHALL appear in the request or response.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "min_": {
              "description": "Extensions for min",
              "$ref": "#/definitions/Element"
            },
            "max": {
              "description": "The maximum number of times this element is permitted to appear in the request or response.",
              "type": "string"
            },
            "max_": {
              "description": "Extensions for max",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "Describes the meaning or use of this parameter.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type for this parameter.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "searchType": {
              "description": "How the parameter is understood as a search parameter. This is only used if the parameter type is \u0027string\u0027.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "searchType_": {
              "description": "Extensions for searchType",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "A profile the specifies the rules that this parameter must conform to.",
              "$ref": "#/definitions/Reference"
            },
            "binding": {
              "description": "Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).",
              "$ref": "#/definitions/OperationDefinition.Binding"
            },
            "part": {
              "description": "The parts of a Tuple Parameter.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationDefinition.Parameter"
              }
            }
          }
        }
      ]
    },
    "OperationDefinition.Binding": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).",
          "properties": {
            "strength": {
              "description": "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "strength_": {
              "description": "Extensions for strength",
              "$ref": "#/definitions/Element"
            },
            "valueSetUri": {
              "description": "Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.",
              "type": "string"
            },
            "valueSetUri_": {
              "description": "Extensions for valueSetUri",
              "$ref": "#/definitions/Element"
            },
            "valueSetReference": {
              "description": "Points to the value set or external definition (e.g. implicit value set) that identifies the set of codes to be used.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "OperationOutcome": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A collection of error, warning or information messages that result from a system action.",
          "properties": {
            "resourceType": {
              "description": "This is a OperationOutcome resource",
              "type": "string",
              "enum": [
                "OperationOutcome"
              ]
            },
            "issue": {
              "description": "An error, warning or information message that results from a system action.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationOutcome.Issue"
              }
            }
          },
          "required": [
            "issue",
            "resourceType"
          ]
        }
      ]
    },
    "OperationOutcome.Issue": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A collection of error, warning or information messages that result from a system action.",
          "properties": {
            "severity": {
              "description": "Indicates whether the issue indicates a variation from successful processing.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "severity_": {
              "description": "Extensions for severity",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "details": {
              "description": "Additional details about the error. This may be a text description of the error, or a system code that identifies the error.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "diagnostics": {
              "description": "Additional diagnostic information about the issue.  Typically, this may be a description of how a value is erroneous, or a stack dump to help trace the issue.",
              "type": "string"
            },
            "diagnostics_": {
              "description": "Extensions for diagnostics",
              "$ref": "#/definitions/Element"
            },
            "location": {
              "description": "A simple XPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "location_": {
              "description": "Extensions for location",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "expression": {
              "description": "A simple FluentPath limited to element names, repetition indicators and the default child access that identifies one of the elements in the resource that caused this issue to be raised.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "expression_": {
              "description": "Extensions for expression",
              "items": {
                "$ref": "#/definitions/Element"
              }
            }
          }
        }
      ]
    },
    "Order": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A request to perform an action.",
          "properties": {
            "resourceType": {
              "description": "This is a Order resource",
              "type": "string",
              "enum": [
                "Order"
              ]
            },
            "identifier": {
              "description": "Identifiers assigned to this order by the orderer or by the receiver.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "date": {
              "description": "When the order was made.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "Patient this order is about.",
              "$ref": "#/definitions/Reference"
            },
            "source": {
              "description": "Who initiated the order.",
              "$ref": "#/definitions/Reference"
            },
            "target": {
              "description": "Who is intended to fulfill the order.",
              "$ref": "#/definitions/Reference"
            },
            "reasonCodeableConcept": {
              "description": "Text - why the order was made.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "reasonReference": {
              "description": "Text - why the order was made.",
              "$ref": "#/definitions/Reference"
            },
            "when": {
              "description": "When order should be fulfilled.",
              "$ref": "#/definitions/Order.When"
            },
            "detail": {
              "description": "What action is being ordered.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "detail",
            "resourceType"
          ]
        }
      ]
    },
    "Order.When": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A request to perform an action.",
          "properties": {
            "code": {
              "description": "Code specifies when request should be done. The code may simply be a priority code.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "schedule": {
              "description": "A formal schedule.",
              "$ref": "#/definitions/Timing"
            }
          }
        }
      ]
    },
    "OrderResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A response to an order.",
          "properties": {
            "resourceType": {
              "description": "This is a OrderResponse resource",
              "type": "string",
              "enum": [
                "OrderResponse"
              ]
            },
            "identifier": {
              "description": "Identifiers assigned to this order. The identifiers are usually assigned by the system responding to the order, but they may be provided or added to by other systems.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "request": {
              "description": "A reference to the order that this is in response to.",
              "$ref": "#/definitions/Reference"
            },
            "date": {
              "description": "The date and time at which this order response was made (created/posted).",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "who": {
              "description": "The person, organization, or device credited with making the response.",
              "$ref": "#/definitions/Reference"
            },
            "orderStatus": {
              "description": "What this response says about the status of the original order.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "orderStatus_": {
              "description": "Extensions for orderStatus",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Additional description about the response - e.g. a text description provided by a human user when making decisions about the order.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "fulfillment": {
              "description": "Links to resources that provide details of the outcome of performing the order; e.g. Diagnostic Reports in a response that is made to an order that referenced a diagnostic order.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "request",
            "resourceType"
          ]
        }
      ]
    },
    "OrderSet": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource allows for the definition of an order set as a sharable, consumable, and executable artifact in support of clinical decision support.",
          "properties": {
            "resourceType": {
              "description": "This is a OrderSet resource",
              "type": "string",
              "enum": [
                "OrderSet"
              ]
            },
            "moduleMetadata": {
              "description": "A reference to a ModuleMetadata resource containing metadata for the orderset.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "library": {
              "description": "A reference to a Library resource containing any formal logic used by the orderset.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "action": {
              "description": "The definition of the actions that make up the order set. Order set groups and sections are represented as actions which contain sub-actions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionDefinition"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Organization": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.",
          "properties": {
            "resourceType": {
              "description": "This is a Organization resource",
              "type": "string",
              "enum": [
                "Organization"
              ]
            },
            "identifier": {
              "description": "Identifier for the organization that is used to identify the organization across multiple disparate systems.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "active": {
              "description": "Whether the organization\u0027s record is still in active use.",
              "type": "true | false"
            },
            "active_": {
              "description": "Extensions for active",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The kind of organization that this is.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "name": {
              "description": "A name associated with the organization.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "A contact detail for the organization.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "address": {
              "description": "An address for the organization.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "partOf": {
              "description": "The organization of which this organization forms a part.",
              "$ref": "#/definitions/Reference"
            },
            "contact": {
              "description": "Contact for the organization for a certain purpose.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Organization.Contact"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Organization.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A formally or informally recognized grouping of people or organizations formed for the purpose of achieving some form of collective action.  Includes companies, institutions, corporations, departments, community groups, healthcare practice groups, etc.",
          "properties": {
            "purpose": {
              "description": "Indicates a purpose for which the contact can be reached.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "name": {
              "description": "A name associated with the contact.",
              "$ref": "#/definitions/HumanName"
            },
            "telecom": {
              "description": "A contact detail (e.g. a telephone number or an email address) by which the party may be contacted.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "address": {
              "description": "Visiting or postal addresses for the contact.",
              "$ref": "#/definitions/Address"
            }
          }
        }
      ]
    },
    "Parameters": {
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        },
        {
          "description": "This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.",
          "properties": {
            "parameter": {
              "description": "A parameter passed to or received from the operation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Parameters.Parameter"
              }
            }
          }
        }
      ]
    },
    "Parameters.Parameter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This special resource type is used to represent an operation request and response (operations.html). It has no other use, and there is no RESTful endpoint associated with it.",
          "properties": {
            "name": {
              "description": "The name of the parameter (reference to the operation definition).",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "valueBoolean": {
              "description": "If the parameter is a data type.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueInteger": {
              "description": "If the parameter is a data type.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "#/definitions/Element"
            },
            "valueDecimal": {
              "description": "If the parameter is a data type.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "valueDecimal_": {
              "description": "Extensions for valueDecimal",
              "$ref": "#/definitions/Element"
            },
            "valueBase64Binary": {
              "description": "If the parameter is a data type.",
              "type": "string"
            },
            "valueBase64Binary_": {
              "description": "Extensions for valueBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "valueInstant": {
              "description": "If the parameter is a data type.",
              "type": "string"
            },
            "valueInstant_": {
              "description": "Extensions for valueInstant",
              "$ref": "#/definitions/Element"
            },
            "valueString": {
              "description": "If the parameter is a data type.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueUri": {
              "description": "If the parameter is a data type.",
              "type": "string"
            },
            "valueUri_": {
              "description": "Extensions for valueUri",
              "$ref": "#/definitions/Element"
            },
            "valueDate": {
              "description": "If the parameter is a data type.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "valueDate_": {
              "description": "Extensions for valueDate",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "If the parameter is a data type.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            },
            "valueTime": {
              "description": "If the parameter is a data type.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "valueTime_": {
              "description": "Extensions for valueTime",
              "$ref": "#/definitions/Element"
            },
            "valueCode": {
              "description": "If the parameter is a data type.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "valueCode_": {
              "description": "Extensions for valueCode",
              "$ref": "#/definitions/Element"
            },
            "valueOid": {
              "description": "If the parameter is a data type.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "valueOid_": {
              "description": "Extensions for valueOid",
              "$ref": "#/definitions/Element"
            },
            "valueUuid": {
              "description": "If the parameter is a data type.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "valueUuid_": {
              "description": "Extensions for valueUuid",
              "$ref": "#/definitions/Element"
            },
            "valueId": {
              "description": "If the parameter is a data type.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "valueId_": {
              "description": "Extensions for valueId",
              "$ref": "#/definitions/Element"
            },
            "valueUnsignedInt": {
              "description": "If the parameter is a data type.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "valueUnsignedInt_": {
              "description": "Extensions for valueUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "valuePositiveInt": {
              "description": "If the parameter is a data type.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "valuePositiveInt_": {
              "description": "Extensions for valuePositiveInt",
              "$ref": "#/definitions/Element"
            },
            "valueMarkdown": {
              "description": "If the parameter is a data type.",
              "type": "string"
            },
            "valueMarkdown_": {
              "description": "Extensions for valueMarkdown",
              "$ref": "#/definitions/Element"
            },
            "valueElement": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Element"
            },
            "valueExtension": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Extension"
            },
            "valueBackboneElement": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/BackboneElement"
            },
            "valueNarrative": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Narrative"
            },
            "valueAnnotation": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Annotation"
            },
            "valueAttachment": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Attachment"
            },
            "valueIdentifier": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Identifier"
            },
            "valueCodeableConcept": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueCoding": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Coding"
            },
            "valueQuantity": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Quantity"
            },
            "valueDuration": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Duration"
            },
            "valueSimpleQuantity": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "valueDistance": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Distance"
            },
            "valueCount": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Count"
            },
            "valueMoney": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Money"
            },
            "valueAge": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Age"
            },
            "valueRange": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Range"
            },
            "valuePeriod": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Period"
            },
            "valueRatio": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Ratio"
            },
            "valueReference": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Reference"
            },
            "valueSampledData": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/SampledData"
            },
            "valueSignature": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Signature"
            },
            "valueHumanName": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/HumanName"
            },
            "valueAddress": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Address"
            },
            "valueContactPoint": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/ContactPoint"
            },
            "valueTiming": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Timing"
            },
            "valueMeta": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/Meta"
            },
            "valueElementDefinition": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/ElementDefinition"
            },
            "valueModuleMetadata": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "valueDataRequirement": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/DataRequirement"
            },
            "valueActionDefinition": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/ActionDefinition"
            },
            "valueParameterDefinition": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "valueTriggerDefinition": {
              "description": "If the parameter is a data type.",
              "$ref": "#/definitions/TriggerDefinition"
            },
            "resource": {
              "description": "If the parameter is a whole resource.",
              "$ref": "#/definitions/ResourceContainer"
            },
            "part": {
              "description": "A named part of a parameter. In many implementation context, a set of named parts is known as a \"Tuple\".",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Parameters.Parameter"
              }
            }
          }
        }
      ]
    },
    "Patient": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
          "properties": {
            "resourceType": {
              "description": "This is a Patient resource",
              "type": "string",
              "enum": [
                "Patient"
              ]
            },
            "identifier": {
              "description": "An identifier for this patient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "active": {
              "description": "Whether this patient record is in active use.",
              "type": "true | false"
            },
            "active_": {
              "description": "Extensions for active",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A name associated with the individual.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HumanName"
              }
            },
            "telecom": {
              "description": "A contact detail (e.g. a telephone number or an email address) by which the individual may be contacted.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "gender": {
              "description": "Administrative Gender - the gender that the patient is considered to have for administration and record keeping purposes.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "gender_": {
              "description": "Extensions for gender",
              "$ref": "#/definitions/Element"
            },
            "birthDate": {
              "description": "The date of birth for the individual.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "birthDate_": {
              "description": "Extensions for birthDate",
              "$ref": "#/definitions/Element"
            },
            "deceasedBoolean": {
              "description": "Indicates if the individual is deceased or not.",
              "type": "true | false"
            },
            "deceasedBoolean_": {
              "description": "Extensions for deceasedBoolean",
              "$ref": "#/definitions/Element"
            },
            "deceasedDateTime": {
              "description": "Indicates if the individual is deceased or not.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "deceasedDateTime_": {
              "description": "Extensions for deceasedDateTime",
              "$ref": "#/definitions/Element"
            },
            "address": {
              "description": "Addresses for the individual.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "maritalStatus": {
              "description": "This field contains a patient\u0027s most recent marital (civil) status.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "multipleBirthBoolean": {
              "description": "Indicates whether the patient is part of a multiple (bool) or indicates the actual birth order (integer).",
              "type": "true | false"
            },
            "multipleBirthBoolean_": {
              "description": "Extensions for multipleBirthBoolean",
              "$ref": "#/definitions/Element"
            },
            "multipleBirthInteger": {
              "description": "Indicates whether the patient is part of a multiple (bool) or indicates the actual birth order (integer).",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "multipleBirthInteger_": {
              "description": "Extensions for multipleBirthInteger",
              "$ref": "#/definitions/Element"
            },
            "photo": {
              "description": "Image of the patient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            },
            "contact": {
              "description": "A contact party (e.g. guardian, partner, friend) for the patient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Patient.Contact"
              }
            },
            "animal": {
              "description": "This patient is known to be an animal.",
              "$ref": "#/definitions/Patient.Animal"
            },
            "communication": {
              "description": "Languages which may be used to communicate with the patient about his or her health.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Patient.Communication"
              }
            },
            "careProvider": {
              "description": "Patient\u0027s nominated care provider.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "managingOrganization": {
              "description": "Organization that is the custodian of the patient record.",
              "$ref": "#/definitions/Reference"
            },
            "link": {
              "description": "Link to another patient resource that concerns the same actual patient.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Patient.Link"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Patient.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
          "properties": {
            "relationship": {
              "description": "The nature of the relationship between the patient and the contact person.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "name": {
              "description": "A name associated with the contact person.",
              "$ref": "#/definitions/HumanName"
            },
            "telecom": {
              "description": "A contact detail for the person, e.g. a telephone number or an email address.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "address": {
              "description": "Address for the contact person.",
              "$ref": "#/definitions/Address"
            },
            "gender": {
              "description": "Administrative Gender - the gender that the contact person is considered to have for administration and record keeping purposes.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "gender_": {
              "description": "Extensions for gender",
              "$ref": "#/definitions/Element"
            },
            "organization": {
              "description": "Organization on behalf of which the contact is acting or for which the contact is working.",
              "$ref": "#/definitions/Reference"
            },
            "period": {
              "description": "The period during which this contact person or organization is valid to be contacted relating to this patient.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "Patient.Animal": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
          "properties": {
            "species": {
              "description": "Identifies the high level taxonomic categorization of the kind of animal.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "breed": {
              "description": "Identifies the detailed categorization of the kind of animal.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "genderStatus": {
              "description": "Indicates the current state of the animal\u0027s reproductive organs.",
              "$ref": "#/definitions/CodeableConcept"
            }
          },
          "required": [
            "species"
          ]
        }
      ]
    },
    "Patient.Communication": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
          "properties": {
            "language": {
              "description": "The ISO-639-1 alpha 2 code in lower case for the language, optionally followed by a hyphen and the ISO-3166-1 alpha 2 code for the region in upper case; e.g. \"en\" for English, or \"en-US\" for American English versus \"en-EN\" for England English.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "preferred": {
              "description": "Indicates whether or not the patient prefers this language (over other languages he masters up a certain level).",
              "type": "true | false"
            },
            "preferred_": {
              "description": "Extensions for preferred",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "language"
          ]
        }
      ]
    },
    "Patient.Link": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Demographics and other administrative information about an individual or animal receiving care or other health-related services.",
          "properties": {
            "other": {
              "description": "The other patient resource that the link refers to.",
              "$ref": "#/definitions/Reference"
            },
            "type": {
              "description": "The type of link between this patient resource and another patient resource.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "other"
          ]
        }
      ]
    },
    "PaymentNotice": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides the status of the payment for goods and services rendered, and the request and response resource references.",
          "properties": {
            "resourceType": {
              "description": "This is a PaymentNotice resource",
              "type": "string",
              "enum": [
                "PaymentNotice"
              ]
            },
            "identifier": {
              "description": "The Response business identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "ruleset": {
              "description": "The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when this resource was created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "targetIdentifier": {
              "description": "The Insurer who is target  of the request.",
              "$ref": "#/definitions/Identifier"
            },
            "targetReference": {
              "description": "The Insurer who is target  of the request.",
              "$ref": "#/definitions/Reference"
            },
            "providerIdentifier": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "providerReference": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "organizationIdentifier": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "organizationReference": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "requestIdentifier": {
              "description": "Reference of resource to reverse.",
              "$ref": "#/definitions/Identifier"
            },
            "requestReference": {
              "description": "Reference of resource to reverse.",
              "$ref": "#/definitions/Reference"
            },
            "responseIdentifier": {
              "description": "Reference of response to resource to reverse.",
              "$ref": "#/definitions/Identifier"
            },
            "responseReference": {
              "description": "Reference of response to resource to reverse.",
              "$ref": "#/definitions/Reference"
            },
            "paymentStatus": {
              "description": "The payment status, typically paid: payment sent, cleared: payment received.",
              "$ref": "#/definitions/Coding"
            },
            "statusDate": {
              "description": "The date when the above payment action occurrred.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "statusDate_": {
              "description": "Extensions for statusDate",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "paymentStatus",
            "resourceType"
          ]
        }
      ]
    },
    "PaymentReconciliation": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides payment details and claim references supporting a bulk payment.",
          "properties": {
            "resourceType": {
              "description": "This is a PaymentReconciliation resource",
              "type": "string",
              "enum": [
                "PaymentReconciliation"
              ]
            },
            "identifier": {
              "description": "The Response business identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "requestIdentifier": {
              "description": "Original request resource reference.",
              "$ref": "#/definitions/Identifier"
            },
            "requestReference": {
              "description": "Original request resource reference.",
              "$ref": "#/definitions/Reference"
            },
            "outcome": {
              "description": "Transaction status: error, complete.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "outcome_": {
              "description": "Extensions for outcome",
              "$ref": "#/definitions/Element"
            },
            "disposition": {
              "description": "A description of the status of the adjudication.",
              "type": "string"
            },
            "disposition_": {
              "description": "Extensions for disposition",
              "$ref": "#/definitions/Element"
            },
            "ruleset": {
              "description": "The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when the enclosed suite of services were performed or completed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "The period of time for which payments have been gathered into this bulk payment for settlement.",
              "$ref": "#/definitions/Period"
            },
            "organizationIdentifier": {
              "description": "The Insurer who produced this adjudicated response.",
              "$ref": "#/definitions/Identifier"
            },
            "organizationReference": {
              "description": "The Insurer who produced this adjudicated response.",
              "$ref": "#/definitions/Reference"
            },
            "requestProviderIdentifier": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "requestProviderReference": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "requestOrganizationIdentifier": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "requestOrganizationReference": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "detail": {
              "description": "List of individual settlement amounts and the corresponding transaction.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentReconciliation.Detail"
              }
            },
            "form": {
              "description": "The form to be used for printing the content.",
              "$ref": "#/definitions/Coding"
            },
            "total": {
              "description": "Total payment amount.",
              "$ref": "#/definitions/Money"
            },
            "note": {
              "description": "Suite of notes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PaymentReconciliation.Note"
              }
            }
          },
          "required": [
            "total",
            "resourceType"
          ]
        }
      ]
    },
    "PaymentReconciliation.Detail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides payment details and claim references supporting a bulk payment.",
          "properties": {
            "type": {
              "description": "Code to indicate the nature of the payment, adjustment, funds advance, etc.",
              "$ref": "#/definitions/Coding"
            },
            "requestIdentifier": {
              "description": "The claim or financial resource.",
              "$ref": "#/definitions/Identifier"
            },
            "requestReference": {
              "description": "The claim or financial resource.",
              "$ref": "#/definitions/Reference"
            },
            "responceIdentifier": {
              "description": "The claim response resource.",
              "$ref": "#/definitions/Identifier"
            },
            "responceReference": {
              "description": "The claim response resource.",
              "$ref": "#/definitions/Reference"
            },
            "submitterIdentifier": {
              "description": "The Organization which submitted the invoice or financial transaction.",
              "$ref": "#/definitions/Identifier"
            },
            "submitterReference": {
              "description": "The Organization which submitted the invoice or financial transaction.",
              "$ref": "#/definitions/Reference"
            },
            "payeeIdentifier": {
              "description": "The organization which is receiving the payment.",
              "$ref": "#/definitions/Identifier"
            },
            "payeeReference": {
              "description": "The organization which is receiving the payment.",
              "$ref": "#/definitions/Reference"
            },
            "date": {
              "description": "The date of the invoice or financial resource.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "amount": {
              "description": "Amount paid for this detail.",
              "$ref": "#/definitions/Money"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "PaymentReconciliation.Note": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides payment details and claim references supporting a bulk payment.",
          "properties": {
            "type": {
              "description": "The note purpose: Print/Display.",
              "$ref": "#/definitions/Coding"
            },
            "text": {
              "description": "The note text.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Person": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Demographics and administrative information about a person independent of a specific health-related context.",
          "properties": {
            "resourceType": {
              "description": "This is a Person resource",
              "type": "string",
              "enum": [
                "Person"
              ]
            },
            "identifier": {
              "description": "Identifier for a person within a particular scope.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "name": {
              "description": "A name associated with the person.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HumanName"
              }
            },
            "telecom": {
              "description": "A contact detail for the person, e.g. a telephone number or an email address.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "gender": {
              "description": "Administrative Gender.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "gender_": {
              "description": "Extensions for gender",
              "$ref": "#/definitions/Element"
            },
            "birthDate": {
              "description": "The birth date for the person.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "birthDate_": {
              "description": "Extensions for birthDate",
              "$ref": "#/definitions/Element"
            },
            "address": {
              "description": "One or more addresses for the person.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "photo": {
              "description": "An image that can be displayed as a thumbnail of the person to enhance the identification of the individual.",
              "$ref": "#/definitions/Attachment"
            },
            "managingOrganization": {
              "description": "The organization that is the custodian of the person record.",
              "$ref": "#/definitions/Reference"
            },
            "active": {
              "description": "Whether this person\u0027s record is in active use.",
              "type": "true | false"
            },
            "active_": {
              "description": "Extensions for active",
              "$ref": "#/definitions/Element"
            },
            "link": {
              "description": "Link to a resource that concerns the same actual person.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person.Link"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Person.Link": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Demographics and administrative information about a person independent of a specific health-related context.",
          "properties": {
            "target": {
              "description": "The resource to which this actual person is associated.",
              "$ref": "#/definitions/Reference"
            },
            "assurance": {
              "description": "Level of assurance that this link is actually associated with the target resource.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "assurance_": {
              "description": "Extensions for assurance",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "target"
          ]
        }
      ]
    },
    "Practitioner": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A person who is directly or indirectly involved in the provisioning of healthcare.",
          "properties": {
            "resourceType": {
              "description": "This is a Practitioner resource",
              "type": "string",
              "enum": [
                "Practitioner"
              ]
            },
            "identifier": {
              "description": "An identifier that applies to this person in this role.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "active": {
              "description": "Whether this practitioner\u0027s record is in active use.",
              "type": "true | false"
            },
            "active_": {
              "description": "Extensions for active",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "The name(s) associated with the practitioner.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HumanName"
              }
            },
            "telecom": {
              "description": "A contact detail for the practitioner, e.g. a telephone number or an email address.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "address": {
              "description": "Address(es) of the practitioner that are not role specific (typically home address). \nWork addresses are not typically entered in this property as they are usually role dependent.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "gender": {
              "description": "Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "gender_": {
              "description": "Extensions for gender",
              "$ref": "#/definitions/Element"
            },
            "birthDate": {
              "description": "The date of birth for the practitioner.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "birthDate_": {
              "description": "Extensions for birthDate",
              "$ref": "#/definitions/Element"
            },
            "photo": {
              "description": "Image of the person.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            },
            "practitionerRole": {
              "description": "The list of roles/organizations that the practitioner is associated with.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Practitioner.PractitionerRole"
              }
            },
            "qualification": {
              "description": "Qualifications obtained by training and certification.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Practitioner.Qualification"
              }
            },
            "communication": {
              "description": "A language the practitioner is able to use in patient communication.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Practitioner.PractitionerRole": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A person who is directly or indirectly involved in the provisioning of healthcare.",
          "properties": {
            "organization": {
              "description": "The organization where the Practitioner performs the roles associated.",
              "$ref": "#/definitions/Reference"
            },
            "role": {
              "description": "Roles which this practitioner is authorized to perform for the organization.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "specialty": {
              "description": "Specific specialty of the practitioner.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "identifier": {
              "description": "Business Identifiers that are specific to a role/location.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "telecom": {
              "description": "Contact details that are specific to the role/location/service.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "period": {
              "description": "The period during which the person is authorized to act as a practitioner in these role(s) for the organization.",
              "$ref": "#/definitions/Period"
            },
            "location": {
              "description": "The location(s) at which this practitioner provides care.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "healthcareService": {
              "description": "The list of healthcare services that this worker provides for this role\u0027s Organization/Location(s).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "Practitioner.Qualification": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A person who is directly or indirectly involved in the provisioning of healthcare.",
          "properties": {
            "identifier": {
              "description": "An identifier that applies to this person\u0027s qualification in this role.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "code": {
              "description": "Coded representation of the qualification.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "period": {
              "description": "Period during which the qualification is valid.",
              "$ref": "#/definitions/Period"
            },
            "issuer": {
              "description": "Organization that regulates and issues the qualification.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "PractitionerRole": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.",
          "properties": {
            "resourceType": {
              "description": "This is a PractitionerRole resource",
              "type": "string",
              "enum": [
                "PractitionerRole"
              ]
            },
            "identifier": {
              "description": "Business Identifiers that are specific to a role/location.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "active": {
              "description": "Whether this practitioner\u0027s record is in active use.",
              "type": "true | false"
            },
            "active_": {
              "description": "Extensions for active",
              "$ref": "#/definitions/Element"
            },
            "practitioner": {
              "description": "Practitioner that is able to provide the defined services for the organation.",
              "$ref": "#/definitions/Reference"
            },
            "organization": {
              "description": "The organization where the Practitioner performs the roles associated.",
              "$ref": "#/definitions/Reference"
            },
            "role": {
              "description": "Roles which this practitioner is authorized to perform for the organization.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "specialty": {
              "description": "Specific specialty of the practitioner.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "location": {
              "description": "The location(s) at which this practitioner provides care.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "healthcareService": {
              "description": "The list of healthcare services that this worker provides for this role\u0027s Organization/Location(s).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "telecom": {
              "description": "Contact details that are specific to the role/location/service.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "period": {
              "description": "The period during which the person is authorized to act as a practitioner in these role(s) for the organization.",
              "$ref": "#/definitions/Period"
            },
            "availableTime": {
              "description": "A collection of times that the Service Site is available.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PractitionerRole.AvailableTime"
              }
            },
            "notAvailable": {
              "description": "The HealthcareService is not available during this period of time due to the provided reason.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PractitionerRole.NotAvailable"
              }
            },
            "availabilityExceptions": {
              "description": "A description of site availability exceptions, e.g. public holiday availability. Succinctly describing all possible exceptions to normal site availability as details in the available Times and not available Times.",
              "type": "string"
            },
            "availabilityExceptions_": {
              "description": "Extensions for availabilityExceptions",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "PractitionerRole.AvailableTime": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.",
          "properties": {
            "daysOfWeek": {
              "description": "Indicates which days of the week are available between the start and end Times.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "daysOfWeek_": {
              "description": "Extensions for daysOfWeek",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "allDay": {
              "description": "Is this always available? (hence times are irrelevant) e.g. 24 hour service.",
              "type": "true | false"
            },
            "allDay_": {
              "description": "Extensions for allDay",
              "$ref": "#/definitions/Element"
            },
            "availableStartTime": {
              "description": "The opening time of day. Note: If the AllDay flag is set, then this time is ignored.",
              "type": "string",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"
            },
            "availableStartTime_": {
              "description": "Extensions for availableStartTime",
              "$ref": "#/definitions/Element"
            },
            "availableEndTime": {
              "description": "The closing time of day. Note: If the AllDay flag is set, then this time is ignored.",
              "type": "string",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?"
            },
            "availableEndTime_": {
              "description": "Extensions for availableEndTime",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "PractitionerRole.NotAvailable": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.",
          "properties": {
            "description": {
              "description": "The reason that can be presented to the user as to why this time is not available.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "during": {
              "description": "Service is not available (seasonally or for a public holiday) from this date.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "Procedure": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.",
          "properties": {
            "resourceType": {
              "description": "This is a Procedure resource",
              "type": "string",
              "enum": [
                "Procedure"
              ]
            },
            "identifier": {
              "description": "This records identifiers associated with this procedure that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "subject": {
              "description": "The person, animal or group on which the procedure was performed.",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "A code specifying the state of the procedure. Generally this will be in-progress or completed state.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "category": {
              "description": "A code that classifies the procedure for searching, sorting and display purposes (e.g. \"Surgical Procedure\").",
              "$ref": "#/definitions/CodeableConcept"
            },
            "code": {
              "description": "The specific procedure that is performed. Use text if the exact nature of the procedure cannot be coded (e.g. \"Laparoscopic Appendectomy\").",
              "$ref": "#/definitions/CodeableConcept"
            },
            "notPerformed": {
              "description": "Set this to true if the record is saying that the procedure was NOT performed.",
              "type": "true | false"
            },
            "notPerformed_": {
              "description": "Extensions for notPerformed",
              "$ref": "#/definitions/Element"
            },
            "reasonNotPerformed": {
              "description": "A code indicating why the procedure was not performed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "bodySite": {
              "description": "Detailed and structured anatomical location information. Multiple locations are allowed - e.g. multiple punch biopsies of a lesion.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reasonCodeableConcept": {
              "description": "The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "reasonReference": {
              "description": "The reason why the procedure was performed. This may be due to a Condition, may be coded entity of some type, or may simply be present as text.",
              "$ref": "#/definitions/Reference"
            },
            "performer": {
              "description": "Limited to \u0027real\u0027 people rather than equipment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Procedure.Performer"
              }
            },
            "performedDateTime": {
              "description": "The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "performedDateTime_": {
              "description": "Extensions for performedDateTime",
              "$ref": "#/definitions/Element"
            },
            "performedPeriod": {
              "description": "The date(time)/period over which the procedure was performed. Allows a period to support complex procedures that span more than one date, and also allows for the length of the procedure to be captured.",
              "$ref": "#/definitions/Period"
            },
            "encounter": {
              "description": "The encounter during which the procedure was performed.",
              "$ref": "#/definitions/Reference"
            },
            "location": {
              "description": "The location where the procedure actually happened.  E.g. a newborn at home, a tracheostomy at a restaurant.",
              "$ref": "#/definitions/Reference"
            },
            "outcome": {
              "description": "The outcome of the procedure - did it resolve reasons for the procedure being performed?",
              "$ref": "#/definitions/CodeableConcept"
            },
            "report": {
              "description": "This could be a histology result, pathology report, surgical report, etc..",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "complication": {
              "description": "Any complications that occurred during the procedure, or in the immediate post-performance period. These are generally tracked separately from the notes, which will typically describe the procedure itself rather than any \u0027post procedure\u0027 issues.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "followUp": {
              "description": "If the procedure required specific follow up - e.g. removal of sutures. The followup may be represented as a simple note, or could potentially be more complex in which case the CarePlan resource can be used.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "request": {
              "description": "A reference to a resource that contains details of the request for this procedure.",
              "$ref": "#/definitions/Reference"
            },
            "notes": {
              "description": "Any other notes about the procedure.  E.g. the operative notes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "focalDevice": {
              "description": "A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Procedure.FocalDevice"
              }
            },
            "used": {
              "description": "Identifies medications, devices and any other substance used as part of the procedure.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "code",
            "subject",
            "resourceType"
          ]
        }
      ]
    },
    "Procedure.Performer": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.",
          "properties": {
            "actor": {
              "description": "The practitioner who was involved in the procedure.",
              "$ref": "#/definitions/Reference"
            },
            "role": {
              "description": "For example: surgeon, anaethetist, endoscopist.",
              "$ref": "#/definitions/CodeableConcept"
            }
          }
        }
      ]
    },
    "Procedure.FocalDevice": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An action that is or was performed on a patient. This can be a physical intervention like an operation, or less invasive like counseling or hypnotherapy.",
          "properties": {
            "action": {
              "description": "The kind of change that happened to the device during the procedure.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "manipulated": {
              "description": "The device that was manipulated (changed) during the procedure.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "manipulated"
          ]
        }
      ]
    },
    "ProcedureRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A request for a procedure to be performed. May be a proposal or an order.",
          "properties": {
            "resourceType": {
              "description": "This is a ProcedureRequest resource",
              "type": "string",
              "enum": [
                "ProcedureRequest"
              ]
            },
            "identifier": {
              "description": "Identifiers assigned to this order by the order or by the receiver.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "subject": {
              "description": "The person, animal or group that should receive the procedure.",
              "$ref": "#/definitions/Reference"
            },
            "code": {
              "description": "The specific procedure that is ordered. Use text if the exact nature of the procedure cannot be coded.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "bodySite": {
              "description": "Indicates the sites on the subject\u0027s body where the procedure should be performed (I.e. the target sites).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reasonCodeableConcept": {
              "description": "The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "reasonReference": {
              "description": "The reason why the procedure is being proposed or ordered. This procedure request may be motivated by a Condition for instance.",
              "$ref": "#/definitions/Reference"
            },
            "scheduledDateTime": {
              "description": "The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "scheduledDateTime_": {
              "description": "Extensions for scheduledDateTime",
              "$ref": "#/definitions/Element"
            },
            "scheduledPeriod": {
              "description": "The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".",
              "$ref": "#/definitions/Period"
            },
            "scheduledTiming": {
              "description": "The timing schedule for the proposed or ordered procedure. The Schedule data type allows many different expressions.  E.g. \"Every 8 hours\"; \"Three times a day\"; \"1/2 an hour before breakfast for 10 days from 23-Dec 2011:\"; \"15 Oct 2013, 17 Oct 2013 and 1 Nov 2013\".",
              "$ref": "#/definitions/Timing"
            },
            "encounter": {
              "description": "The encounter within which the procedure proposal or request was created.",
              "$ref": "#/definitions/Reference"
            },
            "performer": {
              "description": "For example, the surgeon, anaethetist, endoscopist, etc.",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "The status of the order.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "notes": {
              "description": "Any other notes associated with this proposal or order - e.g. provider instructions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "asNeededBoolean": {
              "description": "If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.",
              "type": "true | false"
            },
            "asNeededBoolean_": {
              "description": "Extensions for asNeededBoolean",
              "$ref": "#/definitions/Element"
            },
            "asNeededCodeableConcept": {
              "description": "If a CodeableConcept is present, it indicates the pre-condition for performing the procedure.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "orderedOn": {
              "description": "The time when the request was made.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "orderedOn_": {
              "description": "Extensions for orderedOn",
              "$ref": "#/definitions/Element"
            },
            "orderer": {
              "description": "The healthcare professional responsible for proposing or ordering the procedure.",
              "$ref": "#/definitions/Reference"
            },
            "priority": {
              "description": "The clinical priority associated with this order.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "priority_": {
              "description": "Extensions for priority",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "code",
            "subject",
            "resourceType"
          ]
        }
      ]
    },
    "ProcessRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.",
          "properties": {
            "resourceType": {
              "description": "This is a ProcessRequest resource",
              "type": "string",
              "enum": [
                "ProcessRequest"
              ]
            },
            "action": {
              "description": "The type of processing action being requested, for example Reversal, Readjudication, StatusRequest,PendedRequest.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "action_": {
              "description": "Extensions for action",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "The ProcessRequest business identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "ruleset": {
              "description": "The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when this resource was created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "targetIdentifier": {
              "description": "The organization which is the target of the request.",
              "$ref": "#/definitions/Identifier"
            },
            "targetReference": {
              "description": "The organization which is the target of the request.",
              "$ref": "#/definitions/Reference"
            },
            "providerIdentifier": {
              "description": "The practitioner who is responsible for the action specified in thise request.",
              "$ref": "#/definitions/Identifier"
            },
            "providerReference": {
              "description": "The practitioner who is responsible for the action specified in thise request.",
              "$ref": "#/definitions/Reference"
            },
            "organizationIdentifier": {
              "description": "The organization which is responsible for the action speccified in thise request.",
              "$ref": "#/definitions/Identifier"
            },
            "organizationReference": {
              "description": "The organization which is responsible for the action speccified in thise request.",
              "$ref": "#/definitions/Reference"
            },
            "requestIdentifier": {
              "description": "Reference of resource which is the target or subject of this action.",
              "$ref": "#/definitions/Identifier"
            },
            "requestReference": {
              "description": "Reference of resource which is the target or subject of this action.",
              "$ref": "#/definitions/Reference"
            },
            "responseIdentifier": {
              "description": "Reference of a prior response to resource which is the target or subject of this action.",
              "$ref": "#/definitions/Identifier"
            },
            "responseReference": {
              "description": "Reference of a prior response to resource which is the target or subject of this action.",
              "$ref": "#/definitions/Reference"
            },
            "nullify": {
              "description": "If true remove all history excluding audit.",
              "type": "true | false"
            },
            "nullify_": {
              "description": "Extensions for nullify",
              "$ref": "#/definitions/Element"
            },
            "reference": {
              "description": "A reference to supply which authenticates the process.",
              "type": "string"
            },
            "reference_": {
              "description": "Extensions for reference",
              "$ref": "#/definitions/Element"
            },
            "item": {
              "description": "List of top level items to be re-adjudicated, if none specified then the entire submission is re-adjudicated.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProcessRequest.Item"
              }
            },
            "include": {
              "description": "Names of resource types to include.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "include_": {
              "description": "Extensions for include",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "exclude": {
              "description": "Names of resource types to exclude.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "exclude_": {
              "description": "Extensions for exclude",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "period": {
              "description": "A period of time during which the fulfilling resources would have been created.",
              "$ref": "#/definitions/Period"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "ProcessRequest.Item": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides the target, request and response, and action details for an action to be performed by the target on or about existing resources.",
          "properties": {
            "sequenceLinkId": {
              "description": "A service line number.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "sequenceLinkId_": {
              "description": "Extensions for sequenceLinkId",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ProcessResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "This resource provides processing status, errors and notes from the processing of a resource.",
          "properties": {
            "resourceType": {
              "description": "This is a ProcessResponse resource",
              "type": "string",
              "enum": [
                "ProcessResponse"
              ]
            },
            "identifier": {
              "description": "The Response business identifier.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "requestIdentifier": {
              "description": "Original request resource reference.",
              "$ref": "#/definitions/Identifier"
            },
            "requestReference": {
              "description": "Original request resource reference.",
              "$ref": "#/definitions/Reference"
            },
            "outcome": {
              "description": "Transaction status: error, complete, held.",
              "$ref": "#/definitions/Coding"
            },
            "disposition": {
              "description": "A description of the status of the adjudication or processing.",
              "type": "string"
            },
            "disposition_": {
              "description": "Extensions for disposition",
              "$ref": "#/definitions/Element"
            },
            "ruleset": {
              "description": "The version of the style of resource contents. This should be mapped to the allowable profiles for this and supporting resources.",
              "$ref": "#/definitions/Coding"
            },
            "originalRuleset": {
              "description": "The style (standard) and version of the original material which was converted into this resource.",
              "$ref": "#/definitions/Coding"
            },
            "created": {
              "description": "The date when the enclosed suite of services were performed or completed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "organizationIdentifier": {
              "description": "The organization who produced this adjudicated response.",
              "$ref": "#/definitions/Identifier"
            },
            "organizationReference": {
              "description": "The organization who produced this adjudicated response.",
              "$ref": "#/definitions/Reference"
            },
            "requestProviderIdentifier": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "requestProviderReference": {
              "description": "The practitioner who is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "requestOrganizationIdentifier": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Identifier"
            },
            "requestOrganizationReference": {
              "description": "The organization which is responsible for the services rendered to the patient.",
              "$ref": "#/definitions/Reference"
            },
            "form": {
              "description": "The form to be used for printing the content.",
              "$ref": "#/definitions/Coding"
            },
            "notes": {
              "description": "Suite of processing note or additional requirements is the processing has been held.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProcessResponse.Notes"
              }
            },
            "error": {
              "description": "Processing errors.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "ProcessResponse.Notes": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "This resource provides processing status, errors and notes from the processing of a resource.",
          "properties": {
            "type": {
              "description": "The note purpose: Print/Display.",
              "$ref": "#/definitions/Coding"
            },
            "text": {
              "description": "The note text.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Protocol": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A definition of behaviors to be taken in particular circumstances, often including conditions, options and other decision points.",
          "properties": {
            "resourceType": {
              "description": "This is a Protocol resource",
              "type": "string",
              "enum": [
                "Protocol"
              ]
            },
            "identifier": {
              "description": "A unique identifier for the protocol instance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "title": {
              "description": "Name of protocol.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the protocol.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "A code that classifies the general type of context to which these behavior definitions apply.  This is used for searching, sorting and display purposes.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "What does protocol deal with?",
              "$ref": "#/definitions/Reference"
            },
            "group": {
              "description": "To whom does Protocol apply?",
              "$ref": "#/definitions/Reference"
            },
            "purpose": {
              "description": "When is protocol to be used?",
              "type": "string"
            },
            "purpose_": {
              "description": "Extensions for purpose",
              "$ref": "#/definitions/Element"
            },
            "author": {
              "description": "Who wrote protocol?",
              "$ref": "#/definitions/Reference"
            },
            "step": {
              "description": "What\u0027s done as part of protocol.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol.Step"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Protocol.Step": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of behaviors to be taken in particular circumstances, often including conditions, options and other decision points.",
          "properties": {
            "name": {
              "description": "Label for step.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Human description of activity.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "duration": {
              "description": "How long does step last?",
              "$ref": "#/definitions/Duration"
            },
            "precondition": {
              "description": "Rules prior to execution.",
              "$ref": "#/definitions/Protocol.Precondition"
            },
            "exit": {
              "description": "Indicates the conditions that must be met for activities that are part of this time point to terminate.",
              "$ref": "#/definitions/Protocol.Precondition"
            },
            "firstActivity": {
              "description": "First activity within timepoint.",
              "type": "string"
            },
            "firstActivity_": {
              "description": "Extensions for firstActivity",
              "$ref": "#/definitions/Element"
            },
            "activity": {
              "description": "Activities that occur within timepoint.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol.Activity"
              }
            },
            "next": {
              "description": "What happens next?",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol.Next"
              }
            }
          }
        }
      ]
    },
    "Protocol.Precondition": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of behaviors to be taken in particular circumstances, often including conditions, options and other decision points.",
          "properties": {
            "description": {
              "description": "Human-readable description of the condition.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "condition": {
              "description": "Defines the name/value pair that must hold for the condition to be met.",
              "$ref": "#/definitions/Protocol.Condition"
            },
            "intersection": {
              "description": "Lists a set of conditions that must all be met.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol.Precondition"
              }
            },
            "union": {
              "description": "Lists alternative conditions, at least one of must be met.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol.Precondition"
              }
            },
            "exclude": {
              "description": "Lists conditions of which none must be met.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol.Precondition"
              }
            }
          }
        }
      ]
    },
    "Protocol.Condition": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of behaviors to be taken in particular circumstances, often including conditions, options and other decision points.",
          "properties": {
            "type": {
              "description": "The type of observation, test or other assertion being evaluated by the condition.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueCodeableConcept": {
              "description": "Indicates what value the observation/test/assertion must have in order for the condition to be considered to be satisfied.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueBoolean": {
              "description": "Indicates what value the observation/test/assertion must have in order for the condition to be considered to be satisfied.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueSimpleQuantity": {
              "description": "Indicates what value the observation/test/assertion must have in order for the condition to be considered to be satisfied.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "valueRange": {
              "description": "Indicates what value the observation/test/assertion must have in order for the condition to be considered to be satisfied.",
              "$ref": "#/definitions/Range"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "Protocol.Activity": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of behaviors to be taken in particular circumstances, often including conditions, options and other decision points.",
          "properties": {
            "alternative": {
              "description": "What can be done instead?",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "alternative_": {
              "description": "Extensions for alternative",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "component": {
              "description": "Activities that are part of this activity.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Protocol.Component"
              }
            },
            "following": {
              "description": "What happens next.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "following_": {
              "description": "Extensions for following",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "wait": {
              "description": "Indicates the length of time to wait between the conditions being satisfied for the activity to start and the actual start of the activity.",
              "$ref": "#/definitions/Duration"
            },
            "detail": {
              "description": "Information about the nature of the activity, including type, timing and other qualifiers.",
              "$ref": "#/definitions/Protocol.Detail"
            }
          },
          "required": [
            "detail"
          ]
        }
      ]
    },
    "Protocol.Component": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of behaviors to be taken in particular circumstances, often including conditions, options and other decision points.",
          "properties": {
            "sequence": {
              "description": "Order of occurrence.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "sequence_": {
              "description": "Extensions for sequence",
              "$ref": "#/definitions/Element"
            },
            "activity": {
              "description": "Component activity.",
              "type": "string"
            },
            "activity_": {
              "description": "Extensions for activity",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Protocol.Detail": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of behaviors to be taken in particular circumstances, often including conditions, options and other decision points.",
          "properties": {
            "category": {
              "description": "High-level categorization of the type of activity.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "category_": {
              "description": "Extensions for category",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "Detailed description of the type of activity; e.g. What lab test, what procedure, what kind of encounter.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "timingCodeableConcept": {
              "description": "The period, timing or frequency upon which the described activity is to occur.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "timingTiming": {
              "description": "The period, timing or frequency upon which the described activity is to occur.",
              "$ref": "#/definitions/Timing"
            },
            "location": {
              "description": "Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.",
              "$ref": "#/definitions/Reference"
            },
            "performer": {
              "description": "Identifies who\u0027s expected to be involved in the activity.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "productReference": {
              "description": "Identifies the food, drug or other product being consumed or supplied in the activity.",
              "$ref": "#/definitions/Reference"
            },
            "productCodeableConcept": {
              "description": "Identifies the food, drug or other product being consumed or supplied in the activity.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "quantity": {
              "description": "Identifies the quantity expected to be consumed at once (per dose, per meal, etc.).",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "description": {
              "description": "This provides a textual description of constraints on the activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Protocol.Next": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of behaviors to be taken in particular circumstances, often including conditions, options and other decision points.",
          "properties": {
            "description": {
              "description": "Description of what happens next.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "reference": {
              "description": "Id of following step.",
              "type": "string"
            },
            "reference_": {
              "description": "Extensions for reference",
              "$ref": "#/definitions/Element"
            },
            "condition": {
              "description": "Condition in which next step is executed.",
              "$ref": "#/definitions/Protocol.Precondition"
            }
          }
        }
      ]
    },
    "Provenance": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.",
          "properties": {
            "resourceType": {
              "description": "This is a Provenance resource",
              "type": "string",
              "enum": [
                "Provenance"
              ]
            },
            "target": {
              "description": "The Reference(s) that were generated or updated by  the activity described in this resource. A provenance can point to more than one target if multiple resources were created/updated by the same activity.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "period": {
              "description": "The period during which the activity occurred.",
              "$ref": "#/definitions/Period"
            },
            "recorded": {
              "description": "The instant of time at which the activity was recorded.",
              "type": "string"
            },
            "recorded_": {
              "description": "Extensions for recorded",
              "$ref": "#/definitions/Element"
            },
            "reason": {
              "description": "The reason that the activity was taking place.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "activity": {
              "description": "An activity is something that occurs over a period of time and acts upon or with entities; it may include consuming, processing, transforming, modifying, relocating, using, or generating entities.",
              "$ref": "#/definitions/Coding"
            },
            "location": {
              "description": "Where the activity occurred, if relevant.",
              "$ref": "#/definitions/Reference"
            },
            "policy": {
              "description": "Policy or plan the activity was defined by. Typically, a single activity may have multiple applicable policy documents, such as patient consent, guarantor funding, etc.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "policy_": {
              "description": "Extensions for policy",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "agent": {
              "description": "An actor taking a role in an activity  for which it can be assigned some degree of responsibility for the activity taking place.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Provenance.Agent"
              }
            },
            "entity": {
              "description": "An entity used in this activity.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Provenance.Entity"
              }
            },
            "signature": {
              "description": "A digital signature on the target Reference(s). The signer should match a Provenance.agent. The purpose of the signature is indicated.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Signature"
              }
            }
          },
          "required": [
            "agent",
            "resourceType",
            "target"
          ]
        }
      ]
    },
    "Provenance.Agent": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.",
          "properties": {
            "role": {
              "description": "The function of the agent with respect to the activity.",
              "$ref": "#/definitions/Coding"
            },
            "actor": {
              "description": "The individual, device or organization that participated in the event.",
              "$ref": "#/definitions/Reference"
            },
            "userId": {
              "description": "The identity of the agent as known by the authorization system.",
              "$ref": "#/definitions/Identifier"
            },
            "relatedAgent": {
              "description": "A relationship between two the agents referenced in this resource. This is defined to allow for explicit description of the delegation between agents.  For example, this human author used this device, or one person acted on another\u0027s behest.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Provenance.RelatedAgent"
              }
            }
          },
          "required": [
            "role"
          ]
        }
      ]
    },
    "Provenance.RelatedAgent": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.",
          "properties": {
            "type": {
              "description": "The type of relationship between agents.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "target": {
              "description": "An internal reference to another agent listed in this provenance by its identifier.",
              "type": "string"
            },
            "target_": {
              "description": "Extensions for target",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "Provenance.Entity": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Provenance of a resource is a record that describes entities and processes involved in producing and delivering or otherwise influencing that resource. Provenance provides a critical foundation for assessing authenticity, enabling trust, and allowing reproducibility. Provenance assertions are a form of contextual metadata and can themselves become important records with their own provenance. Provenance statement indicates clinical significance in terms of confidence in authenticity, reliability, and trustworthiness, integrity, and stage in lifecycle (e.g. Document Completion - has the artifact been legally authenticated), all of which may impact security, privacy, and trust policies.",
          "properties": {
            "role": {
              "description": "How the entity was used during the activity.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "role_": {
              "description": "Extensions for role",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of the entity. If the entity is a resource, then this is a resource type.",
              "$ref": "#/definitions/Coding"
            },
            "reference": {
              "description": "Identity of the  Entity used. May be a logical or physical uri and maybe absolute or relative.",
              "type": "string"
            },
            "reference_": {
              "description": "Extensions for reference",
              "$ref": "#/definitions/Element"
            },
            "display": {
              "description": "Human-readable description of the entity.",
              "type": "string"
            },
            "display_": {
              "description": "Extensions for display",
              "$ref": "#/definitions/Element"
            },
            "agent": {
              "description": "The entity is attributed to an agent to express the agent\u0027s responsibility for that entity, possibly along with other agents. This description can be understood as shorthand for saying that the agent was responsible for the activity which generated the entity.",
              "$ref": "#/definitions/Provenance.Agent"
            }
          },
          "required": [
            "type"
          ]
        }
      ]
    },
    "Questionnaire": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.",
          "properties": {
            "resourceType": {
              "description": "This is a Questionnaire resource",
              "type": "string",
              "enum": [
                "Questionnaire"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this questionnaire when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this questionnaire is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "This records identifiers associated with this question set that are defined by business processes and/or used to refer to it when a direct URL reference to the resource itself is not appropriate (e.g. in CDA documents, or in written / printed documentation).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "version": {
              "description": "The version number assigned by the publisher for business reasons.  It may remain the same when the resource is updated.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The lifecycle status of the questionnaire as a whole.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "The date that this questionnaire was last changed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "Organization or person responsible for developing and maintaining the questionnaire.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "useContext": {
              "description": "A code that identifies the questionnaire as falling into a particular group of like questionnaires; e.g. \"Pediatric\", \"Admissions\", \"Research\", \"Demographic\", \"Opinion Survey\", etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "title": {
              "description": "The name or label associated with this questionnaire.",
              "type": "string"
            },
            "title_": {
              "description": "Extensions for title",
              "$ref": "#/definitions/Element"
            },
            "concept": {
              "description": "Identifies a how this question or group of questions is known in a particular terminology such as LOINC.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "subjectType": {
              "description": "Identifies the types of subjects that can be the subject of the questionnaire.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "subjectType_": {
              "description": "Extensions for subjectType",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "item": {
              "description": "The questions and groupings of questions that make up the questionnaire.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Questionnaire.Item"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Questionnaire.Item": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.",
          "properties": {
            "linkId": {
              "description": "An identifier that is unique within the Questionnaire allowing linkage to the equivalent item in a QuestionnaireResponse resource.",
              "type": "string"
            },
            "linkId_": {
              "description": "Extensions for linkId",
              "$ref": "#/definitions/Element"
            },
            "concept": {
              "description": "Identifies a how this group of questions is known in a particular terminology such as LOINC.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "prefix": {
              "description": "A short label for a particular group, question or set of display text within the questionnaire.",
              "type": "string"
            },
            "prefix_": {
              "description": "Extensions for prefix",
              "$ref": "#/definitions/Element"
            },
            "text": {
              "description": "The name of a section, the text of a question or text content for a text item.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Identifies the type of questionnaire item this is - whether text for display, a grouping of other items or a particular type of data to be captured (string, integer, coded choice, etc.).",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "enableWhen": {
              "description": "If present, indicates that this item should only be enabled (displayed/allow answers to be captured) when the specified condition is true.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Questionnaire.EnableWhen"
              }
            },
            "required": {
              "description": "If true, indicates that the item must be present in a \"completed\" QuestionnaireResponse.  If false, the item may be skipped when answering the questionnaire.",
              "type": "true | false"
            },
            "required_": {
              "description": "Extensions for required",
              "$ref": "#/definitions/Element"
            },
            "repeats": {
              "description": "Whether the item may occur multiple times in the instance, containing multiple sets of answers.",
              "type": "true | false"
            },
            "repeats_": {
              "description": "Extensions for repeats",
              "$ref": "#/definitions/Element"
            },
            "readOnly": {
              "description": "If true, the value cannot be changed by a human respondent to the Questionnaire.",
              "type": "true | false"
            },
            "readOnly_": {
              "description": "Extensions for readOnly",
              "$ref": "#/definitions/Element"
            },
            "maxLength": {
              "description": "The maximum number of characters that are permitted in the answer to be considered a \"valid\" QuestionnaireResponse.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "maxLength_": {
              "description": "Extensions for maxLength",
              "$ref": "#/definitions/Element"
            },
            "options": {
              "description": "Reference to a value set containing a list of codes representing permitted answers for the question.",
              "$ref": "#/definitions/Reference"
            },
            "option": {
              "description": "For a \"choice\" question, identifies one of the permitted answers for the question.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Questionnaire.Option"
              }
            },
            "initialBoolean": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "type": "true | false"
            },
            "initialBoolean_": {
              "description": "Extensions for initialBoolean",
              "$ref": "#/definitions/Element"
            },
            "initialDecimal": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "initialDecimal_": {
              "description": "Extensions for initialDecimal",
              "$ref": "#/definitions/Element"
            },
            "initialInteger": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "initialInteger_": {
              "description": "Extensions for initialInteger",
              "$ref": "#/definitions/Element"
            },
            "initialDate": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "initialDate_": {
              "description": "Extensions for initialDate",
              "$ref": "#/definitions/Element"
            },
            "initialDateTime": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "initialDateTime_": {
              "description": "Extensions for initialDateTime",
              "$ref": "#/definitions/Element"
            },
            "initialInstant": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "type": "string"
            },
            "initialInstant_": {
              "description": "Extensions for initialInstant",
              "$ref": "#/definitions/Element"
            },
            "initialTime": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "initialTime_": {
              "description": "Extensions for initialTime",
              "$ref": "#/definitions/Element"
            },
            "initialString": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "type": "string"
            },
            "initialString_": {
              "description": "Extensions for initialString",
              "$ref": "#/definitions/Element"
            },
            "initialUri": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "type": "string"
            },
            "initialUri_": {
              "description": "Extensions for initialUri",
              "$ref": "#/definitions/Element"
            },
            "initialAttachment": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "$ref": "#/definitions/Attachment"
            },
            "initialCoding": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "$ref": "#/definitions/Coding"
            },
            "initialQuantity": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "$ref": "#/definitions/Quantity"
            },
            "initialReference": {
              "description": "The value that should be pre-populated when rendering the questionnaire for user input.",
              "$ref": "#/definitions/Reference"
            },
            "item": {
              "description": "Allows text, questions and other groups to be nested beneath a question or group.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Questionnaire.Item"
              }
            }
          }
        }
      ]
    },
    "Questionnaire.EnableWhen": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.",
          "properties": {
            "question": {
              "description": "The linkId for the question whose answer (or lack of answer) governs whether this item is enabled.",
              "type": "string"
            },
            "question_": {
              "description": "Extensions for question",
              "$ref": "#/definitions/Element"
            },
            "hasAnswer": {
              "description": "If present, indicates that this item should be enabled only if the specified question is answered or not answered.",
              "type": "true | false"
            },
            "hasAnswer_": {
              "description": "Extensions for hasAnswer",
              "$ref": "#/definitions/Element"
            },
            "answerBoolean": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "type": "true | false"
            },
            "answerBoolean_": {
              "description": "Extensions for answerBoolean",
              "$ref": "#/definitions/Element"
            },
            "answerDecimal": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "answerDecimal_": {
              "description": "Extensions for answerDecimal",
              "$ref": "#/definitions/Element"
            },
            "answerInteger": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "answerInteger_": {
              "description": "Extensions for answerInteger",
              "$ref": "#/definitions/Element"
            },
            "answerDate": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "answerDate_": {
              "description": "Extensions for answerDate",
              "$ref": "#/definitions/Element"
            },
            "answerDateTime": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "answerDateTime_": {
              "description": "Extensions for answerDateTime",
              "$ref": "#/definitions/Element"
            },
            "answerInstant": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "type": "string"
            },
            "answerInstant_": {
              "description": "Extensions for answerInstant",
              "$ref": "#/definitions/Element"
            },
            "answerTime": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "answerTime_": {
              "description": "Extensions for answerTime",
              "$ref": "#/definitions/Element"
            },
            "answerString": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "type": "string"
            },
            "answerString_": {
              "description": "Extensions for answerString",
              "$ref": "#/definitions/Element"
            },
            "answerUri": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "type": "string"
            },
            "answerUri_": {
              "description": "Extensions for answerUri",
              "$ref": "#/definitions/Element"
            },
            "answerAttachment": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "$ref": "#/definitions/Attachment"
            },
            "answerCoding": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "$ref": "#/definitions/Coding"
            },
            "answerQuantity": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "$ref": "#/definitions/Quantity"
            },
            "answerReference": {
              "description": "If present, then the answer for the referenced question must match this answer for all components present in the enableWhen.answer.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "Questionnaire.Option": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A structured set of questions intended to guide the collection of answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.",
          "properties": {
            "valueInteger": {
              "description": "Identifies a specific answer that\u0027s allowed as the answer to a question.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "#/definitions/Element"
            },
            "valueDate": {
              "description": "Identifies a specific answer that\u0027s allowed as the answer to a question.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "valueDate_": {
              "description": "Extensions for valueDate",
              "$ref": "#/definitions/Element"
            },
            "valueTime": {
              "description": "Identifies a specific answer that\u0027s allowed as the answer to a question.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "valueTime_": {
              "description": "Extensions for valueTime",
              "$ref": "#/definitions/Element"
            },
            "valueString": {
              "description": "Identifies a specific answer that\u0027s allowed as the answer to a question.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueCoding": {
              "description": "Identifies a specific answer that\u0027s allowed as the answer to a question.",
              "$ref": "#/definitions/Coding"
            }
          }
        }
      ]
    },
    "QuestionnaireResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.",
          "properties": {
            "resourceType": {
              "description": "This is a QuestionnaireResponse resource",
              "type": "string",
              "enum": [
                "QuestionnaireResponse"
              ]
            },
            "identifier": {
              "description": "A business identifier assigned to a particular completed (or partially completed) questionnaire.",
              "$ref": "#/definitions/Identifier"
            },
            "questionnaire": {
              "description": "Indicates the Questionnaire resource that defines the form for which answers are being provided.",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "The lifecycle status of the questionnaire response as a whole.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "The subject of the questionnaire response.  This could be a patient, organization, practitioner, device, etc.  This is who/what the answers apply to, but is not necessarily the source of information.",
              "$ref": "#/definitions/Reference"
            },
            "author": {
              "description": "Person who received the answers to the questions in the QuestionnaireResponse and recorded them in the system.",
              "$ref": "#/definitions/Reference"
            },
            "authored": {
              "description": "The date and/or time that this version of the questionnaire response was authored.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "authored_": {
              "description": "Extensions for authored",
              "$ref": "#/definitions/Element"
            },
            "source": {
              "description": "The person who answered the questions about the subject.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "Encounter during which this set of questionnaire response were collected. When there were multiple encounters, this is the one considered most relevant to the context of the answers.",
              "$ref": "#/definitions/Reference"
            },
            "item": {
              "description": "Corresponds to a group or question item from the original questionnaire.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuestionnaireResponse.Item"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "QuestionnaireResponse.Item": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.",
          "properties": {
            "linkId": {
              "description": "Identifies the item from the Questionnaire that corresponds to this item in the QuestionnaireResponse resource.",
              "type": "string"
            },
            "linkId_": {
              "description": "Extensions for linkId",
              "$ref": "#/definitions/Element"
            },
            "text": {
              "description": "Text that is displayed above the contents of the group or as the text of the question being answered.",
              "type": "string"
            },
            "text_": {
              "description": "Extensions for text",
              "$ref": "#/definitions/Element"
            },
            "subject": {
              "description": "More specific subject this section\u0027s answers are about, details the subject given in QuestionnaireResponse.",
              "$ref": "#/definitions/Reference"
            },
            "answer": {
              "description": "The respondent\u0027s answer(s) to the question.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuestionnaireResponse.Answer"
              }
            },
            "item": {
              "description": "Questions or sub-groups nested beneath a question or group.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuestionnaireResponse.Item"
              }
            }
          }
        }
      ]
    },
    "QuestionnaireResponse.Answer": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A structured set of questions and their answers. The questions are ordered and grouped into coherent subsets, corresponding to the structure of the grouping of the underlying questions.",
          "properties": {
            "valueBoolean": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueDecimal": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "valueDecimal_": {
              "description": "Extensions for valueDecimal",
              "$ref": "#/definitions/Element"
            },
            "valueInteger": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "#/definitions/Element"
            },
            "valueDate": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "valueDate_": {
              "description": "Extensions for valueDate",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            },
            "valueInstant": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "type": "string"
            },
            "valueInstant_": {
              "description": "Extensions for valueInstant",
              "$ref": "#/definitions/Element"
            },
            "valueTime": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "valueTime_": {
              "description": "Extensions for valueTime",
              "$ref": "#/definitions/Element"
            },
            "valueString": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueUri": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "type": "string"
            },
            "valueUri_": {
              "description": "Extensions for valueUri",
              "$ref": "#/definitions/Element"
            },
            "valueAttachment": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "$ref": "#/definitions/Attachment"
            },
            "valueCoding": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "$ref": "#/definitions/Coding"
            },
            "valueQuantity": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "$ref": "#/definitions/Quantity"
            },
            "valueReference": {
              "description": "The answer (or one of the answers) provided by the respondent to the question.",
              "$ref": "#/definitions/Reference"
            },
            "item": {
              "description": "Nested groups and/or questions found within this particular answer.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/QuestionnaireResponse.Item"
              }
            }
          }
        }
      ]
    },
    "ReferralRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Used to record and send details about a request for referral service or transfer of a patient to the care of another provider or provider organization.",
          "properties": {
            "resourceType": {
              "description": "This is a ReferralRequest resource",
              "type": "string",
              "enum": [
                "ReferralRequest"
              ]
            },
            "identifier": {
              "description": "Business identifier that uniquely identifies the referral/care transfer request instance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "basedOn": {
              "description": "Indicates any plans, proposals or orders that this request is intended to satisfy - in whole or in part.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "parent": {
              "description": "The business identifier of the logical \"grouping\" request/order that this referral is a part of.",
              "$ref": "#/definitions/Identifier"
            },
            "status": {
              "description": "The status of the authorization/intention reflected by the referral request record.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "category": {
              "description": "Distinguishes the \"level\" of authorization/demand implicit in this request.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "category_": {
              "description": "Extensions for category",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "An indication of the type of referral (or where applicable the type of transfer of care) request.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "priority": {
              "description": "An indication of the urgency of referral (or where applicable the type of transfer of care) request.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "patient": {
              "description": "The patient who is the subject of a referral or transfer of care request.",
              "$ref": "#/definitions/Reference"
            },
            "context": {
              "description": "The encounter at which the request for referral or transfer of care is initiated.",
              "$ref": "#/definitions/Reference"
            },
            "fulfillmentTime": {
              "description": "The period of time within which the services identified in the referral/transfer of care is specified or required to occur.",
              "$ref": "#/definitions/Period"
            },
            "authored": {
              "description": "Date/DateTime of creation for draft requests and date of activation for active requests.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "authored_": {
              "description": "Extensions for authored",
              "$ref": "#/definitions/Element"
            },
            "requester": {
              "description": "The healthcare provider or provider organization who/which initiated the referral/transfer of care request. Can also be  Patient (a self referral).",
              "$ref": "#/definitions/Reference"
            },
            "specialty": {
              "description": "Indication of the clinical domain or discipline to which the referral or transfer of care request is sent.  For example: Cardiology Gastroenterology Diabetology.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "recipient": {
              "description": "The healthcare provider(s) or provider organization(s) who/which is to receive the referral/transfer of care request.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "reason": {
              "description": "Description of clinical condition indicating why referral/transfer of care is requested.  For example:  Pathological Anomalies, Disabled (physical or mental),  Behavioral Management.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "description": {
              "description": "The reason element gives a short description of why the referral is being made, the description expands on this to support a more complete clinical summary.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "serviceRequested": {
              "description": "The service(s) that is/are requested to be provided to the patient.  For example: cardiac pacemaker insertion.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "supportingInformation": {
              "description": "Any additional (administrative, financial or clinical) information required to support request for referral or transfer of care.  For example: Presenting problems/chief complaints Medical History Family History Alerts Allergy/Intolerance and Adverse Reactions Medications Observations/Assessments (may include cognitive and fundtional assessments) Diagnostic Reports Care Plan.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "RelatedPerson": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.",
          "properties": {
            "resourceType": {
              "description": "This is a RelatedPerson resource",
              "type": "string",
              "enum": [
                "RelatedPerson"
              ]
            },
            "identifier": {
              "description": "Identifier for a person within a particular scope.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "patient": {
              "description": "The patient this person is related to.",
              "$ref": "#/definitions/Reference"
            },
            "relationship": {
              "description": "The nature of the relationship between a patient and the related person.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "name": {
              "description": "A name associated with the person.",
              "$ref": "#/definitions/HumanName"
            },
            "telecom": {
              "description": "A contact detail for the person, e.g. a telephone number or an email address.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "gender": {
              "description": "Administrative Gender - the gender that the person is considered to have for administration and record keeping purposes.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "gender_": {
              "description": "Extensions for gender",
              "$ref": "#/definitions/Element"
            },
            "birthDate": {
              "description": "The date on which the related person was born.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "birthDate_": {
              "description": "Extensions for birthDate",
              "$ref": "#/definitions/Element"
            },
            "address": {
              "description": "Address where the related person can be contacted or visited.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Address"
              }
            },
            "photo": {
              "description": "Image of the person.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Attachment"
              }
            },
            "period": {
              "description": "The period of time that this relationship is considered to be valid. If there are no dates defined, then the interval is unknown.",
              "$ref": "#/definitions/Period"
            }
          },
          "required": [
            "patient",
            "resourceType"
          ]
        }
      ]
    },
    "RiskAssessment": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.",
          "properties": {
            "resourceType": {
              "description": "This is a RiskAssessment resource",
              "type": "string",
              "enum": [
                "RiskAssessment"
              ]
            },
            "subject": {
              "description": "The patient or group the risk assessment applies to.",
              "$ref": "#/definitions/Reference"
            },
            "date": {
              "description": "The date (and possibly time) the risk assessment was performed.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "condition": {
              "description": "For assessments or prognosis specific to a particular condition, indicates the condition being assessed.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "The encounter where the assessment was performed.",
              "$ref": "#/definitions/Reference"
            },
            "performer": {
              "description": "The provider or software application that performed the assessment.",
              "$ref": "#/definitions/Reference"
            },
            "identifier": {
              "description": "Business identifier assigned to the risk assessment.",
              "$ref": "#/definitions/Identifier"
            },
            "method": {
              "description": "The algorithm, process or mechanism used to evaluate the risk.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "basis": {
              "description": "Indicates the source data considered as part of the assessment (FamilyHistory, Observations, Procedures, Conditions, etc.).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "prediction": {
              "description": "Describes the expected outcome for the subject.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/RiskAssessment.Prediction"
              }
            },
            "mitigation": {
              "description": "A description of the steps that might be taken to reduce the identified risk(s).",
              "type": "string"
            },
            "mitigation_": {
              "description": "Extensions for mitigation",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "RiskAssessment.Prediction": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.",
          "properties": {
            "outcome": {
              "description": "One of the potential outcomes for the patient (e.g. remission, death,  a particular condition).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "probabilityDecimal": {
              "description": "How likely is the outcome (in the specified timeframe).",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "probabilityDecimal_": {
              "description": "Extensions for probabilityDecimal",
              "$ref": "#/definitions/Element"
            },
            "probabilityRange": {
              "description": "How likely is the outcome (in the specified timeframe).",
              "$ref": "#/definitions/Range"
            },
            "probabilityCodeableConcept": {
              "description": "How likely is the outcome (in the specified timeframe).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "relativeRisk": {
              "description": "Indicates the risk for this particular subject (with their specific characteristics) divided by the risk of the population in general.  (Numbers greater than 1 \u003d higher risk than the population, numbers less than 1 \u003d lower risk.).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "relativeRisk_": {
              "description": "Extensions for relativeRisk",
              "$ref": "#/definitions/Element"
            },
            "whenPeriod": {
              "description": "Indicates the period of time or age range of the subject to which the specified probability applies.",
              "$ref": "#/definitions/Period"
            },
            "whenRange": {
              "description": "Indicates the period of time or age range of the subject to which the specified probability applies.",
              "$ref": "#/definitions/Range"
            },
            "rationale": {
              "description": "Additional information explaining the basis for the prediction.",
              "type": "string"
            },
            "rationale_": {
              "description": "Extensions for rationale",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "outcome"
          ]
        }
      ]
    },
    "Schedule": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A container for slot(s) of time that may be available for booking appointments.",
          "properties": {
            "resourceType": {
              "description": "This is a Schedule resource",
              "type": "string",
              "enum": [
                "Schedule"
              ]
            },
            "identifier": {
              "description": "External Ids for this item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "serviceCategory": {
              "description": "A broad categorisation of the service that is to be performed during this appointment.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "serviceType": {
              "description": "The specific service that is to be performed during this appointment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "specialty": {
              "description": "The specialty of a practitioner that would be required to perform the service requested in this appointment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "actor": {
              "description": "The resource this Schedule resource is providing availability information for. These are expected to usually be one of HealthcareService, Location, Practitioner, Device, Patient or RelatedPerson.",
              "$ref": "#/definitions/Reference"
            },
            "planningHorizon": {
              "description": "The period of time that the slots that are attached to this Schedule resource cover (even if none exist). These  cover the amount of time that an organization\u0027s planning horizon; the interval for which they are currently accepting appointments. This does not define a \"template\" for planning outside these dates.",
              "$ref": "#/definitions/Period"
            },
            "comment": {
              "description": "Comments on the availability to describe any extended information. Such as custom constraints on the slot(s) that may be associated.",
              "type": "string"
            },
            "comment_": {
              "description": "Extensions for comment",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "actor",
            "resourceType"
          ]
        }
      ]
    },
    "SearchParameter": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A search parameter that defines a named search item that can be used to search/filter on a resource.",
          "properties": {
            "resourceType": {
              "description": "This is a SearchParameter resource",
              "type": "string",
              "enum": [
                "SearchParameter"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this search parameter when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this search parameter is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name identifying the search parameter.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of this search parameter definition.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "A flag to indicate that this search parameter definition is authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "date": {
              "description": "The date  (and optionally time) when the search parameter definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the search parameter changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the search parameter.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SearchParameter.Contact"
              }
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of search parameters.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requirements": {
              "description": "The Scope and Usage that this search parameter was created to meet.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "The code used in the URL or the parameter name in a parameters resource for this search parameter.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "base": {
              "description": "The base resource type that this search parameter refers to.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "base_": {
              "description": "Extensions for base",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of value a search parameter refers to, and how the content is interpreted.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A description of the search parameters and how it used.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "expression": {
              "description": "A FluentPath expression that returns a set of elements for the search parameter.",
              "type": "string"
            },
            "expression_": {
              "description": "Extensions for expression",
              "$ref": "#/definitions/Element"
            },
            "xpath": {
              "description": "An XPath expression that returns a set of elements for the search parameter.",
              "type": "string"
            },
            "xpath_": {
              "description": "Extensions for xpath",
              "$ref": "#/definitions/Element"
            },
            "xpathUsage": {
              "description": "How the search parameter relates to the set of elements returned by evaluating the xpath query.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "xpathUsage_": {
              "description": "Extensions for xpathUsage",
              "$ref": "#/definitions/Element"
            },
            "target": {
              "description": "Types of resource (if a resource is referenced).",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "target_": {
              "description": "Extensions for target",
              "items": {
                "$ref": "#/definitions/Element"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "SearchParameter.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A search parameter that defines a named search item that can be used to search/filter on a resource.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the search parameter.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "Sequence": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Variant and Sequence data.",
          "properties": {
            "resourceType": {
              "description": "This is a Sequence resource",
              "type": "string",
              "enum": [
                "Sequence"
              ]
            },
            "identifier": {
              "description": "A unique identifier for this particular sequence instance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "type": {
              "description": "Amino acid / cDNA transcript / RNA variant.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "coordinateSystem": {
              "description": "Whether the sequence is numbered starting at 0 (0-based numbering or coordinates) or starting at 1 (1-based numbering). Values are \"0\" for 0-based numbering and \"1\" for one-based.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "coordinateSystem_": {
              "description": "Extensions for coordinateSystem",
              "$ref": "#/definitions/Element"
            },
            "patient": {
              "description": "The patient whose sequencing results are described by this resource.",
              "$ref": "#/definitions/Reference"
            },
            "specimen": {
              "description": "Specimen used for sequencing.",
              "$ref": "#/definitions/Reference"
            },
            "device": {
              "description": "The method for sequencing, for example, chip information.",
              "$ref": "#/definitions/Reference"
            },
            "quantity": {
              "description": "Quantity of the sequence.",
              "$ref": "#/definitions/Quantity"
            },
            "referenceSeq": {
              "description": "Reference Sequence. It can be described in two ways. One is provide the unique identifier of reference sequence submitted to NCBI. The start and end position of window on reference sequence should be defined.  The other way is using  genome build, chromosome number,and also the start, end position of window (this method is specifically for DNA reference sequence) .",
              "$ref": "#/definitions/Sequence.ReferenceSeq"
            },
            "variant": {
              "description": "Variant info in this sequence.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sequence.Variant"
              }
            },
            "observedSeq": {
              "description": "Observed sequence.",
              "type": "string"
            },
            "observedSeq_": {
              "description": "Extensions for observedSeq",
              "$ref": "#/definitions/Element"
            },
            "quality": {
              "description": "Quality for sequence quality vary by platform reflecting differences in sequencing chemistry and digital processing.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sequence.Quality"
              }
            },
            "readCoverage": {
              "description": "Coverage (read depth or depth) is the average number of reads representing a given nucleotide in the reconstructed sequence.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "readCoverage_": {
              "description": "Extensions for readCoverage",
              "$ref": "#/definitions/Element"
            },
            "repository": {
              "description": "Configurations of the external repository.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Sequence.Repository"
              }
            },
            "pointer": {
              "description": "Pointer to next atomic sequence which at most contains one variant.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "structureVariant": {
              "description": "Structural variant.",
              "$ref": "#/definitions/Sequence.StructureVariant"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "Sequence.ReferenceSeq": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Variant and Sequence data.",
          "properties": {
            "chromosome": {
              "description": "The chromosome containing the genetic finding. The value set will be 1-22, X, Y when the species is human without chromosome abnormality. Otherwise,  NCBI-Gene code system should be used.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "genomeBuild": {
              "description": "The Genome Build used for reference, following GRCh build versions e.g. \u0027GRCh 37\u0027.  Version number must be included if a versioned release of a primary build was used.",
              "type": "string"
            },
            "genomeBuild_": {
              "description": "Extensions for genomeBuild",
              "$ref": "#/definitions/Element"
            },
            "referenceSeqId": {
              "description": "Reference identifier of reference sequence submitted to NCBI. It must match the type in the Sequence.type field. For example, the prefix, “NG_” identifies reference sequence for genes, “NM_” for messenger RNA transcripts, and “NP_” for amino acid sequences.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "referenceSeqPointer": {
              "description": "A Pointer to another Sequence entity as refence sequence.",
              "$ref": "#/definitions/Reference"
            },
            "referenceSeqString": {
              "description": "A Reference Sequence string.",
              "type": "string"
            },
            "referenceSeqString_": {
              "description": "Extensions for referenceSeqString",
              "$ref": "#/definitions/Element"
            },
            "strand": {
              "description": "Strand of DNA. Available values are \"1\" for the plus strand and \"-1\" for the minus strand.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "strand_": {
              "description": "Extensions for strand",
              "$ref": "#/definitions/Element"
            },
            "windowStart": {
              "description": "Start position (inclusive) of the window on the reference sequence.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "windowStart_": {
              "description": "Extensions for windowStart",
              "$ref": "#/definitions/Element"
            },
            "windowEnd": {
              "description": "End position (exclusive) of the window on the reference sequence.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "windowEnd_": {
              "description": "Extensions for windowEnd",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "referenceSeqId"
          ]
        }
      ]
    },
    "Sequence.Variant": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Variant and Sequence data.",
          "properties": {
            "start": {
              "description": "Start position (inclusive) of the variant on the  reference sequence.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "start_": {
              "description": "Extensions for start",
              "$ref": "#/definitions/Element"
            },
            "end": {
              "description": "End position (exclusive) of the variant on the reference sequence.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "end_": {
              "description": "Extensions for end",
              "$ref": "#/definitions/Element"
            },
            "observedAllele": {
              "description": "Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the observed sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand.",
              "type": "string"
            },
            "observedAllele_": {
              "description": "Extensions for observedAllele",
              "$ref": "#/definitions/Element"
            },
            "referenceAllele": {
              "description": "Nucleotide(s)/amino acids from start position of sequence to stop position of sequence on the positive (+) strand of the reference sequence. When the sequence  type is DNA, it should be the sequence on the positive (+) strand.",
              "type": "string"
            },
            "referenceAllele_": {
              "description": "Extensions for referenceAllele",
              "$ref": "#/definitions/Element"
            },
            "cigar": {
              "description": "Extended CIGAR string for aligning the sequence with reference bases. See detailed documentation [here](http://support.illumina.com/help/SequencingAnalysisWorkflow/Content/Vault/Informatics/Sequencing_Analysis/CASAVA/swSEQ_mCA_ExtendedCIGARFormat.htm).",
              "type": "string"
            },
            "cigar_": {
              "description": "Extensions for cigar",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Sequence.Quality": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Variant and Sequence data.",
          "properties": {
            "start": {
              "description": "Start position (inclusive) of the sequence.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "start_": {
              "description": "Extensions for start",
              "$ref": "#/definitions/Element"
            },
            "end": {
              "description": "End position (exclusive) of the sequence.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "end_": {
              "description": "Extensions for end",
              "$ref": "#/definitions/Element"
            },
            "score": {
              "description": "Quality score.",
              "$ref": "#/definitions/Quantity"
            },
            "method": {
              "description": "Method for quality.",
              "type": "string"
            },
            "method_": {
              "description": "Extensions for method",
              "$ref": "#/definitions/Element"
            },
            "truePositives": {
              "description": "The number of variants found in the benchmark set that match exactly the test set.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "truePositives_": {
              "description": "Extensions for truePositives",
              "$ref": "#/definitions/Element"
            },
            "falsePositives": {
              "description": "The number of variants found in the test set that did not match exactly the benchmark set.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "falsePositives_": {
              "description": "Extensions for falsePositives",
              "$ref": "#/definitions/Element"
            },
            "falseNegatives": {
              "description": "The number of variants found in the benchmark set that did not match exactly the test set.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "falseNegatives_": {
              "description": "Extensions for falseNegatives",
              "$ref": "#/definitions/Element"
            },
            "precision": {
              "description": "(true positives) / (true positives + false positives).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "precision_": {
              "description": "Extensions for precision",
              "$ref": "#/definitions/Element"
            },
            "recall": {
              "description": "(true positives) / (true positives + false negatives).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "recall_": {
              "description": "Extensions for recall",
              "$ref": "#/definitions/Element"
            },
            "fMeasure": {
              "description": "2 * precision * recall / (precision + recall).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "fMeasure_": {
              "description": "Extensions for fMeasure",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Sequence.Repository": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Variant and Sequence data.",
          "properties": {
            "url": {
              "description": "URI of an external repository which contains further details about the genetics data.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "URI of an external repository which contains further details about the genetics data.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "variantId": {
              "description": "Id of the variant in this external repository.",
              "type": "string"
            },
            "variantId_": {
              "description": "Extensions for variantId",
              "$ref": "#/definitions/Element"
            },
            "readId": {
              "description": "Id of the read in this external repository.",
              "type": "string"
            },
            "readId_": {
              "description": "Extensions for readId",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Sequence.StructureVariant": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Variant and Sequence data.",
          "properties": {
            "precisionOfBoundaries": {
              "description": "Precision of boundaries.",
              "type": "string"
            },
            "precisionOfBoundaries_": {
              "description": "Extensions for precisionOfBoundaries",
              "$ref": "#/definitions/Element"
            },
            "reportedaCGHRatio": {
              "description": "Structural Variant reported aCGH ratio.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "reportedaCGHRatio_": {
              "description": "Extensions for reportedaCGHRatio",
              "$ref": "#/definitions/Element"
            },
            "length": {
              "description": "Structural Variant Length.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "length_": {
              "description": "Extensions for length",
              "$ref": "#/definitions/Element"
            },
            "outer": {
              "description": "Structural variant outer.",
              "$ref": "#/definitions/Sequence.Outer"
            },
            "inner": {
              "description": "Structural variant inner.",
              "$ref": "#/definitions/Sequence.Inner"
            }
          }
        }
      ]
    },
    "Sequence.Outer": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Variant and Sequence data.",
          "properties": {
            "start": {
              "description": "Structural Variant Outer Start-End.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "start_": {
              "description": "Extensions for start",
              "$ref": "#/definitions/Element"
            },
            "end": {
              "description": "Structural Variant Outer Start-End.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "end_": {
              "description": "Extensions for end",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Sequence.Inner": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "Variant and Sequence data.",
          "properties": {
            "start": {
              "description": "Structural Variant Inner Start-End.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "start_": {
              "description": "Extensions for start",
              "$ref": "#/definitions/Element"
            },
            "end": {
              "description": "Structural Variant Inner Start-End.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "end_": {
              "description": "Extensions for end",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Slot": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A slot of time on a schedule that may be available for booking appointments.",
          "properties": {
            "resourceType": {
              "description": "This is a Slot resource",
              "type": "string",
              "enum": [
                "Slot"
              ]
            },
            "identifier": {
              "description": "External Ids for this item.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "serviceCategory": {
              "description": "A broad categorisation of the service that is to be performed during this appointment.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "serviceType": {
              "description": "The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "specialty": {
              "description": "The specialty of a practitioner that would be required to perform the service requested in this appointment.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "appointmentType": {
              "description": "The style of appointment or patient that has been booked in the slot (not service type).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "schedule": {
              "description": "The schedule resource that this slot defines an interval of status information.",
              "$ref": "#/definitions/Reference"
            },
            "status": {
              "description": "busy | free | busy-unavailable | busy-tentative.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "start": {
              "description": "Date/Time that the slot is to begin.",
              "type": "string"
            },
            "start_": {
              "description": "Extensions for start",
              "$ref": "#/definitions/Element"
            },
            "end": {
              "description": "Date/Time that the slot is to conclude.",
              "type": "string"
            },
            "end_": {
              "description": "Extensions for end",
              "$ref": "#/definitions/Element"
            },
            "overbooked": {
              "description": "This slot has already been overbooked, appointments are unlikely to be accepted for this time.",
              "type": "true | false"
            },
            "overbooked_": {
              "description": "Extensions for overbooked",
              "$ref": "#/definitions/Element"
            },
            "comment": {
              "description": "Comments on the slot to describe any extended information. Such as custom constraints on the slot.",
              "type": "string"
            },
            "comment_": {
              "description": "Extensions for comment",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "schedule",
            "resourceType"
          ]
        }
      ]
    },
    "Specimen": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A sample to be used for analysis.",
          "properties": {
            "resourceType": {
              "description": "This is a Specimen resource",
              "type": "string",
              "enum": [
                "Specimen"
              ]
            },
            "identifier": {
              "description": "Id for specimen.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "accessionIdentifier": {
              "description": "The identifier assigned by the lab when accessioning specimen(s). This is not necessarily the same as the specimen identifier, depending on local lab procedures.",
              "$ref": "#/definitions/Identifier"
            },
            "status": {
              "description": "The availability of the specimen.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The kind of material that forms the specimen.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "subject": {
              "description": "Where the specimen came from. This may be from the patient(s) or from the environment or a device.",
              "$ref": "#/definitions/Reference"
            },
            "receivedTime": {
              "description": "Time when specimen was received for processing or testing.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "receivedTime_": {
              "description": "Extensions for receivedTime",
              "$ref": "#/definitions/Element"
            },
            "parent": {
              "description": "Reference to the parent (source) specimen which is used when the specimen was either derived from or a component of another specimen.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "request": {
              "description": "Details concerning a test or procedure request that required a specimen to be collected.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "collection": {
              "description": "Details concerning the specimen collection.",
              "$ref": "#/definitions/Specimen.Collection"
            },
            "treatment": {
              "description": "Details concerning treatment and processing steps for the specimen.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Specimen.Treatment"
              }
            },
            "container": {
              "description": "The container holding the specimen.  The recursive nature of containers; i.e. blood in tube in tray in rack is not addressed here.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Specimen.Container"
              }
            },
            "note": {
              "description": "To communicate any details or issues about the specimen or during the specimen collection. (for example: broken vial, sent with patient, frozen).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            }
          },
          "required": [
            "subject",
            "resourceType"
          ]
        }
      ]
    },
    "Specimen.Collection": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A sample to be used for analysis.",
          "properties": {
            "collector": {
              "description": "Person who collected the specimen.",
              "$ref": "#/definitions/Reference"
            },
            "collectedDateTime": {
              "description": "Time when specimen was collected from subject - the physiologically relevant time.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "collectedDateTime_": {
              "description": "Extensions for collectedDateTime",
              "$ref": "#/definitions/Element"
            },
            "collectedPeriod": {
              "description": "Time when specimen was collected from subject - the physiologically relevant time.",
              "$ref": "#/definitions/Period"
            },
            "quantity": {
              "description": "The quantity of specimen collected; for instance the volume of a blood sample, or the physical measurement of an anatomic pathology sample.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "method": {
              "description": "A coded value specifying the technique that is used to perform the procedure.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "bodySite": {
              "description": "Anatomical location from which the specimen was collected (if subject is a patient). This is the target site.  This element is not used for environmental specimens.",
              "$ref": "#/definitions/CodeableConcept"
            }
          }
        }
      ]
    },
    "Specimen.Treatment": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A sample to be used for analysis.",
          "properties": {
            "description": {
              "description": "Textual description of procedure.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "procedure": {
              "description": "A coded value specifying the procedure used to process the specimen.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "additive": {
              "description": "Material used in the processing step.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "timeDateTime": {
              "description": "A record of the time or period when the specimen treatment occurred.  For example the time of sample fixation or the period of time the sample was in formalin.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "timeDateTime_": {
              "description": "Extensions for timeDateTime",
              "$ref": "#/definitions/Element"
            },
            "timePeriod": {
              "description": "A record of the time or period when the specimen treatment occurred.  For example the time of sample fixation or the period of time the sample was in formalin.",
              "$ref": "#/definitions/Period"
            }
          }
        }
      ]
    },
    "Specimen.Container": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A sample to be used for analysis.",
          "properties": {
            "identifier": {
              "description": "Id for container. There may be multiple; a manufacturer\u0027s bar code, lab assigned identifier, etc. The container ID may differ from the specimen id in some circumstances.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "description": {
              "description": "Textual description of the container.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "The type of container associated with the specimen (e.g. slide, aliquot, etc.).",
              "$ref": "#/definitions/CodeableConcept"
            },
            "capacity": {
              "description": "The capacity (volume or other measure) the container may contain.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "specimenQuantity": {
              "description": "The quantity of specimen in the container; may be volume, dimensions, or other appropriate measurements, depending on the specimen type.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "additiveCodeableConcept": {
              "description": "Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "additiveReference": {
              "description": "Introduced substance to preserve, maintain or enhance the specimen. Examples: Formalin, Citrate, EDTA.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "StructureDefinition": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.",
          "properties": {
            "resourceType": {
              "description": "This is a StructureDefinition resource",
              "type": "string",
              "enum": [
                "StructureDefinition"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this structure definition when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure definition is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Formal identifier that is used to identify this StructureDefinition when it is represented in other formats, or referenced in a specification, model, design or an instance  (should be globally unique OID, UUID, or URI), (if it\u0027s not possible to use the literal URI).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "version": {
              "description": "The identifier that is used to identify this version of the StructureDefinition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the StructureDefinition author manually.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name identifying the StructureDefinition.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "display": {
              "description": "Defined so that applications can use this name when displaying the value of the extension to the user.",
              "type": "string"
            },
            "display_": {
              "description": "Extensions for display",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the StructureDefinition.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "This StructureDefinition was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the structure definition.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureDefinition.Contact"
              }
            },
            "date": {
              "description": "The date this version of the structure definition was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the structure definition changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the StructureDefinition and its use.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of structure definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requirements": {
              "description": "Explains why this structure definition is needed and why it\u0027s been constrained as it has.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "copyright": {
              "description": "A copyright statement relating to the structure definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "A set of terms from external terminologies that may be used to assist with indexing and searching of templates.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            },
            "fhirVersion": {
              "description": "The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 1.4.0 for this version.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "fhirVersion_": {
              "description": "Extensions for fhirVersion",
              "$ref": "#/definitions/Element"
            },
            "mapping": {
              "description": "An external specification that the content is mapped to.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureDefinition.Mapping"
              }
            },
            "kind": {
              "description": "Defines the kind of structure that this definition is describing.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "kind_": {
              "description": "Extensions for kind",
              "$ref": "#/definitions/Element"
            },
            "abstract": {
              "description": "Whether structure this definition describes is abstract or not  - that is, whether an actual exchanged item can ever be of this type.",
              "type": "true | false"
            },
            "abstract_": {
              "description": "Extensions for abstract",
              "$ref": "#/definitions/Element"
            },
            "contextType": {
              "description": "If this is an extension, Identifies the context within FHIR resources where the extension can be used.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contextType_": {
              "description": "Extensions for contextType",
              "$ref": "#/definitions/Element"
            },
            "context": {
              "description": "Identifies the types of resource or data type elements to which the extension can be applied.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "context_": {
              "description": "Extensions for context",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "baseType": {
              "description": "The type of type that this structure is derived from - a data type, an extension, a resource, including abstract ones. If this field is present, it indicates that the structure definition is deriving from this type. If it is not present, then the structure definition is the definition of a base abstract structure.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "baseType_": {
              "description": "Extensions for baseType",
              "$ref": "#/definitions/Element"
            },
            "baseDefinition": {
              "description": "An absolute URI that is the base structure from which this type is derived, either by specialization or constraint.",
              "type": "string"
            },
            "baseDefinition_": {
              "description": "Extensions for baseDefinition",
              "$ref": "#/definitions/Element"
            },
            "derivation": {
              "description": "How the type relates to the baseDefinition.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "derivation_": {
              "description": "Extensions for derivation",
              "$ref": "#/definitions/Element"
            },
            "snapshot": {
              "description": "A snapshot view is expressed in a stand alone form that can be used and interpreted without considering the base StructureDefinition.",
              "$ref": "#/definitions/StructureDefinition.Snapshot"
            },
            "differential": {
              "description": "A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.",
              "$ref": "#/definitions/StructureDefinition.Differential"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "StructureDefinition.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the structure definition.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "StructureDefinition.Mapping": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.",
          "properties": {
            "identity": {
              "description": "An Internal id that is used to identify this mapping set when specific mappings are made.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "identity_": {
              "description": "Extensions for identity",
              "$ref": "#/definitions/Element"
            },
            "uri": {
              "description": "An absolute URI that identifies the specification that this mapping is expressed to.",
              "type": "string"
            },
            "uri_": {
              "description": "Extensions for uri",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A name for the specification that is being mapped to.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "comments": {
              "description": "Comments about this mapping, including version notes, issues, scope limitations, and other important notes for usage.",
              "type": "string"
            },
            "comments_": {
              "description": "Extensions for comments",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "StructureDefinition.Snapshot": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.",
          "properties": {
            "element": {
              "description": "Captures constraints on each element within the resource.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition"
              }
            }
          },
          "required": [
            "element"
          ]
        }
      ]
    },
    "StructureDefinition.Differential": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions, and constraints on resources and data types.",
          "properties": {
            "element": {
              "description": "Captures constraints on each element within the resource.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ElementDefinition"
              }
            }
          },
          "required": [
            "element"
          ]
        }
      ]
    },
    "StructureMap": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "resourceType": {
              "description": "This is a StructureMap resource",
              "type": "string",
              "enum": [
                "StructureMap"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this structure map when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this structure map is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Formal identifier that is used to identify this StructureMap when it is represented in other formats, or referenced in a specification, model, design or an instance  (should be globally unique OID, UUID, or URI), (if it\u0027s not possible to use the literal URI).",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "version": {
              "description": "The identifier that is used to identify this version of the StructureMap when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the StructureMap author manually.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name identifying the StructureMap.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the StructureMap.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "This StructureMap was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the structure map.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Contact"
              }
            },
            "date": {
              "description": "The date this version of the structure map was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the structure map changes.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the StructureMap and its use.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of structure maps.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requirements": {
              "description": "Explains why this structure map is needed and why it\u0027s been designed as it has.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "copyright": {
              "description": "A copyright statement relating to the structure map and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "structure": {
              "description": "A structure definition used by this map. The structure definition may describe instances that are converted, or the instances that are produced.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Structure"
              }
            },
            "import": {
              "description": "Other maps used by this map (canonical URLs).",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "import_": {
              "description": "Extensions for import",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "group": {
              "description": "Named sections for reader convenience.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Group"
              }
            }
          },
          "required": [
            "resourceType",
            "group"
          ]
        }
      ]
    },
    "StructureMap.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the structure map.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "StructureMap.Structure": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "url": {
              "description": "The canonical URL that identifies the structure.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "mode": {
              "description": "How the referenced structure is used in this mapping.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "Documentation that describes how the structure is used in the mapping.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "StructureMap.Group": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "Descriptive name for a user.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "extends": {
              "description": "Another group that this group adds rules to.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "extends_": {
              "description": "Extensions for extends",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "Documentation for this group.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            },
            "input": {
              "description": "A name assigned to an instance of data. The instance must be provided when the mapping is invoked.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Input"
              }
            },
            "rule": {
              "description": "Transform Rule from source to target.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Rule"
              }
            }
          },
          "required": [
            "input",
            "rule"
          ]
        }
      ]
    },
    "StructureMap.Input": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "Name for this instance of data.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "type": {
              "description": "Type for this instance of data.",
              "type": "string"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "mode": {
              "description": "Mode for this instance of data.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "mode_": {
              "description": "Extensions for mode",
              "$ref": "#/definitions/Element"
            },
            "documentation": {
              "description": "Documentation for this instance of data.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "StructureMap.Rule": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "Name of the rule for internal references.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "source": {
              "description": "Source inputs to the mapping.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Source"
              }
            },
            "target": {
              "description": "Content to create because of this mapping rule.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Target"
              }
            },
            "rule": {
              "description": "Rules contained in this rule.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Rule"
              }
            },
            "dependent": {
              "description": "Which other rules to apply in the context of this rule.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Dependent"
              }
            },
            "documentation": {
              "description": "Documentation for this instance of data.",
              "type": "string"
            },
            "documentation_": {
              "description": "Extensions for documentation",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "source"
          ]
        }
      ]
    },
    "StructureMap.Source": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "required": {
              "description": "Whether this rule applies if the source isn\u0027t found.",
              "type": "true | false"
            },
            "required_": {
              "description": "Extensions for required",
              "$ref": "#/definitions/Element"
            },
            "context": {
              "description": "Type or variable this rule applies to.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "context_": {
              "description": "Extensions for context",
              "$ref": "#/definitions/Element"
            },
            "contextType": {
              "description": "How to interpret the context.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contextType_": {
              "description": "Extensions for contextType",
              "$ref": "#/definitions/Element"
            },
            "element": {
              "description": "Optional field for this source.",
              "type": "string"
            },
            "element_": {
              "description": "Extensions for element",
              "$ref": "#/definitions/Element"
            },
            "listMode": {
              "description": "How to handle the list mode for this element.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "listMode_": {
              "description": "Extensions for listMode",
              "$ref": "#/definitions/Element"
            },
            "variable": {
              "description": "Named context for field, if a field is specified.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "variable_": {
              "description": "Extensions for variable",
              "$ref": "#/definitions/Element"
            },
            "condition": {
              "description": "FluentPath expression  - must be true or the rule does not apply.",
              "type": "string"
            },
            "condition_": {
              "description": "Extensions for condition",
              "$ref": "#/definitions/Element"
            },
            "check": {
              "description": "FluentPath expression  - must be true or the mapping engine throws an error instead of completing.",
              "type": "string"
            },
            "check_": {
              "description": "Extensions for check",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "StructureMap.Target": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "context": {
              "description": "Type or variable this rule applies to.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "context_": {
              "description": "Extensions for context",
              "$ref": "#/definitions/Element"
            },
            "contextType": {
              "description": "How to interpret the context.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contextType_": {
              "description": "Extensions for contextType",
              "$ref": "#/definitions/Element"
            },
            "element": {
              "description": "Field to create in the context.",
              "type": "string"
            },
            "element_": {
              "description": "Extensions for element",
              "$ref": "#/definitions/Element"
            },
            "variable": {
              "description": "Named context for field, if desired, and a field is specified.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "variable_": {
              "description": "Extensions for variable",
              "$ref": "#/definitions/Element"
            },
            "listMode": {
              "description": "If field is a list, how to manage the list.",
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
              }
            },
            "listMode_": {
              "description": "Extensions for listMode",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "listRuleId": {
              "description": "Internal rule reference for shared list items.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "listRuleId_": {
              "description": "Extensions for listRuleId",
              "$ref": "#/definitions/Element"
            },
            "transform": {
              "description": "How the data is copied / created.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "transform_": {
              "description": "Extensions for transform",
              "$ref": "#/definitions/Element"
            },
            "parameter": {
              "description": "Parameters to the transform.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/StructureMap.Parameter"
              }
            }
          }
        }
      ]
    },
    "StructureMap.Parameter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "valueId": {
              "description": "Parameter value - variable or literal.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "valueId_": {
              "description": "Extensions for valueId",
              "$ref": "#/definitions/Element"
            },
            "valueString": {
              "description": "Parameter value - variable or literal.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueBoolean": {
              "description": "Parameter value - variable or literal.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueInteger": {
              "description": "Parameter value - variable or literal.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "#/definitions/Element"
            },
            "valueDecimal": {
              "description": "Parameter value - variable or literal.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "valueDecimal_": {
              "description": "Extensions for valueDecimal",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "StructureMap.Dependent": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A Map of relationships between 2 structures that can be used to transform data.",
          "properties": {
            "name": {
              "description": "Name of a rule or group to apply.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "variable": {
              "description": "Names of variables to pass to the rule or group.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "variable_": {
              "description": "Extensions for variable",
              "items": {
                "$ref": "#/definitions/Element"
              }
            }
          }
        }
      ]
    },
    "Subscription": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined \"channel\" so that another system is able to take an appropriate action.",
          "properties": {
            "resourceType": {
              "description": "This is a Subscription resource",
              "type": "string",
              "enum": [
                "Subscription"
              ]
            },
            "criteria": {
              "description": "The rules that the server should use to determine when to generate notifications for this subscription.",
              "type": "string"
            },
            "criteria_": {
              "description": "Extensions for criteria",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contact details for a human to contact about the subscription. The primary use of this for system administrator troubleshooting.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            },
            "reason": {
              "description": "A description of why this subscription is defined.",
              "type": "string"
            },
            "reason_": {
              "description": "Extensions for reason",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the subscription, which marks the server state for managing the subscription.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "error": {
              "description": "A record of the last error that occurred when the server processed a notification.",
              "type": "string"
            },
            "error_": {
              "description": "Extensions for error",
              "$ref": "#/definitions/Element"
            },
            "channel": {
              "description": "Details where to send notifications when resources are received that meet the criteria.",
              "$ref": "#/definitions/Subscription.Channel"
            },
            "end": {
              "description": "The time for the server to turn the subscription off.",
              "type": "string"
            },
            "end_": {
              "description": "Extensions for end",
              "$ref": "#/definitions/Element"
            },
            "tag": {
              "description": "A tag to add to any resource that matches the criteria, after the subscription is processed.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Coding"
              }
            }
          },
          "required": [
            "channel",
            "resourceType"
          ]
        }
      ]
    },
    "Subscription.Channel": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "The subscription resource is used to define a push based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined \"channel\" so that another system is able to take an appropriate action.",
          "properties": {
            "type": {
              "description": "The type of channel to send notifications on.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "type_": {
              "description": "Extensions for type",
              "$ref": "#/definitions/Element"
            },
            "endpoint": {
              "description": "The uri that describes the actual end-point to send messages to.",
              "type": "string"
            },
            "endpoint_": {
              "description": "Extensions for endpoint",
              "$ref": "#/definitions/Element"
            },
            "payload": {
              "description": "The mime type to send the payload in - either application/xml+fhir, or application/json+fhir. If the mime type is blank, then there is no payload in the notification, just a notification.",
              "type": "string"
            },
            "payload_": {
              "description": "Extensions for payload",
              "$ref": "#/definitions/Element"
            },
            "header": {
              "description": "Additional headers / information to send as part of the notification.",
              "type": "string"
            },
            "header_": {
              "description": "Extensions for header",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "Substance": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A homogeneous material with a definite composition.",
          "properties": {
            "resourceType": {
              "description": "This is a Substance resource",
              "type": "string",
              "enum": [
                "Substance"
              ]
            },
            "identifier": {
              "description": "Unique identifier for the substance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "category": {
              "description": "A code that classifies the general type of substance.  This is used  for searching, sorting and display purposes.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "code": {
              "description": "A code (or set of codes) that identify this substance.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "description": {
              "description": "A description of the substance - its appearance, handling requirements, and other usage notes.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "instance": {
              "description": "Substance may be used to describe a kind of substance, or a specific package/container of the substance: an instance.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Substance.Instance"
              }
            },
            "ingredient": {
              "description": "A substance can be composed of other substances.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Substance.Ingredient"
              }
            }
          },
          "required": [
            "code",
            "resourceType"
          ]
        }
      ]
    },
    "Substance.Instance": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A homogeneous material with a definite composition.",
          "properties": {
            "identifier": {
              "description": "Identifier associated with the package/container (usually a label affixed directly).",
              "$ref": "#/definitions/Identifier"
            },
            "expiry": {
              "description": "When the substance is no longer valid to use. For some substances, a single arbitrary date is used for expiry.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "expiry_": {
              "description": "Extensions for expiry",
              "$ref": "#/definitions/Element"
            },
            "quantity": {
              "description": "The amount of the substance.",
              "$ref": "#/definitions/SimpleQuantity"
            }
          }
        }
      ]
    },
    "Substance.Ingredient": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A homogeneous material with a definite composition.",
          "properties": {
            "quantity": {
              "description": "The amount of the ingredient in the substance - a concentration ratio.",
              "$ref": "#/definitions/Ratio"
            },
            "substanceCodeableConcept": {
              "description": "Another substance that is a component of this substance.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "substanceReference": {
              "description": "Another substance that is a component of this substance.",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "SupplyDelivery": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "Record of delivery of what is supplied.",
          "properties": {
            "resourceType": {
              "description": "This is a SupplyDelivery resource",
              "type": "string",
              "enum": [
                "SupplyDelivery"
              ]
            },
            "identifier": {
              "description": "Identifier assigned by the dispensing facility when the item(s) is dispensed.",
              "$ref": "#/definitions/Identifier"
            },
            "status": {
              "description": "A code specifying the state of the dispense event.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "patient": {
              "description": "A link to a resource representing the person whom the delivered item is for.",
              "$ref": "#/definitions/Reference"
            },
            "type": {
              "description": "Indicates the type of dispensing event that is performed. Examples include: Trial Fill, Completion of Trial, Partial Fill, Emergency Fill, Samples, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "quantity": {
              "description": "The amount of supply that has been dispensed. Includes unit of measure.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "suppliedItemCodeableConcept": {
              "description": "Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "suppliedItemReference": {
              "description": "Identifies the medication, substance or device being dispensed. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.",
              "$ref": "#/definitions/Reference"
            },
            "supplier": {
              "description": "The individual responsible for dispensing the medication, supplier or device.",
              "$ref": "#/definitions/Reference"
            },
            "whenPrepared": {
              "description": "The time the dispense event occurred.",
              "$ref": "#/definitions/Period"
            },
            "time": {
              "description": "The time the dispensed item was sent or handed to the patient (or agent).",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "time_": {
              "description": "Extensions for time",
              "$ref": "#/definitions/Element"
            },
            "destination": {
              "description": "Identification of the facility/location where the Supply was shipped to, as part of the dispense event.",
              "$ref": "#/definitions/Reference"
            },
            "receiver": {
              "description": "Identifies the person who picked up the Supply.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "SupplyRequest": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A record of a request for a medication, substance or device used in the healthcare setting.",
          "properties": {
            "resourceType": {
              "description": "This is a SupplyRequest resource",
              "type": "string",
              "enum": [
                "SupplyRequest"
              ]
            },
            "patient": {
              "description": "A link to a resource representing the person whom the ordered item is for.",
              "$ref": "#/definitions/Reference"
            },
            "source": {
              "description": "The Practitioner , Organization or Patient who initiated this order for the supply.",
              "$ref": "#/definitions/Reference"
            },
            "date": {
              "description": "When the request was made.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Unique identifier for this supply request.",
              "$ref": "#/definitions/Identifier"
            },
            "status": {
              "description": "Status of the supply request.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "kind": {
              "description": "Category of supply, e.g.  central, non-stock, etc. This is used to support work flows associated with the supply process.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "orderedItemCodeableConcept": {
              "description": "The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "orderedItemReference": {
              "description": "The item that is requested to be supplied. This is either a link to a resource representing the details of the item or a code that identifies the item from a known list.",
              "$ref": "#/definitions/Reference"
            },
            "supplier": {
              "description": "Who is intended to fulfill the request.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "reasonCodeableConcept": {
              "description": "Why the supply item was requested.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "reasonReference": {
              "description": "Why the supply item was requested.",
              "$ref": "#/definitions/Reference"
            },
            "when": {
              "description": "When the request should be fulfilled.",
              "$ref": "#/definitions/SupplyRequest.When"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "SupplyRequest.When": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A record of a request for a medication, substance or device used in the healthcare setting.",
          "properties": {
            "code": {
              "description": "Code indicating when the request should be fulfilled.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "schedule": {
              "description": "Formal fulfillment schedule.",
              "$ref": "#/definitions/Timing"
            }
          }
        }
      ]
    },
    "Task": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A task to be performed.",
          "properties": {
            "resourceType": {
              "description": "This is a Task resource",
              "type": "string",
              "enum": [
                "Task"
              ]
            },
            "identifier": {
              "description": "The business identifier for this task.",
              "$ref": "#/definitions/Identifier"
            },
            "basedOn": {
              "description": "Identifies a plan, proposal or order that this task has been created in fulfillment of.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "requisition": {
              "description": "An identifier that links together multiple tasks and other requests that were created in the same context.",
              "$ref": "#/definitions/Identifier"
            },
            "parent": {
              "description": "Task that this particular task is part of.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "status": {
              "description": "The current status of the task.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "statusReason": {
              "description": "An explanation as to why this task is held, failed, was refused, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "businessStatus": {
              "description": "Contains business-specific nuances of the business state.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "stage": {
              "description": "Indicates the \"level\" of actionability associated with the Task.  I.e. Is this a proposed task, a planned task, an actionable task, etc.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "code": {
              "description": "A name or code (or both) briefly describing what the task involves.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "priority": {
              "description": "The priority of the task among other tasks of the same type.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "priority_": {
              "description": "Extensions for priority",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A description of this task.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "focus": {
              "description": "The request being actioned or the resource being manipulated by this task.",
              "$ref": "#/definitions/Reference"
            },
            "for": {
              "description": "The entity who benefits from the performance of the service specified in the task (e.g., the patient).",
              "$ref": "#/definitions/Reference"
            },
            "context": {
              "description": "The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.",
              "$ref": "#/definitions/Reference"
            },
            "created": {
              "description": "The date and time this task was created.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "created_": {
              "description": "Extensions for created",
              "$ref": "#/definitions/Element"
            },
            "lastModified": {
              "description": "The date and time of last modification to this task.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "lastModified_": {
              "description": "Extensions for lastModified",
              "$ref": "#/definitions/Element"
            },
            "requester": {
              "description": "The creator of the task.",
              "$ref": "#/definitions/Reference"
            },
            "owner": {
              "description": "The owner of this task.  The participant who can execute this task.",
              "$ref": "#/definitions/Reference"
            },
            "performerType": {
              "description": "The type of participant that can execute the task.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "reason": {
              "description": "A description or code indicating why this task needs to be performed.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "note": {
              "description": "Free-text information captured about the task as it progresses.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Annotation"
              }
            },
            "fulfillment": {
              "description": "Identifies any limitations on what part of a referenced task subject request should be actioned.",
              "$ref": "#/definitions/Task.Fulfillment"
            },
            "definition": {
              "description": "A reference to a formal or informal definition of the task.",
              "type": "string"
            },
            "definition_": {
              "description": "Extensions for definition",
              "$ref": "#/definitions/Element"
            },
            "input": {
              "description": "Inputs to the task.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task.Input"
              }
            },
            "output": {
              "description": "Outputs produced by the Task.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Task.Output"
              }
            }
          },
          "required": [
            "requester",
            "stage",
            "resourceType"
          ]
        }
      ]
    },
    "Task.Fulfillment": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A task to be performed.",
          "properties": {
            "repetitions": {
              "description": "Indicates the number of times the requested action should occur.",
              "type": "number",
              "pattern": "[1-9][0-9]*"
            },
            "repetitions_": {
              "description": "Extensions for repetitions",
              "$ref": "#/definitions/Element"
            },
            "period": {
              "description": "Over what time-period is fulfillment sought.",
              "$ref": "#/definitions/Period"
            },
            "recipients": {
              "description": "For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            }
          }
        }
      ]
    },
    "Task.Input": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A task to be performed.",
          "properties": {
            "name": {
              "description": "The name of the input parameter.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "valueBoolean": {
              "description": "The value of the input parameter as a basic type.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueInteger": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "#/definitions/Element"
            },
            "valueDecimal": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "valueDecimal_": {
              "description": "Extensions for valueDecimal",
              "$ref": "#/definitions/Element"
            },
            "valueBase64Binary": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "valueBase64Binary_": {
              "description": "Extensions for valueBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "valueInstant": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "valueInstant_": {
              "description": "Extensions for valueInstant",
              "$ref": "#/definitions/Element"
            },
            "valueString": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueUri": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "valueUri_": {
              "description": "Extensions for valueUri",
              "$ref": "#/definitions/Element"
            },
            "valueDate": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "valueDate_": {
              "description": "Extensions for valueDate",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            },
            "valueTime": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "valueTime_": {
              "description": "Extensions for valueTime",
              "$ref": "#/definitions/Element"
            },
            "valueCode": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "valueCode_": {
              "description": "Extensions for valueCode",
              "$ref": "#/definitions/Element"
            },
            "valueOid": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "valueOid_": {
              "description": "Extensions for valueOid",
              "$ref": "#/definitions/Element"
            },
            "valueUuid": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "valueUuid_": {
              "description": "Extensions for valueUuid",
              "$ref": "#/definitions/Element"
            },
            "valueId": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "valueId_": {
              "description": "Extensions for valueId",
              "$ref": "#/definitions/Element"
            },
            "valueUnsignedInt": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "valueUnsignedInt_": {
              "description": "Extensions for valueUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "valuePositiveInt": {
              "description": "The value of the input parameter as a basic type.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "valuePositiveInt_": {
              "description": "Extensions for valuePositiveInt",
              "$ref": "#/definitions/Element"
            },
            "valueMarkdown": {
              "description": "The value of the input parameter as a basic type.",
              "type": "string"
            },
            "valueMarkdown_": {
              "description": "Extensions for valueMarkdown",
              "$ref": "#/definitions/Element"
            },
            "valueElement": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Element"
            },
            "valueExtension": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Extension"
            },
            "valueBackboneElement": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/BackboneElement"
            },
            "valueNarrative": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Narrative"
            },
            "valueAnnotation": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Annotation"
            },
            "valueAttachment": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Attachment"
            },
            "valueIdentifier": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Identifier"
            },
            "valueCodeableConcept": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueCoding": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Coding"
            },
            "valueQuantity": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Quantity"
            },
            "valueDuration": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Duration"
            },
            "valueSimpleQuantity": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "valueDistance": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Distance"
            },
            "valueCount": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Count"
            },
            "valueMoney": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Money"
            },
            "valueAge": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Age"
            },
            "valueRange": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Range"
            },
            "valuePeriod": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Period"
            },
            "valueRatio": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Ratio"
            },
            "valueReference": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Reference"
            },
            "valueSampledData": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/SampledData"
            },
            "valueSignature": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Signature"
            },
            "valueHumanName": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/HumanName"
            },
            "valueAddress": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Address"
            },
            "valueContactPoint": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/ContactPoint"
            },
            "valueTiming": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Timing"
            },
            "valueMeta": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/Meta"
            },
            "valueElementDefinition": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/ElementDefinition"
            },
            "valueModuleMetadata": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "valueDataRequirement": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/DataRequirement"
            },
            "valueActionDefinition": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/ActionDefinition"
            },
            "valueParameterDefinition": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "valueTriggerDefinition": {
              "description": "The value of the input parameter as a basic type.",
              "$ref": "#/definitions/TriggerDefinition"
            }
          }
        }
      ]
    },
    "Task.Output": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A task to be performed.",
          "properties": {
            "name": {
              "description": "The name of the Output parameter.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "valueBoolean": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueInteger": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "#/definitions/Element"
            },
            "valueDecimal": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "valueDecimal_": {
              "description": "Extensions for valueDecimal",
              "$ref": "#/definitions/Element"
            },
            "valueBase64Binary": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "valueBase64Binary_": {
              "description": "Extensions for valueBase64Binary",
              "$ref": "#/definitions/Element"
            },
            "valueInstant": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "valueInstant_": {
              "description": "Extensions for valueInstant",
              "$ref": "#/definitions/Element"
            },
            "valueString": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueUri": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "valueUri_": {
              "description": "Extensions for valueUri",
              "$ref": "#/definitions/Element"
            },
            "valueDate": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?",
              "type": "string"
            },
            "valueDate_": {
              "description": "Extensions for valueDate",
              "$ref": "#/definitions/Element"
            },
            "valueDateTime": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
              "type": "string"
            },
            "valueDateTime_": {
              "description": "Extensions for valueDateTime",
              "$ref": "#/definitions/Element"
            },
            "valueTime": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?",
              "type": "string"
            },
            "valueTime_": {
              "description": "Extensions for valueTime",
              "$ref": "#/definitions/Element"
            },
            "valueCode": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "valueCode_": {
              "description": "Extensions for valueCode",
              "$ref": "#/definitions/Element"
            },
            "valueOid": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "urn:oid:(0|[1-9][0-9]*)(\\.(0|[1-9][0-9]*))*",
              "type": "string"
            },
            "valueOid_": {
              "description": "Extensions for valueOid",
              "$ref": "#/definitions/Element"
            },
            "valueUuid": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
              "type": "string"
            },
            "valueUuid_": {
              "description": "Extensions for valueUuid",
              "$ref": "#/definitions/Element"
            },
            "valueId": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
              "type": "string"
            },
            "valueId_": {
              "description": "Extensions for valueId",
              "$ref": "#/definitions/Element"
            },
            "valueUnsignedInt": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "[0]|([1-9][0-9]*)",
              "type": "number"
            },
            "valueUnsignedInt_": {
              "description": "Extensions for valueUnsignedInt",
              "$ref": "#/definitions/Element"
            },
            "valuePositiveInt": {
              "description": "The value of the Output parameter as a basic type.",
              "pattern": "[1-9][0-9]*",
              "type": "number"
            },
            "valuePositiveInt_": {
              "description": "Extensions for valuePositiveInt",
              "$ref": "#/definitions/Element"
            },
            "valueMarkdown": {
              "description": "The value of the Output parameter as a basic type.",
              "type": "string"
            },
            "valueMarkdown_": {
              "description": "Extensions for valueMarkdown",
              "$ref": "#/definitions/Element"
            },
            "valueElement": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Element"
            },
            "valueExtension": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Extension"
            },
            "valueBackboneElement": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/BackboneElement"
            },
            "valueNarrative": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Narrative"
            },
            "valueAnnotation": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Annotation"
            },
            "valueAttachment": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Attachment"
            },
            "valueIdentifier": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Identifier"
            },
            "valueCodeableConcept": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "valueCoding": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Coding"
            },
            "valueQuantity": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Quantity"
            },
            "valueDuration": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Duration"
            },
            "valueSimpleQuantity": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "valueDistance": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Distance"
            },
            "valueCount": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Count"
            },
            "valueMoney": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Money"
            },
            "valueAge": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Age"
            },
            "valueRange": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Range"
            },
            "valuePeriod": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Period"
            },
            "valueRatio": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Ratio"
            },
            "valueReference": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Reference"
            },
            "valueSampledData": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/SampledData"
            },
            "valueSignature": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Signature"
            },
            "valueHumanName": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/HumanName"
            },
            "valueAddress": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Address"
            },
            "valueContactPoint": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/ContactPoint"
            },
            "valueTiming": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Timing"
            },
            "valueMeta": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/Meta"
            },
            "valueElementDefinition": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/ElementDefinition"
            },
            "valueModuleMetadata": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/ModuleMetadata"
            },
            "valueDataRequirement": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/DataRequirement"
            },
            "valueActionDefinition": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/ActionDefinition"
            },
            "valueParameterDefinition": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/ParameterDefinition"
            },
            "valueTriggerDefinition": {
              "description": "The value of the Output parameter as a basic type.",
              "$ref": "#/definitions/TriggerDefinition"
            }
          }
        }
      ]
    },
    "TestScript": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "resourceType": {
              "description": "This is a TestScript resource",
              "type": "string",
              "enum": [
                "TestScript"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this Test Script. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this Test Script is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The identifier that is used to identify this version of the TestScript. This is an arbitrary value managed by the TestScript author manually.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name identifying the TestScript.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the TestScript.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Identifier for the TestScript assigned for external purposes outside the context of FHIR.",
              "$ref": "#/definitions/Identifier"
            },
            "experimental": {
              "description": "This TestScript was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the Test Script.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Contact"
              }
            },
            "date": {
              "description": "The date this version of the test tcript was published. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the test cases change.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the TestScript and its use.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of Test Scripts.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "requirements": {
              "description": "Explains why this Test Script is needed and why it\u0027s been constrained as it has.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "copyright": {
              "description": "A copyright statement relating to the Test Script and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the details of the constraints and mappings.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "origin": {
              "description": "An abstract server used in operations within this test script in the origin element.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Origin"
              }
            },
            "destination": {
              "description": "An abstract server used in operations within this test script in the destination element.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Destination"
              }
            },
            "metadata": {
              "description": "The required capability must exist and are assumed to function correctly on the FHIR server being tested.",
              "$ref": "#/definitions/TestScript.Metadata"
            },
            "fixture": {
              "description": "Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Fixture"
              }
            },
            "profile": {
              "description": "Reference to the profile to be used for validation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Reference"
              }
            },
            "variable": {
              "description": "Variable is set based either on element value in response body or on header field value in the response headers.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Variable"
              }
            },
            "rule": {
              "description": "Assert rule to be used in one or more asserts within the test script.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Rule"
              }
            },
            "ruleset": {
              "description": "Contains one or more rules.  Offers a way to group rules so assertions could reference the group of rules and have them all applied.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Ruleset"
              }
            },
            "setup": {
              "description": "A series of required setup operations before tests are executed.",
              "$ref": "#/definitions/TestScript.Setup"
            },
            "test": {
              "description": "A test in this script.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Test"
              }
            },
            "teardown": {
              "description": "A series of operations required to clean up after the all the tests are executed (successfully or otherwise).",
              "$ref": "#/definitions/TestScript.Teardown"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "TestScript.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the Test Script.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "TestScript.Origin": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "index": {
              "description": "Abstract name given to an origin server in this test script.  The name is provided as a number starting at 1.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "index_": {
              "description": "Extensions for index",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "The type of origin profile the test system supports.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "profile"
          ]
        }
      ]
    },
    "TestScript.Destination": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "index": {
              "description": "Abstract name given to a destination server in this test script.  The name is provided as a number starting at 1.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "index_": {
              "description": "Extensions for index",
              "$ref": "#/definitions/Element"
            },
            "profile": {
              "description": "The type of destination profile the test system supports.",
              "$ref": "#/definitions/Coding"
            }
          },
          "required": [
            "profile"
          ]
        }
      ]
    },
    "TestScript.Metadata": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "link": {
              "description": "A link to the FHIR specification that this test is covering.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Link"
              }
            },
            "capability": {
              "description": "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Capability"
              }
            }
          },
          "required": [
            "capability"
          ]
        }
      ]
    },
    "TestScript.Link": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "url": {
              "description": "URL to a particular requirement or feature within the FHIR specification.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Short description of the link.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "TestScript.Capability": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "required": {
              "description": "Whether or not the test execution will require the given capabilities of the server in order for this test script to execute.",
              "type": "true | false"
            },
            "required_": {
              "description": "Extensions for required",
              "$ref": "#/definitions/Element"
            },
            "validated": {
              "description": "Whether or not the test execution will validate the given capabilities of the server in order for this test script to execute.",
              "type": "true | false"
            },
            "validated_": {
              "description": "Extensions for validated",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "Description of the capabilities that this test script is requiring the server to support.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "origin": {
              "description": "Which origin server these requirements apply to.",
              "type": "array",
              "items": {
                "type": "number",
                "pattern": "-?([0]|([1-9][0-9]*))"
              }
            },
            "origin_": {
              "description": "Extensions for origin",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "destination": {
              "description": "Which server these requirements apply to.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "destination_": {
              "description": "Extensions for destination",
              "$ref": "#/definitions/Element"
            },
            "link": {
              "description": "Links to the FHIR specification that describes this interaction and the resources involved in more detail.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "link_": {
              "description": "Extensions for link",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "conformance": {
              "description": "Minimum conformance required of server for test script to execute successfully.   If server does not meet at a minimum the reference conformance definition, then all tests in this script are skipped.",
              "$ref": "#/definitions/Reference"
            }
          },
          "required": [
            "conformance"
          ]
        }
      ]
    },
    "TestScript.Fixture": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "autocreate": {
              "description": "Whether or not to implicitly create the fixture during setup. If true, the fixture is automatically created on each server being tested during setup, therefore no create operation is required for this fixture in the TestScript.setup section.",
              "type": "true | false"
            },
            "autocreate_": {
              "description": "Extensions for autocreate",
              "$ref": "#/definitions/Element"
            },
            "autodelete": {
              "description": "Whether or not to implicitly delete the fixture during teardown If true, the fixture is automatically deleted on each server being tested during teardown, therefore no delete operation is required for this fixture in the TestScript.teardown section.",
              "type": "true | false"
            },
            "autodelete_": {
              "description": "Extensions for autodelete",
              "$ref": "#/definitions/Element"
            },
            "resource": {
              "description": "Reference to the resource (containing the contents of the resource needed for operations).",
              "$ref": "#/definitions/Reference"
            }
          }
        }
      ]
    },
    "TestScript.Variable": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "name": {
              "description": "Descriptive name for this variable.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "defaultValue": {
              "description": "A default, hard-coded, or user-defined value for this variable.",
              "type": "string"
            },
            "defaultValue_": {
              "description": "Extensions for defaultValue",
              "$ref": "#/definitions/Element"
            },
            "headerField": {
              "description": "Will be used to grab the HTTP header field value from the headers that sourceId is pointing to.",
              "type": "string"
            },
            "headerField_": {
              "description": "Extensions for headerField",
              "$ref": "#/definitions/Element"
            },
            "path": {
              "description": "XPath or JSONPath against the fixture body.  When variables are defined, either headerField must be specified or path, but not both.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            },
            "sourceId": {
              "description": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against within this variable.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "sourceId_": {
              "description": "Extensions for sourceId",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "TestScript.Rule": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "resource": {
              "description": "Reference to the resource (containing the contents of the rule needed for assertions).",
              "$ref": "#/definitions/Reference"
            },
            "param": {
              "description": "Each rule template can take one or more parameters for rule evaluation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Param"
              }
            }
          },
          "required": [
            "resource"
          ]
        }
      ]
    },
    "TestScript.Param": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "name": {
              "description": "Descriptive name for this parameter that matches the external assert rule parameter name.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The explict or dynamic value for the parameter that will be passed on to the external rule template.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "TestScript.Ruleset": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "resource": {
              "description": "Reference to the resource (containing the contents of the ruleset needed for assertions).",
              "$ref": "#/definitions/Reference"
            },
            "rule": {
              "description": "The referenced rule within the external ruleset template.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Rule1"
              }
            }
          },
          "required": [
            "resource",
            "rule"
          ]
        }
      ]
    },
    "TestScript.Rule1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "ruleId": {
              "description": "Id of the referenced rule within the external ruleset template.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "ruleId_": {
              "description": "Extensions for ruleId",
              "$ref": "#/definitions/Element"
            },
            "param": {
              "description": "Each rule template can take one or more parameters for rule evaluation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Param1"
              }
            }
          }
        }
      ]
    },
    "TestScript.Param1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "name": {
              "description": "Descriptive name for this parameter that matches the external assert ruleset rule parameter name.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The value for the parameter that will be passed on to the external ruleset rule template.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "TestScript.Setup": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "metadata": {
              "description": "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
              "$ref": "#/definitions/TestScript.Metadata"
            },
            "action": {
              "description": "Action would contain either an operation or an assertion.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Action"
              }
            }
          },
          "required": [
            "action"
          ]
        }
      ]
    },
    "TestScript.Action": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "operation": {
              "description": "The operation to perform.",
              "$ref": "#/definitions/TestScript.Operation"
            },
            "assert": {
              "description": "Evaluates the results of previous operations to determine if the server under test behaves appropriately.",
              "$ref": "#/definitions/TestScript.Assert"
            }
          }
        }
      ]
    },
    "TestScript.Operation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "type": {
              "description": "Server interaction or operation type.",
              "$ref": "#/definitions/Coding"
            },
            "resource": {
              "description": "The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "resource_": {
              "description": "Extensions for resource",
              "$ref": "#/definitions/Element"
            },
            "label": {
              "description": "The label would be used for tracking/logging purposes by test engines.",
              "type": "string"
            },
            "label_": {
              "description": "Extensions for label",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "The description would be used by test engines for tracking and reporting purposes.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "accept": {
              "description": "The content-type or mime-type to use for RESTful operation in the \u0027Accept\u0027 header.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "accept_": {
              "description": "Extensions for accept",
              "$ref": "#/definitions/Element"
            },
            "contentType": {
              "description": "The content-type or mime-type to use for RESTful operation in the \u0027Content-Type\u0027 header.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contentType_": {
              "description": "Extensions for contentType",
              "$ref": "#/definitions/Element"
            },
            "destination": {
              "description": "The server where the request message is destined for.  Must be one of the server numbers listed in TestScript.destination section.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "destination_": {
              "description": "Extensions for destination",
              "$ref": "#/definitions/Element"
            },
            "encodeRequestUrl": {
              "description": "Whether or not to implicitly send the request url in encoded format. The default is true to match the standard RESTful client behavior. Set to false when communicating with a server that does not support encoded url paths.",
              "type": "true | false"
            },
            "encodeRequestUrl_": {
              "description": "Extensions for encodeRequestUrl",
              "$ref": "#/definitions/Element"
            },
            "origin": {
              "description": "The server where the request message originates from.  Must be one of the server numbers listed in TestScript.origin section.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "origin_": {
              "description": "Extensions for origin",
              "$ref": "#/definitions/Element"
            },
            "params": {
              "description": "Path plus parameters after [type].  Used to set parts of the request URL explicitly.",
              "type": "string"
            },
            "params_": {
              "description": "Extensions for params",
              "$ref": "#/definitions/Element"
            },
            "requestHeader": {
              "description": "Header elements would be used to set HTTP headers.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.RequestHeader"
              }
            },
            "responseId": {
              "description": "The fixture id (maybe new) to map to the response.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "responseId_": {
              "description": "Extensions for responseId",
              "$ref": "#/definitions/Element"
            },
            "sourceId": {
              "description": "The id of the fixture used as the body of a PUT or POST request.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "sourceId_": {
              "description": "Extensions for sourceId",
              "$ref": "#/definitions/Element"
            },
            "targetId": {
              "description": "Id of fixture used for extracting the [id],  [type], and [vid] for GET requests.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "targetId_": {
              "description": "Extensions for targetId",
              "$ref": "#/definitions/Element"
            },
            "url": {
              "description": "Complete request URL.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "TestScript.RequestHeader": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "field": {
              "description": "The HTTP header field e.g. \"Accept\".",
              "type": "string"
            },
            "field_": {
              "description": "Extensions for field",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The value of the header e.g. \"application/xml\".",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "TestScript.Assert": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "label": {
              "description": "The label would be used for tracking/logging purposes by test engines.",
              "type": "string"
            },
            "label_": {
              "description": "Extensions for label",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "The description would be used by test engines for tracking and reporting purposes.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "direction": {
              "description": "The direction to use for the assertion.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "direction_": {
              "description": "Extensions for direction",
              "$ref": "#/definitions/Element"
            },
            "compareToSourceId": {
              "description": "Id of fixture used to compare the \"sourceId/path\" evaluations to.",
              "type": "string"
            },
            "compareToSourceId_": {
              "description": "Extensions for compareToSourceId",
              "$ref": "#/definitions/Element"
            },
            "compareToSourcePath": {
              "description": "XPath or JSONPath expression against fixture used to compare the \"sourceId/path\" evaluations to.",
              "type": "string"
            },
            "compareToSourcePath_": {
              "description": "Extensions for compareToSourcePath",
              "$ref": "#/definitions/Element"
            },
            "contentType": {
              "description": "The content-type or mime-type to use for RESTful operation in the \u0027Content-Type\u0027 header.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "contentType_": {
              "description": "Extensions for contentType",
              "$ref": "#/definitions/Element"
            },
            "headerField": {
              "description": "The HTTP header field name e.g. \u0027Location\u0027.",
              "type": "string"
            },
            "headerField_": {
              "description": "Extensions for headerField",
              "$ref": "#/definitions/Element"
            },
            "minimumId": {
              "description": "The ID of a fixture.  Asserts that the response contains at a minimum the fixture specified by minimumId.",
              "type": "string"
            },
            "minimumId_": {
              "description": "Extensions for minimumId",
              "$ref": "#/definitions/Element"
            },
            "navigationLinks": {
              "description": "Whether or not the test execution performs validation on the bundle navigation links.",
              "type": "true | false"
            },
            "navigationLinks_": {
              "description": "Extensions for navigationLinks",
              "$ref": "#/definitions/Element"
            },
            "operator": {
              "description": "The operator type.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "operator_": {
              "description": "Extensions for operator",
              "$ref": "#/definitions/Element"
            },
            "path": {
              "description": "The XPath or JSONPath expression to be evaluated against the fixture representing the response received from server.",
              "type": "string"
            },
            "path_": {
              "description": "Extensions for path",
              "$ref": "#/definitions/Element"
            },
            "resource": {
              "description": "The type of the resource.  See http://hl7-fhir.github.io/resourcelist.html.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "resource_": {
              "description": "Extensions for resource",
              "$ref": "#/definitions/Element"
            },
            "response": {
              "description": "okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "response_": {
              "description": "Extensions for response",
              "$ref": "#/definitions/Element"
            },
            "responseCode": {
              "description": "The value of the HTTP response code to be tested.",
              "type": "string"
            },
            "responseCode_": {
              "description": "Extensions for responseCode",
              "$ref": "#/definitions/Element"
            },
            "rule": {
              "description": "The TestScript.rule this assert will evaluate.",
              "$ref": "#/definitions/TestScript.Rule2"
            },
            "ruleset": {
              "description": "The TestScript.ruleset this assert will evaluate.",
              "$ref": "#/definitions/TestScript.Ruleset1"
            },
            "sourceId": {
              "description": "Fixture to evaluate the XPath/JSONPath expression or the headerField  against.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "sourceId_": {
              "description": "Extensions for sourceId",
              "$ref": "#/definitions/Element"
            },
            "validateProfileId": {
              "description": "The ID of the Profile to validate against.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "validateProfileId_": {
              "description": "Extensions for validateProfileId",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The value to compare to.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            },
            "warningOnly": {
              "description": "Whether or not the test execution will produce a warning only on error for this assert.",
              "type": "true | false"
            },
            "warningOnly_": {
              "description": "Extensions for warningOnly",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "TestScript.Rule2": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "ruleId": {
              "description": "The TestScript.rule id value this assert will evaluate.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "ruleId_": {
              "description": "Extensions for ruleId",
              "$ref": "#/definitions/Element"
            },
            "param": {
              "description": "Each rule template can take one or more parameters for rule evaluation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Param2"
              }
            }
          }
        }
      ]
    },
    "TestScript.Param2": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "name": {
              "description": "Descriptive name for this parameter that matches the external assert rule parameter name.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The value for the parameter that will be passed on to the external rule template.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "TestScript.Ruleset1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "rulesetId": {
              "description": "The TestScript.ruleset id value this assert will evaluate.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "rulesetId_": {
              "description": "Extensions for rulesetId",
              "$ref": "#/definitions/Element"
            },
            "rule": {
              "description": "The referenced rule within the external ruleset template.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Rule3"
              }
            }
          }
        }
      ]
    },
    "TestScript.Rule3": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "ruleId": {
              "description": "Id of the referenced rule within the external ruleset template.",
              "type": "string",
              "pattern": "[A-Za-z0-9\\-\\.]{1,64}"
            },
            "ruleId_": {
              "description": "Extensions for ruleId",
              "$ref": "#/definitions/Element"
            },
            "param": {
              "description": "Each rule template can take one or more parameters for rule evaluation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Param3"
              }
            }
          }
        }
      ]
    },
    "TestScript.Param3": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "name": {
              "description": "Descriptive name for this parameter that matches the external assert ruleset rule parameter name.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The value for the parameter that will be passed on to the external ruleset rule template.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "TestScript.Test": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "name": {
              "description": "The name of this test used for tracking/logging purposes by test engines.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A short description of the test used by test engines for tracking and reporting purposes.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "metadata": {
              "description": "Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.",
              "$ref": "#/definitions/TestScript.Metadata"
            },
            "action": {
              "description": "Action would contain either an operation or an assertion.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Action1"
              }
            }
          },
          "required": [
            "action"
          ]
        }
      ]
    },
    "TestScript.Action1": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "operation": {
              "description": "An operation would involve a REST request to a server.",
              "$ref": "#/definitions/TestScript.Operation"
            },
            "assert": {
              "description": "Evaluates the results of previous operations to determine if the server under test behaves appropriately.",
              "$ref": "#/definitions/TestScript.Assert"
            }
          }
        }
      ]
    },
    "TestScript.Teardown": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "action": {
              "description": "The teardown action will only contain an operation.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TestScript.Action2"
              }
            }
          },
          "required": [
            "action"
          ]
        }
      ]
    },
    "TestScript.Action2": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "TestScript is a resource that specifies a suite of tests against a FHIR server implementation to determine compliance against the FHIR specification.",
          "properties": {
            "operation": {
              "description": "An operation would involve a REST request to a server.",
              "$ref": "#/definitions/TestScript.Operation"
            }
          }
        }
      ]
    },
    "ValueSet": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "resourceType": {
              "description": "This is a ValueSet resource",
              "type": "string",
              "enum": [
                "ValueSet"
              ]
            },
            "url": {
              "description": "An absolute URL that is used to identify this value set when it is referenced in a specification, model, design or an instance. This SHALL be a URL, SHOULD be globally unique, and SHOULD be an address at which this value set is (or will be) published.",
              "type": "string"
            },
            "url_": {
              "description": "Extensions for url",
              "$ref": "#/definitions/Element"
            },
            "identifier": {
              "description": "Formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.",
              "$ref": "#/definitions/Identifier"
            },
            "version": {
              "description": "Used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the profile author manually and the value should be a timestamp.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "name": {
              "description": "A free text natural language name describing the value set.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "status": {
              "description": "The status of the value set.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "status_": {
              "description": "Extensions for status",
              "$ref": "#/definitions/Element"
            },
            "experimental": {
              "description": "This valueset was authored for testing purposes (or education/evaluation/marketing), and is not intended to be used for genuine usage.",
              "type": "true | false"
            },
            "experimental_": {
              "description": "Extensions for experimental",
              "$ref": "#/definitions/Element"
            },
            "publisher": {
              "description": "The name of the individual or organization that published the value set.",
              "type": "string"
            },
            "publisher_": {
              "description": "Extensions for publisher",
              "$ref": "#/definitions/Element"
            },
            "contact": {
              "description": "Contacts to assist a user in finding and communicating with the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSet.Contact"
              }
            },
            "date": {
              "description": "The date that the value set status was last changed. The date must change when the business version changes, if it does, and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes (e.g. the \u0027content logical definition\u0027).",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "date_": {
              "description": "Extensions for date",
              "$ref": "#/definitions/Element"
            },
            "lockedDate": {
              "description": "If a locked date is defined, then the Content Logical Definition must be evaluated using the current version of all referenced code system(s) and value set instances as of the locked date.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1]))?)?"
            },
            "lockedDate_": {
              "description": "Extensions for lockedDate",
              "$ref": "#/definitions/Element"
            },
            "description": {
              "description": "A free text natural language description of the use of the value set - reason for definition, \"the semantic space\" to be included in the value set, conditions of use, etc. The description may include a list of expected usages for the value set and can also describe the approach taken to build the value set.",
              "type": "string"
            },
            "description_": {
              "description": "Extensions for description",
              "$ref": "#/definitions/Element"
            },
            "useContext": {
              "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These terms may be used to assist with indexing and searching of value set definitions.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CodeableConcept"
              }
            },
            "immutable": {
              "description": "If this is set to \u0027true\u0027, then no new versions of the content logical definition can be created.  Note: Other metadata might still change.",
              "type": "true | false"
            },
            "immutable_": {
              "description": "Extensions for immutable",
              "$ref": "#/definitions/Element"
            },
            "requirements": {
              "description": "Explains why this value set is needed and why it has been constrained as it has.",
              "type": "string"
            },
            "requirements_": {
              "description": "Extensions for requirements",
              "$ref": "#/definitions/Element"
            },
            "copyright": {
              "description": "A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.",
              "type": "string"
            },
            "copyright_": {
              "description": "Extensions for copyright",
              "$ref": "#/definitions/Element"
            },
            "extensible": {
              "description": "Whether this is intended to be used with an extensible binding or not.",
              "type": "true | false"
            },
            "extensible_": {
              "description": "Extensions for extensible",
              "$ref": "#/definitions/Element"
            },
            "compose": {
              "description": "A set of criteria that provide the content logical definition of the value set by including or excluding codes from outside this value set.",
              "$ref": "#/definitions/ValueSet.Compose"
            },
            "expansion": {
              "description": "A value set can also be \"expanded\", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.",
              "$ref": "#/definitions/ValueSet.Expansion"
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "ValueSet.Contact": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "name": {
              "description": "The name of an individual to contact regarding the value set.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "telecom": {
              "description": "Contact details for individual (if a name was provided) or the publisher.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ContactPoint"
              }
            }
          }
        }
      ]
    },
    "ValueSet.Compose": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "import": {
              "description": "Includes the contents of the referenced value set as a part of the contents of this value set. This is an absolute URI that is a reference to ValueSet.uri.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "import_": {
              "description": "Extensions for import",
              "items": {
                "$ref": "#/definitions/Element"
              }
            },
            "include": {
              "description": "Include one or more codes from a code system.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSet.Include"
              }
            },
            "exclude": {
              "description": "Exclude one or more codes from the value set.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSet.Include"
              }
            }
          }
        }
      ]
    },
    "ValueSet.Include": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "system": {
              "description": "An absolute URI which is the code system from which the selected codes come from.",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version of the code system that the codes are selected from.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "concept": {
              "description": "Specifies a concept to be included or excluded.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSet.Concept"
              }
            },
            "filter": {
              "description": "Select concepts by specify a matching criteria based on the properties (including relationships) defined by the system. If multiple filters are specified, they SHALL all be true.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSet.Filter"
              }
            }
          }
        }
      ]
    },
    "ValueSet.Concept": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "code": {
              "description": "Specifies a code for the concept to be included or excluded.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "display": {
              "description": "The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.",
              "type": "string"
            },
            "display_": {
              "description": "Extensions for display",
              "$ref": "#/definitions/Element"
            },
            "designation": {
              "description": "Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSet.Designation"
              }
            }
          }
        }
      ]
    },
    "ValueSet.Designation": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "language": {
              "description": "The language this designation is defined for.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "language_": {
              "description": "Extensions for language",
              "$ref": "#/definitions/Element"
            },
            "use": {
              "description": "A code that details how this designation would be used.",
              "$ref": "#/definitions/Coding"
            },
            "value": {
              "description": "The text value for this designation.",
              "type": "string"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ValueSet.Filter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "property": {
              "description": "A code that identifies a property defined in the code system.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "property_": {
              "description": "Extensions for property",
              "$ref": "#/definitions/Element"
            },
            "op": {
              "description": "The kind of operation to perform as a part of the filter criteria.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "op_": {
              "description": "Extensions for op",
              "$ref": "#/definitions/Element"
            },
            "value": {
              "description": "The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "value_": {
              "description": "Extensions for value",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ValueSet.Expansion": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "identifier": {
              "description": "An identifier that uniquely identifies this expansion of the valueset. Systems may re-use the same identifier as long as the expansion and the definition remain the same, but are not required to do so.",
              "type": "string"
            },
            "identifier_": {
              "description": "Extensions for identifier",
              "$ref": "#/definitions/Element"
            },
            "timestamp": {
              "description": "The time at which the expansion was produced by the expanding system.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "timestamp_": {
              "description": "Extensions for timestamp",
              "$ref": "#/definitions/Element"
            },
            "total": {
              "description": "The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "total_": {
              "description": "Extensions for total",
              "$ref": "#/definitions/Element"
            },
            "offset": {
              "description": "If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL not be present.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "offset_": {
              "description": "Extensions for offset",
              "$ref": "#/definitions/Element"
            },
            "parameter": {
              "description": "A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSet.Parameter"
              }
            },
            "contains": {
              "description": "The codes that are contained in the value set expansion.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSet.Contains"
              }
            }
          }
        }
      ]
    },
    "ValueSet.Parameter": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "name": {
              "description": "The name of the parameter.",
              "type": "string"
            },
            "name_": {
              "description": "Extensions for name",
              "$ref": "#/definitions/Element"
            },
            "valueString": {
              "description": "The value of the parameter.",
              "type": "string"
            },
            "valueString_": {
              "description": "Extensions for valueString",
              "$ref": "#/definitions/Element"
            },
            "valueBoolean": {
              "description": "The value of the parameter.",
              "type": "true | false"
            },
            "valueBoolean_": {
              "description": "Extensions for valueBoolean",
              "$ref": "#/definitions/Element"
            },
            "valueInteger": {
              "description": "The value of the parameter.",
              "pattern": "-?([0]|([1-9][0-9]*))",
              "type": "number"
            },
            "valueInteger_": {
              "description": "Extensions for valueInteger",
              "$ref": "#/definitions/Element"
            },
            "valueDecimal": {
              "description": "The value of the parameter.",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?",
              "type": "number"
            },
            "valueDecimal_": {
              "description": "Extensions for valueDecimal",
              "$ref": "#/definitions/Element"
            },
            "valueUri": {
              "description": "The value of the parameter.",
              "type": "string"
            },
            "valueUri_": {
              "description": "Extensions for valueUri",
              "$ref": "#/definitions/Element"
            },
            "valueCode": {
              "description": "The value of the parameter.",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*",
              "type": "string"
            },
            "valueCode_": {
              "description": "Extensions for valueCode",
              "$ref": "#/definitions/Element"
            }
          }
        }
      ]
    },
    "ValueSet.Contains": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "A value set specifies a set of codes drawn from one or more code systems.",
          "properties": {
            "system": {
              "description": "An absolute URI which is the code system in which the code for this item in the expansion is defined.",
              "type": "string"
            },
            "system_": {
              "description": "Extensions for system",
              "$ref": "#/definitions/Element"
            },
            "abstract": {
              "description": "If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.",
              "type": "true | false"
            },
            "abstract_": {
              "description": "Extensions for abstract",
              "$ref": "#/definitions/Element"
            },
            "version": {
              "description": "The version of this code system that defined this code and/or display. This should only be used with code systems that do not enforce concept permanence.",
              "type": "string"
            },
            "version_": {
              "description": "Extensions for version",
              "$ref": "#/definitions/Element"
            },
            "code": {
              "description": "The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "code_": {
              "description": "Extensions for code",
              "$ref": "#/definitions/Element"
            },
            "display": {
              "description": "The recommended display for this item in the expansion.",
              "type": "string"
            },
            "display_": {
              "description": "Extensions for display",
              "$ref": "#/definitions/Element"
            },
            "contains": {
              "description": "Other codes and entries contained under this entry in the hierarchy.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ValueSet.Contains"
              }
            }
          }
        }
      ]
    },
    "VisionPrescription": {
      "allOf": [
        {
          "$ref": "#/definitions/DomainResource"
        },
        {
          "description": "An authorization for the supply of glasses and/or contact lenses to a patient.",
          "properties": {
            "resourceType": {
              "description": "This is a VisionPrescription resource",
              "type": "string",
              "enum": [
                "VisionPrescription"
              ]
            },
            "identifier": {
              "description": "Business identifier which may be used by other parties to reference or identify the prescription.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Identifier"
              }
            },
            "dateWritten": {
              "description": "The date (and perhaps time) when the prescription was written.",
              "type": "string",
              "pattern": "-?[0-9]{4}(-(0[1-9]|1[0-2])(-(0[0-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?"
            },
            "dateWritten_": {
              "description": "Extensions for dateWritten",
              "$ref": "#/definitions/Element"
            },
            "patient": {
              "description": "A link to a resource representing the person to whom the vision products will be supplied.",
              "$ref": "#/definitions/Reference"
            },
            "prescriber": {
              "description": "The healthcare professional responsible for authorizing the prescription.",
              "$ref": "#/definitions/Reference"
            },
            "encounter": {
              "description": "A link to a resource that identifies the particular occurrence of contact between patient and health care provider.",
              "$ref": "#/definitions/Reference"
            },
            "reasonCodeableConcept": {
              "description": "Can be the reason or the indication for writing the prescription.",
              "$ref": "#/definitions/CodeableConcept"
            },
            "reasonReference": {
              "description": "Can be the reason or the indication for writing the prescription.",
              "$ref": "#/definitions/Reference"
            },
            "dispense": {
              "description": "Deals with details of the dispense part of the supply specification.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/VisionPrescription.Dispense"
              }
            }
          },
          "required": [
            "resourceType"
          ]
        }
      ]
    },
    "VisionPrescription.Dispense": {
      "allOf": [
        {
          "$ref": "#/definitions/BackboneElement"
        },
        {
          "description": "An authorization for the supply of glasses and/or contact lenses to a patient.",
          "properties": {
            "product": {
              "description": "Identifies the type of vision correction product which is required for the patient.",
              "$ref": "#/definitions/Coding"
            },
            "eye": {
              "description": "The eye for which the lens applies.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "eye_": {
              "description": "Extensions for eye",
              "$ref": "#/definitions/Element"
            },
            "sphere": {
              "description": "Lens power measured in diopters (0.25 units).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "sphere_": {
              "description": "Extensions for sphere",
              "$ref": "#/definitions/Element"
            },
            "cylinder": {
              "description": "Power adjustment for astigmatism measured in diopters (0.25 units).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "cylinder_": {
              "description": "Extensions for cylinder",
              "$ref": "#/definitions/Element"
            },
            "axis": {
              "description": "Adjustment for astigmatism measured in integer degrees.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))"
            },
            "axis_": {
              "description": "Extensions for axis",
              "$ref": "#/definitions/Element"
            },
            "prism": {
              "description": "Amount of prism to compensate for eye alignment in fractional units.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "prism_": {
              "description": "Extensions for prism",
              "$ref": "#/definitions/Element"
            },
            "base": {
              "description": "The relative base, or reference lens edge, for the prism.",
              "type": "string",
              "pattern": "[^\\s]+([\\s]?[^\\s]+)*"
            },
            "base_": {
              "description": "Extensions for base",
              "$ref": "#/definitions/Element"
            },
            "add": {
              "description": "Power adjustment for multifocal lenses measured in diopters (0.25 units).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "add_": {
              "description": "Extensions for add",
              "$ref": "#/definitions/Element"
            },
            "power": {
              "description": "Contact lens power measured in diopters (0.25 units).",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "power_": {
              "description": "Extensions for power",
              "$ref": "#/definitions/Element"
            },
            "backCurve": {
              "description": "Back curvature measured in millimeters.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "backCurve_": {
              "description": "Extensions for backCurve",
              "$ref": "#/definitions/Element"
            },
            "diameter": {
              "description": "Contact lens diameter measured in millimeters.",
              "type": "number",
              "pattern": "-?([0]|([1-9][0-9]*))(\\.[0-9]+)?"
            },
            "diameter_": {
              "description": "Extensions for diameter",
              "$ref": "#/definitions/Element"
            },
            "duration": {
              "description": "The recommended maximum wear period for the lens.",
              "$ref": "#/definitions/SimpleQuantity"
            },
            "color": {
              "description": "Special color or pattern.",
              "type": "string"
            },
            "color_": {
              "description": "Extensions for color",
              "$ref": "#/definitions/Element"
            },
            "brand": {
              "description": "Brand recommendations or restrictions.",
              "type": "string"
            },
            "brand_": {
              "description": "Extensions for brand",
              "$ref": "#/definitions/Element"
            },
            "notes": {
              "description": "Notes for special requirements such as coatings and lens materials.",
              "type": "string"
            },
            "notes_": {
              "description": "Extensions for notes",
              "$ref": "#/definitions/Element"
            }
          },
          "required": [
            "product"
          ]
        }
      ]
    },
    "ResourceList": {
      "oneOf": [
        {
          "$ref": "#/definitions/Account"
        },
        {
          "$ref": "#/definitions/AllergyIntolerance"
        },
        {
          "$ref": "#/definitions/Appointment"
        },
        {
          "$ref": "#/definitions/AppointmentResponse"
        },
        {
          "$ref": "#/definitions/AuditEvent"
        },
        {
          "$ref": "#/definitions/Basic"
        },
        {
          "$ref": "#/definitions/Binary"
        },
        {
          "$ref": "#/definitions/BodySite"
        },
        {
          "$ref": "#/definitions/Bundle"
        },
        {
          "$ref": "#/definitions/CarePlan"
        },
        {
          "$ref": "#/definitions/CareTeam"
        },
        {
          "$ref": "#/definitions/Claim"
        },
        {
          "$ref": "#/definitions/ClaimResponse"
        },
        {
          "$ref": "#/definitions/ClinicalImpression"
        },
        {
          "$ref": "#/definitions/CodeSystem"
        },
        {
          "$ref": "#/definitions/Communication"
        },
        {
          "$ref": "#/definitions/CommunicationRequest"
        },
        {
          "$ref": "#/definitions/CompartmentDefinition"
        },
        {
          "$ref": "#/definitions/Composition"
        },
        {
          "$ref": "#/definitions/ConceptMap"
        },
        {
          "$ref": "#/definitions/Condition"
        },
        {
          "$ref": "#/definitions/Conformance"
        },
        {
          "$ref": "#/definitions/Consent"
        },
        {
          "$ref": "#/definitions/Contract"
        },
        {
          "$ref": "#/definitions/Coverage"
        },
        {
          "$ref": "#/definitions/DataElement"
        },
        {
          "$ref": "#/definitions/DecisionSupportRule"
        },
        {
          "$ref": "#/definitions/DecisionSupportServiceModule"
        },
        {
          "$ref": "#/definitions/DetectedIssue"
        },
        {
          "$ref": "#/definitions/Device"
        },
        {
          "$ref": "#/definitions/DeviceComponent"
        },
        {
          "$ref": "#/definitions/DeviceMetric"
        },
        {
          "$ref": "#/definitions/DeviceUseRequest"
        },
        {
          "$ref": "#/definitions/DeviceUseStatement"
        },
        {
          "$ref": "#/definitions/DiagnosticOrder"
        },
        {
          "$ref": "#/definitions/DiagnosticReport"
        },
        {
          "$ref": "#/definitions/DocumentManifest"
        },
        {
          "$ref": "#/definitions/DocumentReference"
        },
        {
          "$ref": "#/definitions/EligibilityRequest"
        },
        {
          "$ref": "#/definitions/EligibilityResponse"
        },
        {
          "$ref": "#/definitions/Encounter"
        },
        {
          "$ref": "#/definitions/Endpoint"
        },
        {
          "$ref": "#/definitions/EnrollmentRequest"
        },
        {
          "$ref": "#/definitions/EnrollmentResponse"
        },
        {
          "$ref": "#/definitions/EpisodeOfCare"
        },
        {
          "$ref": "#/definitions/ExpansionProfile"
        },
        {
          "$ref": "#/definitions/ExplanationOfBenefit"
        },
        {
          "$ref": "#/definitions/FamilyMemberHistory"
        },
        {
          "$ref": "#/definitions/Flag"
        },
        {
          "$ref": "#/definitions/Goal"
        },
        {
          "$ref": "#/definitions/Group"
        },
        {
          "$ref": "#/definitions/GuidanceResponse"
        },
        {
          "$ref": "#/definitions/HealthcareService"
        },
        {
          "$ref": "#/definitions/ImagingManifest"
        },
        {
          "$ref": "#/definitions/ImagingStudy"
        },
        {
          "$ref": "#/definitions/Immunization"
        },
        {
          "$ref": "#/definitions/ImmunizationRecommendation"
        },
        {
          "$ref": "#/definitions/ImplementationGuide"
        },
        {
          "$ref": "#/definitions/Library"
        },
        {
          "$ref": "#/definitions/Linkage"
        },
        {
          "$ref": "#/definitions/List"
        },
        {
          "$ref": "#/definitions/Location"
        },
        {
          "$ref": "#/definitions/Measure"
        },
        {
          "$ref": "#/definitions/MeasureReport"
        },
        {
          "$ref": "#/definitions/Media"
        },
        {
          "$ref": "#/definitions/Medication"
        },
        {
          "$ref": "#/definitions/MedicationAdministration"
        },
        {
          "$ref": "#/definitions/MedicationDispense"
        },
        {
          "$ref": "#/definitions/MedicationOrder"
        },
        {
          "$ref": "#/definitions/MedicationStatement"
        },
        {
          "$ref": "#/definitions/MessageHeader"
        },
        {
          "$ref": "#/definitions/ModuleDefinition"
        },
        {
          "$ref": "#/definitions/NamingSystem"
        },
        {
          "$ref": "#/definitions/NutritionOrder"
        },
        {
          "$ref": "#/definitions/Observation"
        },
        {
          "$ref": "#/definitions/OperationDefinition"
        },
        {
          "$ref": "#/definitions/OperationOutcome"
        },
        {
          "$ref": "#/definitions/Order"
        },
        {
          "$ref": "#/definitions/OrderResponse"
        },
        {
          "$ref": "#/definitions/OrderSet"
        },
        {
          "$ref": "#/definitions/Organization"
        },
        {
          "$ref": "#/definitions/Parameters"
        },
        {
          "$ref": "#/definitions/Patient"
        },
        {
          "$ref": "#/definitions/PaymentNotice"
        },
        {
          "$ref": "#/definitions/PaymentReconciliation"
        },
        {
          "$ref": "#/definitions/Person"
        },
        {
          "$ref": "#/definitions/Practitioner"
        },
        {
          "$ref": "#/definitions/PractitionerRole"
        },
        {
          "$ref": "#/definitions/Procedure"
        },
        {
          "$ref": "#/definitions/ProcedureRequest"
        },
        {
          "$ref": "#/definitions/ProcessRequest"
        },
        {
          "$ref": "#/definitions/ProcessResponse"
        },
        {
          "$ref": "#/definitions/Protocol"
        },
        {
          "$ref": "#/definitions/Provenance"
        },
        {
          "$ref": "#/definitions/Questionnaire"
        },
        {
          "$ref": "#/definitions/QuestionnaireResponse"
        },
        {
          "$ref": "#/definitions/ReferralRequest"
        },
        {
          "$ref": "#/definitions/RelatedPerson"
        },
        {
          "$ref": "#/definitions/RiskAssessment"
        },
        {
          "$ref": "#/definitions/Schedule"
        },
        {
          "$ref": "#/definitions/SearchParameter"
        },
        {
          "$ref": "#/definitions/Sequence"
        },
        {
          "$ref": "#/definitions/Slot"
        },
        {
          "$ref": "#/definitions/Specimen"
        },
        {
          "$ref": "#/definitions/StructureDefinition"
        },
        {
          "$ref": "#/definitions/StructureMap"
        },
        {
          "$ref": "#/definitions/Subscription"
        },
        {
          "$ref": "#/definitions/Substance"
        },
        {
          "$ref": "#/definitions/SupplyDelivery"
        },
        {
          "$ref": "#/definitions/SupplyRequest"
        },
        {
          "$ref": "#/definitions/Task"
        },
        {
          "$ref": "#/definitions/TestScript"
        },
        {
          "$ref": "#/definitions/ValueSet"
        },
        {
          "$ref": "#/definitions/VisionPrescription"
        }
      ]
    }
  }
}